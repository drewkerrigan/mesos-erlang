%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.22.3
-module(agent_protobuf).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2]).
-export([merge_msgs/2]).
-export([verify_msg/1]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_Call.Type'/1, 'enum_value_by_symbol_Call.Type'/1]).
-export(['enum_symbol_by_value_Response.Type'/1, 'enum_value_by_symbol_Response.Type'/1]).
-export([enum_symbol_by_value_Status/1, enum_value_by_symbol_Status/1]).
-export(['enum_symbol_by_value_MachineInfo.Mode'/1, 'enum_value_by_symbol_MachineInfo.Mode'/1]).
-export(['enum_symbol_by_value_FrameworkInfo.Capability.Type'/1, 'enum_value_by_symbol_FrameworkInfo.Capability.Type'/1]).
-export(['enum_symbol_by_value_Value.Type'/1, 'enum_value_by_symbol_Value.Type'/1]).
-export(['enum_symbol_by_value_Resource.DiskInfo.Source.Type'/1, 'enum_value_by_symbol_Resource.DiskInfo.Source.Type'/1]).
-export(['enum_symbol_by_value_Offer.Operation.Type'/1, 'enum_value_by_symbol_Offer.Operation.Type'/1]).
-export([enum_symbol_by_value_TaskState/1, enum_value_by_symbol_TaskState/1]).
-export(['enum_symbol_by_value_TaskStatus.Source'/1, 'enum_value_by_symbol_TaskStatus.Source'/1]).
-export(['enum_symbol_by_value_TaskStatus.Reason'/1, 'enum_value_by_symbol_TaskStatus.Reason'/1]).
-export(['enum_symbol_by_value_Image.Type'/1, 'enum_value_by_symbol_Image.Type'/1]).
-export(['enum_symbol_by_value_Volume.Mode'/1, 'enum_value_by_symbol_Volume.Mode'/1]).
-export(['enum_symbol_by_value_Volume.Source.Type'/1, 'enum_value_by_symbol_Volume.Source.Type'/1]).
-export(['enum_symbol_by_value_NetworkInfo.Protocol'/1, 'enum_value_by_symbol_NetworkInfo.Protocol'/1]).
-export(['enum_symbol_by_value_ContainerInfo.Type'/1, 'enum_value_by_symbol_ContainerInfo.Type'/1]).
-export(['enum_symbol_by_value_ContainerInfo.DockerInfo.Network'/1, 'enum_value_by_symbol_ContainerInfo.DockerInfo.Network'/1]).
-export(['enum_symbol_by_value_DiscoveryInfo.Visibility'/1, 'enum_value_by_symbol_DiscoveryInfo.Visibility'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("agent_protobuf.hrl").
-include_lib("gpb/include/gpb.hrl").



encode_msg(Msg) -> encode_msg(Msg, []).


encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg);
      false -> ok
    end,
    case Msg of
      #'Environment.Variable'{} ->
	  'e_msg_Environment.Variable'(Msg);
      #'Environment'{} -> e_msg_Environment(Msg);
      #'CommandInfo.URI'{} -> 'e_msg_CommandInfo.URI'(Msg);
      #'CommandInfo'{} -> e_msg_CommandInfo(Msg);
      #'Parameter'{} -> e_msg_Parameter(Msg);
      #'ContainerInfo.DockerInfo.PortMapping'{} ->
	  'e_msg_ContainerInfo.DockerInfo.PortMapping'(Msg);
      #'ContainerInfo.DockerInfo'{} ->
	  'e_msg_ContainerInfo.DockerInfo'(Msg);
      #'TimeInfo'{} -> e_msg_TimeInfo(Msg);
      #'WeightInfo'{} -> e_msg_WeightInfo(Msg);
      #'DurationInfo'{} -> e_msg_DurationInfo(Msg);
      #'Unavailability'{} -> e_msg_Unavailability(Msg);
      #'MachineID'{} -> e_msg_MachineID(Msg);
      #'MachineInfo'{} -> e_msg_MachineInfo(Msg);
      #'Resource.RevocableInfo'{} ->
	  'e_msg_Resource.RevocableInfo'(Msg);
      #'Resource.DiskInfo.Source.Mount'{} ->
	  'e_msg_Resource.DiskInfo.Source.Mount'(Msg);
      #'Resource.DiskInfo.Source.Path'{} ->
	  'e_msg_Resource.DiskInfo.Source.Path'(Msg);
      #'Resource.DiskInfo.Source'{} ->
	  'e_msg_Resource.DiskInfo.Source'(Msg);
      #'Parameters'{} -> e_msg_Parameters(Msg);
      #'Volume.Source.DockerVolume'{} ->
	  'e_msg_Volume.Source.DockerVolume'(Msg);
      #'Volume.Source'{} -> 'e_msg_Volume.Source'(Msg);
      #'Credential'{} -> e_msg_Credential(Msg);
      #'Image.Docker'{} -> 'e_msg_Image.Docker'(Msg);
      #'Label'{} -> e_msg_Label(Msg);
      #'Labels'{} -> e_msg_Labels(Msg);
      #'Image.Appc'{} -> 'e_msg_Image.Appc'(Msg);
      #'Image'{} -> e_msg_Image(Msg);
      #'Volume'{} -> e_msg_Volume(Msg);
      #'Resource.DiskInfo.Persistence'{} ->
	  'e_msg_Resource.DiskInfo.Persistence'(Msg);
      #'Resource.DiskInfo'{} ->
	  'e_msg_Resource.DiskInfo'(Msg);
      #'Resource.ReservationInfo'{} ->
	  'e_msg_Resource.ReservationInfo'(Msg);
      #'Value.Set'{} -> 'e_msg_Value.Set'(Msg);
      #'Value.Range'{} -> 'e_msg_Value.Range'(Msg);
      #'Value.Ranges'{} -> 'e_msg_Value.Ranges'(Msg);
      #'Value.Scalar'{} -> 'e_msg_Value.Scalar'(Msg);
      #'Resource'{} -> e_msg_Resource(Msg);
      #'Offer.Operation.Destroy'{} ->
	  'e_msg_Offer.Operation.Destroy'(Msg);
      #'Offer.Operation.Create'{} ->
	  'e_msg_Offer.Operation.Create'(Msg);
      #'Offer.Operation.Unreserve'{} ->
	  'e_msg_Offer.Operation.Unreserve'(Msg);
      #'Offer.Operation.Reserve'{} ->
	  'e_msg_Offer.Operation.Reserve'(Msg);
      #'Port'{} -> e_msg_Port(Msg);
      #'Ports'{} -> e_msg_Ports(Msg);
      #'DiscoveryInfo'{} -> e_msg_DiscoveryInfo(Msg);
      #'KillPolicy'{} -> e_msg_KillPolicy(Msg);
      #'HealthCheck.HTTP'{} -> 'e_msg_HealthCheck.HTTP'(Msg);
      #'HealthCheck'{} -> e_msg_HealthCheck(Msg);
      #'NetworkInfo.IPAddress'{} ->
	  'e_msg_NetworkInfo.IPAddress'(Msg);
      #'NetworkInfo'{} -> e_msg_NetworkInfo(Msg);
      #'ContainerInfo.MesosInfo'{} ->
	  'e_msg_ContainerInfo.MesosInfo'(Msg);
      #'ContainerInfo'{} -> e_msg_ContainerInfo(Msg);
      #'FrameworkID'{} -> e_msg_FrameworkID(Msg);
      #'ExecutorID'{} -> e_msg_ExecutorID(Msg);
      #'ExecutorInfo'{} -> e_msg_ExecutorInfo(Msg);
      #'AgentID'{} -> e_msg_AgentID(Msg);
      #'TaskID'{} -> e_msg_TaskID(Msg);
      #'TaskInfo'{} -> e_msg_TaskInfo(Msg);
      #'Offer.Operation.Launch'{} ->
	  'e_msg_Offer.Operation.Launch'(Msg);
      #'Offer.Operation'{} -> 'e_msg_Offer.Operation'(Msg);
      #'Flag'{} -> e_msg_Flag(Msg);
      #'Value.Text'{} -> 'e_msg_Value.Text'(Msg);
      #'Value'{} -> e_msg_Value(Msg);
      #'Request'{} -> e_msg_Request(Msg);
      #'ContainerID'{} -> e_msg_ContainerID(Msg);
      #'Metric'{} -> e_msg_Metric(Msg);
      #'Response.GetFileContents'{} ->
	  'e_msg_Response.GetFileContents'(Msg);
      #'CgroupInfo.NetCls'{} ->
	  'e_msg_CgroupInfo.NetCls'(Msg);
      #'Call.GetMetrics'{} -> 'e_msg_Call.GetMetrics'(Msg);
      #'UdpStatistics'{} -> e_msg_UdpStatistics(Msg);
      #'TcpStatistics'{} -> e_msg_TcpStatistics(Msg);
      #'IpStatistics'{} -> e_msg_IpStatistics(Msg);
      #'Response.GetMetrics'{} ->
	  'e_msg_Response.GetMetrics'(Msg);
      #'VersionInfo'{} -> e_msg_VersionInfo(Msg);
      #'Address'{} -> e_msg_Address(Msg);
      #'MasterInfo'{} -> e_msg_MasterInfo(Msg);
      #'FrameworkInfo.Capability'{} ->
	  'e_msg_FrameworkInfo.Capability'(Msg);
      #'FrameworkInfo'{} -> e_msg_FrameworkInfo(Msg);
      #'URL'{} -> e_msg_URL(Msg);
      #'Call.ReadFile'{} -> 'e_msg_Call.ReadFile'(Msg);
      #'Call.ListFiles'{} -> 'e_msg_Call.ListFiles'(Msg);
      #'Call.SetLoggingLevel'{} ->
	  'e_msg_Call.SetLoggingLevel'(Msg);
      #'Call'{} -> e_msg_Call(Msg);
      #'ResourceUsage.Executor.Task'{} ->
	  'e_msg_ResourceUsage.Executor.Task'(Msg);
      #'Role'{} -> e_msg_Role(Msg);
      #'IcmpStatistics'{} -> e_msg_IcmpStatistics(Msg);
      #'SNMPStatistics'{} -> e_msg_SNMPStatistics(Msg);
      #'TrafficControlStatistics'{} ->
	  e_msg_TrafficControlStatistics(Msg);
      #'PerfStatistics'{} -> e_msg_PerfStatistics(Msg);
      #'ResourceStatistics'{} ->
	  e_msg_ResourceStatistics(Msg);
      #'FileInfo'{} -> e_msg_FileInfo(Msg);
      #'Response.ListFiles'{} ->
	  'e_msg_Response.ListFiles'(Msg);
      #'CgroupInfo'{} -> e_msg_CgroupInfo(Msg);
      #'ContainerStatus'{} -> e_msg_ContainerStatus(Msg);
      #'TaskStatus'{} -> e_msg_TaskStatus(Msg);
      #'Attribute'{} -> e_msg_Attribute(Msg);
      #'AgentInfo'{} -> e_msg_AgentInfo(Msg);
      #'Response.GetLoggingLevel'{} ->
	  'e_msg_Response.GetLoggingLevel'(Msg);
      #'Task'{} -> e_msg_Task(Msg);
      #'Response.GetContainers.Container'{} ->
	  'e_msg_Response.GetContainers.Container'(Msg);
      #'Response.GetContainers'{} ->
	  'e_msg_Response.GetContainers'(Msg);
      #'Response.GetState'{} ->
	  'e_msg_Response.GetState'(Msg);
      #'Response.GetVersion'{} ->
	  'e_msg_Response.GetVersion'(Msg);
      #'Response.GetFlags'{} ->
	  'e_msg_Response.GetFlags'(Msg);
      #'Response.GetHealth'{} ->
	  'e_msg_Response.GetHealth'(Msg);
      #'Response'{} -> e_msg_Response(Msg);
      #'Filters'{} -> e_msg_Filters(Msg);
      #'Credentials'{} -> e_msg_Credentials(Msg);
      #'RateLimit'{} -> e_msg_RateLimit(Msg);
      #'RateLimits'{} -> e_msg_RateLimits(Msg);
      #'OfferID'{} -> e_msg_OfferID(Msg);
      #'InverseOffer'{} -> e_msg_InverseOffer(Msg);
      #'ResourceUsage.Executor'{} ->
	  'e_msg_ResourceUsage.Executor'(Msg);
      #'ResourceUsage'{} -> e_msg_ResourceUsage(Msg);
      #'Offer'{} -> e_msg_Offer(Msg)
    end.


'e_msg_Environment.Variable'(Msg) ->
    'e_msg_Environment.Variable'(Msg, <<>>).


'e_msg_Environment.Variable'(#'Environment.Variable'{name
							 = F1,
						     value = F2},
			     Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

e_msg_Environment(Msg) -> e_msg_Environment(Msg, <<>>).


e_msg_Environment(#'Environment'{variables = F1},
		  Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_Environment_variables(TrF1, Bin)
      end
    end.

'e_msg_CommandInfo.URI'(Msg) ->
    'e_msg_CommandInfo.URI'(Msg, <<>>).


'e_msg_CommandInfo.URI'(#'CommandInfo.URI'{value = F1,
					   executable = F2, extract = F3,
					   cache = F4, output_file = F5},
			Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_bool(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bool(F4, <<B3/binary, 32>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_type_string(F5, <<B4/binary, 42>>)
    end.

e_msg_CommandInfo(Msg) -> e_msg_CommandInfo(Msg, <<>>).


e_msg_CommandInfo(#'CommandInfo'{uris = F1,
				 environment = F2, shell = F3, value = F4,
				 arguments = F5, user = F6},
		  Bin) ->
    B1 = begin
	   TrF1 = id(F1),
	   if TrF1 == [] -> Bin;
	      true -> e_field_CommandInfo_uris(TrF1, Bin)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_CommandInfo_environment(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_bool(F3, <<B2/binary, 48>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 26>>)
	 end,
    B5 = begin
	   TrF5 = id(F5),
	   if TrF5 == [] -> B4;
	      true -> e_field_CommandInfo_arguments(TrF5, B4)
	   end
	 end,
    if F6 == undefined -> B5;
       true -> e_type_string(F6, <<B5/binary, 42>>)
    end.

e_msg_Parameter(Msg) -> e_msg_Parameter(Msg, <<>>).


e_msg_Parameter(#'Parameter'{key = F1, value = F2},
		Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    e_type_string(F2, <<B1/binary, 18>>).

'e_msg_ContainerInfo.DockerInfo.PortMapping'(Msg) ->
    'e_msg_ContainerInfo.DockerInfo.PortMapping'(Msg, <<>>).


'e_msg_ContainerInfo.DockerInfo.PortMapping'(#'ContainerInfo.DockerInfo.PortMapping'{host_port
											 =
											 F1,
										     container_port
											 =
											 F2,
										     protocol
											 =
											 F3},
					     Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

'e_msg_ContainerInfo.DockerInfo'(Msg) ->
    'e_msg_ContainerInfo.DockerInfo'(Msg, <<>>).


'e_msg_ContainerInfo.DockerInfo'(#'ContainerInfo.DockerInfo'{image
								 = F1,
							     network = F2,
							     port_mappings = F3,
							     privileged = F4,
							     parameters = F5,
							     force_pull_image =
								 F6,
							     volume_driver =
								 F7},
				 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_enum_ContainerInfo.DockerInfo.Network'(F2,
							  <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ContainerInfo.DockerInfo_port_mappings'(TrF3,
								   B2)
	   end
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_bool(F4, <<B3/binary, 32>>)
	 end,
    B5 = begin
	   TrF5 = id(F5),
	   if TrF5 == [] -> B4;
	      true ->
		  'e_field_ContainerInfo.DockerInfo_parameters'(TrF5, B4)
	   end
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bool(F6, <<B5/binary, 48>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_string(F7, <<B6/binary, 58>>)
    end.

e_msg_TimeInfo(Msg) -> e_msg_TimeInfo(Msg, <<>>).


e_msg_TimeInfo(#'TimeInfo'{nanoseconds = F1}, Bin) ->
    e_type_int64(F1, <<Bin/binary, 8>>).

e_msg_WeightInfo(Msg) -> e_msg_WeightInfo(Msg, <<>>).


e_msg_WeightInfo(#'WeightInfo'{weight = F1, role = F2},
		 Bin) ->
    B1 = e_type_double(F1, <<Bin/binary, 9>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

e_msg_DurationInfo(Msg) ->
    e_msg_DurationInfo(Msg, <<>>).


e_msg_DurationInfo(#'DurationInfo'{nanoseconds = F1},
		   Bin) ->
    e_type_int64(F1, <<Bin/binary, 8>>).

e_msg_Unavailability(Msg) ->
    e_msg_Unavailability(Msg, <<>>).


e_msg_Unavailability(#'Unavailability'{start = F1,
				       duration = F2},
		     Bin) ->
    B1 = e_mfield_Unavailability_start(F1,
				       <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true ->
	   e_mfield_Unavailability_duration(F2, <<B1/binary, 18>>)
    end.

e_msg_MachineID(Msg) -> e_msg_MachineID(Msg, <<>>).


e_msg_MachineID(#'MachineID'{hostname = F1, ip = F2},
		Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

e_msg_MachineInfo(Msg) -> e_msg_MachineInfo(Msg, <<>>).


e_msg_MachineInfo(#'MachineInfo'{id = F1, mode = F2,
				 unavailability = F3},
		  Bin) ->
    B1 = e_mfield_MachineInfo_id(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> 'e_enum_MachineInfo.Mode'(F2, <<B1/binary, 16>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   e_mfield_MachineInfo_unavailability(F3,
					       <<B2/binary, 26>>)
    end.

'e_msg_Resource.RevocableInfo'(_Msg) -> <<>>.

'e_msg_Resource.DiskInfo.Source.Mount'(Msg) ->
    'e_msg_Resource.DiskInfo.Source.Mount'(Msg, <<>>).


'e_msg_Resource.DiskInfo.Source.Mount'(#'Resource.DiskInfo.Source.Mount'{root
									     =
									     F1},
				       Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_Resource.DiskInfo.Source.Path'(Msg) ->
    'e_msg_Resource.DiskInfo.Source.Path'(Msg, <<>>).


'e_msg_Resource.DiskInfo.Source.Path'(#'Resource.DiskInfo.Source.Path'{root
									   =
									   F1},
				      Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_Resource.DiskInfo.Source'(Msg) ->
    'e_msg_Resource.DiskInfo.Source'(Msg, <<>>).


'e_msg_Resource.DiskInfo.Source'(#'Resource.DiskInfo.Source'{type
								 = F1,
							     path = F2,
							     mount = F3},
				 Bin) ->
    B1 = 'e_enum_Resource.DiskInfo.Source.Type'(F1,
						<<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_Resource.DiskInfo.Source_path'(F2,
							 <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_Resource.DiskInfo.Source_mount'(F3,
						     <<B2/binary, 26>>)
    end.

e_msg_Parameters(Msg) -> e_msg_Parameters(Msg, <<>>).


e_msg_Parameters(#'Parameters'{parameter = F1}, Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_Parameters_parameter(TrF1, Bin)
      end
    end.

'e_msg_Volume.Source.DockerVolume'(Msg) ->
    'e_msg_Volume.Source.DockerVolume'(Msg, <<>>).


'e_msg_Volume.Source.DockerVolume'(#'Volume.Source.DockerVolume'{driver
								     = F1,
								 name = F2,
								 driver_options
								     = F3},
				   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_Volume.Source.DockerVolume_driver_options'(F3,
								<<B2/binary,
								  26>>)
    end.

'e_msg_Volume.Source'(Msg) ->
    'e_msg_Volume.Source'(Msg, <<>>).


'e_msg_Volume.Source'(#'Volume.Source'{type = F1,
				       docker_volume = F2},
		      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_Volume.Source.Type'(F1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_Volume.Source_docker_volume'(F2,
						  <<B1/binary, 18>>)
    end.

e_msg_Credential(Msg) -> e_msg_Credential(Msg, <<>>).


e_msg_Credential(#'Credential'{principal = F1,
			       secret = F2},
		 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

'e_msg_Image.Docker'(Msg) ->
    'e_msg_Image.Docker'(Msg, <<>>).


'e_msg_Image.Docker'(#'Image.Docker'{name = F1,
				     credential = F2},
		     Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_Image.Docker_credential'(F2,
					      <<B1/binary, 18>>)
    end.

e_msg_Label(Msg) -> e_msg_Label(Msg, <<>>).


e_msg_Label(#'Label'{key = F1, value = F2}, Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

e_msg_Labels(Msg) -> e_msg_Labels(Msg, <<>>).


e_msg_Labels(#'Labels'{labels = F1}, Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_Labels_labels(TrF1, Bin)
      end
    end.

'e_msg_Image.Appc'(Msg) ->
    'e_msg_Image.Appc'(Msg, <<>>).


'e_msg_Image.Appc'(#'Image.Appc'{name = F1, id = F2,
				 labels = F3},
		   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_Image.Appc_labels'(F3, <<B2/binary, 26>>)
    end.

e_msg_Image(Msg) -> e_msg_Image(Msg, <<>>).


e_msg_Image(#'Image'{type = F1, appc = F2, docker = F3,
		     cached = F4},
	    Bin) ->
    B1 = 'e_enum_Image.Type'(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_mfield_Image_appc(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Image_docker(F3, <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true -> e_type_bool(F4, <<B3/binary, 32>>)
    end.

e_msg_Volume(Msg) -> e_msg_Volume(Msg, <<>>).


e_msg_Volume(#'Volume'{mode = F1, container_path = F2,
		       host_path = F3, image = F4, source = F5},
	     Bin) ->
    B1 = 'e_enum_Volume.Mode'(F1, <<Bin/binary, 24>>),
    B2 = e_type_string(F2, <<B1/binary, 10>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 18>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Volume_image(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_mfield_Volume_source(F5, <<B4/binary, 42>>)
    end.

'e_msg_Resource.DiskInfo.Persistence'(Msg) ->
    'e_msg_Resource.DiskInfo.Persistence'(Msg, <<>>).


'e_msg_Resource.DiskInfo.Persistence'(#'Resource.DiskInfo.Persistence'{id
									   = F1,
								       principal
									   =
									   F2},
				      Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

'e_msg_Resource.DiskInfo'(Msg) ->
    'e_msg_Resource.DiskInfo'(Msg, <<>>).


'e_msg_Resource.DiskInfo'(#'Resource.DiskInfo'{persistence
						   = F1,
					       volume = F2, source = F3},
			  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_mfield_Resource.DiskInfo_persistence'(F1,
							 <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_Resource.DiskInfo_volume'(F2,
						    <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true ->
	   'e_mfield_Resource.DiskInfo_source'(F3,
					       <<B2/binary, 26>>)
    end.

'e_msg_Resource.ReservationInfo'(Msg) ->
    'e_msg_Resource.ReservationInfo'(Msg, <<>>).


'e_msg_Resource.ReservationInfo'(#'Resource.ReservationInfo'{principal
								 = F1,
							     labels = F2},
				 Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    if F2 == undefined -> B1;
       true ->
	   'e_mfield_Resource.ReservationInfo_labels'(F2,
						      <<B1/binary, 18>>)
    end.

'e_msg_Value.Set'(Msg) -> 'e_msg_Value.Set'(Msg, <<>>).


'e_msg_Value.Set'(#'Value.Set'{item = F1}, Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> 'e_field_Value.Set_item'(TrF1, Bin)
      end
    end.

'e_msg_Value.Range'(Msg) ->
    'e_msg_Value.Range'(Msg, <<>>).


'e_msg_Value.Range'(#'Value.Range'{'begin' = F1,
				   'end' = F2},
		    Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    e_varint(F2, <<B1/binary, 16>>).

'e_msg_Value.Ranges'(Msg) ->
    'e_msg_Value.Ranges'(Msg, <<>>).


'e_msg_Value.Ranges'(#'Value.Ranges'{range = F1},
		     Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> 'e_field_Value.Ranges_range'(TrF1, Bin)
      end
    end.

'e_msg_Value.Scalar'(Msg) ->
    'e_msg_Value.Scalar'(Msg, <<>>).


'e_msg_Value.Scalar'(#'Value.Scalar'{value = F1},
		     Bin) ->
    e_type_double(F1, <<Bin/binary, 9>>).

e_msg_Resource(Msg) -> e_msg_Resource(Msg, <<>>).


e_msg_Resource(#'Resource'{name = F1, type = F2,
			   scalar = F3, ranges = F4, set = F5, role = F6,
			   reservation = F7, disk = F8, revocable = F9},
	       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_Value.Type'(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Resource_scalar(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Resource_ranges(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_mfield_Resource_set(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		e_mfield_Resource_reservation(F7, <<B6/binary, 66>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_mfield_Resource_disk(F8, <<B7/binary, 58>>)
	 end,
    if F9 == undefined -> B8;
       true ->
	   e_mfield_Resource_revocable(F9, <<B8/binary, 74>>)
    end.

'e_msg_Offer.Operation.Destroy'(Msg) ->
    'e_msg_Offer.Operation.Destroy'(Msg, <<>>).


'e_msg_Offer.Operation.Destroy'(#'Offer.Operation.Destroy'{volumes
							       = F1},
				Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Offer.Operation.Destroy_volumes'(TrF1, Bin)
      end
    end.

'e_msg_Offer.Operation.Create'(Msg) ->
    'e_msg_Offer.Operation.Create'(Msg, <<>>).


'e_msg_Offer.Operation.Create'(#'Offer.Operation.Create'{volumes
							     = F1},
			       Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Offer.Operation.Create_volumes'(TrF1, Bin)
      end
    end.

'e_msg_Offer.Operation.Unreserve'(Msg) ->
    'e_msg_Offer.Operation.Unreserve'(Msg, <<>>).


'e_msg_Offer.Operation.Unreserve'(#'Offer.Operation.Unreserve'{resources
								   = F1},
				  Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Offer.Operation.Unreserve_resources'(TrF1, Bin)
      end
    end.

'e_msg_Offer.Operation.Reserve'(Msg) ->
    'e_msg_Offer.Operation.Reserve'(Msg, <<>>).


'e_msg_Offer.Operation.Reserve'(#'Offer.Operation.Reserve'{resources
							       = F1},
				Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Offer.Operation.Reserve_resources'(TrF1, Bin)
      end
    end.

e_msg_Port(Msg) -> e_msg_Port(Msg, <<>>).


e_msg_Port(#'Port'{number = F1, name = F2,
		   protocol = F3, visibility = F4, labels = F5},
	   Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_enum_DiscoveryInfo.Visibility'(F4, <<B3/binary, 32>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_mfield_Port_labels(F5, <<B4/binary, 42>>)
    end.

e_msg_Ports(Msg) -> e_msg_Ports(Msg, <<>>).


e_msg_Ports(#'Ports'{ports = F1}, Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_Ports_ports(TrF1, Bin)
      end
    end.

e_msg_DiscoveryInfo(Msg) ->
    e_msg_DiscoveryInfo(Msg, <<>>).


e_msg_DiscoveryInfo(#'DiscoveryInfo'{visibility = F1,
				     name = F2, environment = F3, location = F4,
				     version = F5, ports = F6, labels = F7},
		    Bin) ->
    B1 = 'e_enum_DiscoveryInfo.Visibility'(F1,
					   <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		e_mfield_DiscoveryInfo_ports(F6, <<B5/binary, 50>>)
	 end,
    if F7 == undefined -> B6;
       true ->
	   e_mfield_DiscoveryInfo_labels(F7, <<B6/binary, 58>>)
    end.

e_msg_KillPolicy(Msg) -> e_msg_KillPolicy(Msg, <<>>).


e_msg_KillPolicy(#'KillPolicy'{grace_period = F1},
		 Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   e_mfield_KillPolicy_grace_period(F1, <<Bin/binary, 10>>)
    end.

'e_msg_HealthCheck.HTTP'(Msg) ->
    'e_msg_HealthCheck.HTTP'(Msg, <<>>).


'e_msg_HealthCheck.HTTP'(#'HealthCheck.HTTP'{port = F1,
					     path = F2, statuses = F3},
			 Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    begin
      TrF3 = id(F3),
      if TrF3 == [] -> B2;
	 true -> 'e_field_HealthCheck.HTTP_statuses'(TrF3, B2)
      end
    end.

e_msg_HealthCheck(Msg) -> e_msg_HealthCheck(Msg, <<>>).


e_msg_HealthCheck(#'HealthCheck'{http = F1,
				 delay_seconds = F2, interval_seconds = F3,
				 timeout_seconds = F4,
				 consecutive_failures = F5,
				 grace_period_seconds = F6, command = F7},
		  Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_HealthCheck_http(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_double(F2, <<B1/binary, 17>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_double(F3, <<B2/binary, 25>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 33>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_double(F6, <<B5/binary, 49>>)
	 end,
    if F7 == undefined -> B6;
       true ->
	   e_mfield_HealthCheck_command(F7, <<B6/binary, 58>>)
    end.

'e_msg_NetworkInfo.IPAddress'(Msg) ->
    'e_msg_NetworkInfo.IPAddress'(Msg, <<>>).


'e_msg_NetworkInfo.IPAddress'(#'NetworkInfo.IPAddress'{protocol
							   = F1,
						       ip_address = F2},
			      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		'e_enum_NetworkInfo.Protocol'(F1, <<Bin/binary, 8>>)
	 end,
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

e_msg_NetworkInfo(Msg) -> e_msg_NetworkInfo(Msg, <<>>).


e_msg_NetworkInfo(#'NetworkInfo'{ip_addresses = F1,
				 name = F2, groups = F3, labels = F4},
		  Bin) ->
    B1 = begin
	   TrF1 = id(F1),
	   if TrF1 == [] -> Bin;
	      true -> e_field_NetworkInfo_ip_addresses(TrF1, Bin)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 50>>)
	 end,
    B3 = begin
	   TrF3 = id(F3),
	   if TrF3 == [] -> B2;
	      true -> e_field_NetworkInfo_groups(TrF3, B2)
	   end
	 end,
    if F4 == undefined -> B3;
       true ->
	   e_mfield_NetworkInfo_labels(F4, <<B3/binary, 34>>)
    end.

'e_msg_ContainerInfo.MesosInfo'(Msg) ->
    'e_msg_ContainerInfo.MesosInfo'(Msg, <<>>).


'e_msg_ContainerInfo.MesosInfo'(#'ContainerInfo.MesosInfo'{image
							       = F1},
				Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   'e_mfield_ContainerInfo.MesosInfo_image'(F1,
						    <<Bin/binary, 10>>)
    end.

e_msg_ContainerInfo(Msg) ->
    e_msg_ContainerInfo(Msg, <<>>).


e_msg_ContainerInfo(#'ContainerInfo'{type = F1,
				     volumes = F2, hostname = F3, docker = F4,
				     mesos = F5, network_infos = F6},
		    Bin) ->
    B1 = 'e_enum_ContainerInfo.Type'(F1, <<Bin/binary, 8>>),
    B2 = begin
	   TrF2 = id(F2),
	   if TrF2 == [] -> B1;
	      true -> e_field_ContainerInfo_volumes(TrF2, B1)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 34>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		e_mfield_ContainerInfo_docker(F4, <<B3/binary, 26>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		e_mfield_ContainerInfo_mesos(F5, <<B4/binary, 42>>)
	 end,
    begin
      TrF6 = id(F6),
      if TrF6 == [] -> B5;
	 true -> e_field_ContainerInfo_network_infos(TrF6, B5)
      end
    end.

e_msg_FrameworkID(Msg) -> e_msg_FrameworkID(Msg, <<>>).


e_msg_FrameworkID(#'FrameworkID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_ExecutorID(Msg) -> e_msg_ExecutorID(Msg, <<>>).


e_msg_ExecutorID(#'ExecutorID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_ExecutorInfo(Msg) ->
    e_msg_ExecutorInfo(Msg, <<>>).


e_msg_ExecutorInfo(#'ExecutorInfo'{executor_id = F1,
				   framework_id = F2, command = F3,
				   container = F4, resources = F5, name = F6,
				   source = F7, data = F8, discovery = F9,
				   shutdown_grace_period = F10, labels = F11},
		   Bin) ->
    B1 = e_mfield_ExecutorInfo_executor_id(F1,
					   <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_ExecutorInfo_framework_id(F2,
						   <<B1/binary, 66>>)
	 end,
    B3 = e_mfield_ExecutorInfo_command(F3,
				       <<B2/binary, 58>>),
    B4 = if F4 == undefined -> B3;
	    true ->
		e_mfield_ExecutorInfo_container(F4, <<B3/binary, 90>>)
	 end,
    B5 = begin
	   TrF5 = id(F5),
	   if TrF5 == [] -> B4;
	      true -> e_field_ExecutorInfo_resources(TrF5, B4)
	   end
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 74>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 82>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_bytes(F8, <<B7/binary, 34>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		e_mfield_ExecutorInfo_discovery(F9, <<B8/binary, 98>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 e_mfield_ExecutorInfo_shutdown_grace_period(F10,
							     <<B9/binary, 106>>)
	  end,
    if F11 == undefined -> B10;
       true ->
	   e_mfield_ExecutorInfo_labels(F11, <<B10/binary, 114>>)
    end.

e_msg_AgentID(Msg) -> e_msg_AgentID(Msg, <<>>).


e_msg_AgentID(#'AgentID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_TaskID(Msg) -> e_msg_TaskID(Msg, <<>>).


e_msg_TaskID(#'TaskID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_TaskInfo(Msg) -> e_msg_TaskInfo(Msg, <<>>).


e_msg_TaskInfo(#'TaskInfo'{name = F1, task_id = F2,
			   agent_id = F3, resources = F4, executor = F5,
			   command = F6, container = F7, health_check = F8,
			   kill_policy = F9, data = F10, labels = F11,
			   discovery = F12},
	       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_TaskInfo_task_id(F2, <<B1/binary, 18>>),
    B3 = e_mfield_TaskInfo_agent_id(F3, <<B2/binary, 26>>),
    B4 = begin
	   TrF4 = id(F4),
	   if TrF4 == [] -> B3;
	      true -> e_field_TaskInfo_resources(TrF4, B3)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		e_mfield_TaskInfo_executor(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_mfield_TaskInfo_command(F6, <<B5/binary, 58>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		e_mfield_TaskInfo_container(F7, <<B6/binary, 74>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		e_mfield_TaskInfo_health_check(F8, <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		e_mfield_TaskInfo_kill_policy(F9, <<B8/binary, 98>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_bytes(F10, <<B9/binary, 50>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 e_mfield_TaskInfo_labels(F11, <<B10/binary, 82>>)
	  end,
    if F12 == undefined -> B11;
       true ->
	   e_mfield_TaskInfo_discovery(F12, <<B11/binary, 90>>)
    end.

'e_msg_Offer.Operation.Launch'(Msg) ->
    'e_msg_Offer.Operation.Launch'(Msg, <<>>).


'e_msg_Offer.Operation.Launch'(#'Offer.Operation.Launch'{task_infos
							     = F1},
			       Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Offer.Operation.Launch_task_infos'(TrF1, Bin)
      end
    end.

'e_msg_Offer.Operation'(Msg) ->
    'e_msg_Offer.Operation'(Msg, <<>>).


'e_msg_Offer.Operation'(#'Offer.Operation'{type = F1,
					   launch = F2, reserve = F3,
					   unreserve = F4, create = F5,
					   destroy = F6},
			Bin) ->
    B1 = 'e_enum_Offer.Operation.Type'(F1,
				       <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true ->
		'e_mfield_Offer.Operation_launch'(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_Offer.Operation_reserve'(F3,
						   <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_mfield_Offer.Operation_unreserve'(F4,
						     <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_Offer.Operation_create'(F5, <<B4/binary, 42>>)
	 end,
    if F6 == undefined -> B5;
       true ->
	   'e_mfield_Offer.Operation_destroy'(F6,
					      <<B5/binary, 50>>)
    end.

e_msg_Flag(Msg) -> e_msg_Flag(Msg, <<>>).


e_msg_Flag(#'Flag'{name = F1, value = F2}, Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_string(F2, <<B1/binary, 18>>)
    end.

'e_msg_Value.Text'(Msg) ->
    'e_msg_Value.Text'(Msg, <<>>).


'e_msg_Value.Text'(#'Value.Text'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_Value(Msg) -> e_msg_Value(Msg, <<>>).


e_msg_Value(#'Value'{type = F1, scalar = F2,
		     ranges = F3, set = F4, text = F5},
	    Bin) ->
    B1 = 'e_enum_Value.Type'(F1, <<Bin/binary, 8>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_mfield_Value_scalar(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Value_ranges(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Value_set(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_mfield_Value_text(F5, <<B4/binary, 42>>)
    end.

e_msg_Request(Msg) -> e_msg_Request(Msg, <<>>).


e_msg_Request(#'Request'{agent_id = F1, resources = F2},
	      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_Request_agent_id(F1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2),
      if TrF2 == [] -> B1;
	 true -> e_field_Request_resources(TrF2, B1)
      end
    end.

e_msg_ContainerID(Msg) -> e_msg_ContainerID(Msg, <<>>).


e_msg_ContainerID(#'ContainerID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_Metric(Msg) -> e_msg_Metric(Msg, <<>>).


e_msg_Metric(#'Metric'{name = F1, value = F2}, Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    if F2 == undefined -> B1;
       true -> e_type_double(F2, <<B1/binary, 17>>)
    end.

'e_msg_Response.GetFileContents'(Msg) ->
    'e_msg_Response.GetFileContents'(Msg, <<>>).


'e_msg_Response.GetFileContents'(#'Response.GetFileContents'{data
								 = F1},
				 Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Response.GetFileContents_data'(TrF1, Bin)
      end
    end.

'e_msg_CgroupInfo.NetCls'(Msg) ->
    'e_msg_CgroupInfo.NetCls'(Msg, <<>>).


'e_msg_CgroupInfo.NetCls'(#'CgroupInfo.NetCls'{classid =
						   F1},
			  Bin) ->
    if F1 == undefined -> Bin;
       true -> e_varint(F1, <<Bin/binary, 8>>)
    end.

'e_msg_Call.GetMetrics'(Msg) ->
    'e_msg_Call.GetMetrics'(Msg, <<>>).


'e_msg_Call.GetMetrics'(#'Call.GetMetrics'{timeout =
					       F1},
			Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   'e_mfield_Call.GetMetrics_timeout'(F1,
					      <<Bin/binary, 10>>)
    end.

e_msg_UdpStatistics(Msg) ->
    e_msg_UdpStatistics(Msg, <<>>).


e_msg_UdpStatistics(#'UdpStatistics'{'InDatagrams' = F1,
				     'NoPorts' = F2, 'InErrors' = F3,
				     'OutDatagrams' = F4, 'RcvbufErrors' = F5,
				     'SndbufErrors' = F6, 'InCsumErrors' = F7,
				     'IgnoredMulti' = F8},
		    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int64(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int64(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int64(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_int64(F7, <<B6/binary, 56>>)
	 end,
    if F8 == undefined -> B7;
       true -> e_type_int64(F8, <<B7/binary, 64>>)
    end.

e_msg_TcpStatistics(Msg) ->
    e_msg_TcpStatistics(Msg, <<>>).


e_msg_TcpStatistics(#'TcpStatistics'{'RtoAlgorithm' =
					 F1,
				     'RtoMin' = F2, 'RtoMax' = F3,
				     'MaxConn' = F4, 'ActiveOpens' = F5,
				     'PassiveOpens' = F6, 'AttemptFails' = F7,
				     'EstabResets' = F8, 'CurrEstab' = F9,
				     'InSegs' = F10, 'OutSegs' = F11,
				     'RetransSegs' = F12, 'InErrs' = F13,
				     'OutRsts' = F14, 'InCsumErrors' = F15},
		    Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int64(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int64(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int64(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_int64(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_int64(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_int64(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_int64(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_int64(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_int64(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_int64(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_int64(F14, <<B13/binary, 112>>)
	  end,
    if F15 == undefined -> B14;
       true -> e_type_int64(F15, <<B14/binary, 120>>)
    end.

e_msg_IpStatistics(Msg) ->
    e_msg_IpStatistics(Msg, <<>>).


e_msg_IpStatistics(#'IpStatistics'{'Forwarding' = F1,
				   'DefaultTTL' = F2, 'InReceives' = F3,
				   'InHdrErrors' = F4, 'InAddrErrors' = F5,
				   'ForwDatagrams' = F6, 'InUnknownProtos' = F7,
				   'InDiscards' = F8, 'InDelivers' = F9,
				   'OutRequests' = F10, 'OutDiscards' = F11,
				   'OutNoRoutes' = F12, 'ReasmTimeout' = F13,
				   'ReasmReqds' = F14, 'ReasmOKs' = F15,
				   'ReasmFails' = F16, 'FragOKs' = F17,
				   'FragFails' = F18, 'FragCreates' = F19},
		   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int64(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int64(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int64(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_int64(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_int64(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_int64(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_int64(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_int64(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_int64(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_int64(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_int64(F14, <<B13/binary, 112>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_type_int64(F15, <<B14/binary, 120>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_type_int64(F16, <<B15/binary, 128, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_type_int64(F17, <<B16/binary, 136, 1>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_type_int64(F18, <<B17/binary, 144, 1>>)
	  end,
    if F19 == undefined -> B18;
       true -> e_type_int64(F19, <<B18/binary, 152, 1>>)
    end.

'e_msg_Response.GetMetrics'(Msg) ->
    'e_msg_Response.GetMetrics'(Msg, <<>>).


'e_msg_Response.GetMetrics'(#'Response.GetMetrics'{metrics
						       = F1},
			    Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> 'e_field_Response.GetMetrics_metrics'(TrF1, Bin)
      end
    end.

e_msg_VersionInfo(Msg) -> e_msg_VersionInfo(Msg, <<>>).


e_msg_VersionInfo(#'VersionInfo'{version = F1,
				 build_date = F2, build_time = F3,
				 build_user = F4, git_sha = F5, git_branch = F6,
				 git_tag = F7},
		  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_double(F3, <<B2/binary, 25>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_string(F7, <<B6/binary, 58>>)
    end.

e_msg_Address(Msg) -> e_msg_Address(Msg, <<>>).


e_msg_Address(#'Address'{hostname = F1, ip = F2,
			 port = F3},
	      Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_string(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    e_type_int32(F3, <<B2/binary, 24>>).

e_msg_MasterInfo(Msg) -> e_msg_MasterInfo(Msg, <<>>).


e_msg_MasterInfo(#'MasterInfo'{id = F1, ip = F2,
			       port = F3, pid = F4, hostname = F5, version = F6,
			       address = F7},
		 Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_varint(F2, <<B1/binary, 16>>),
    B3 = e_varint(F3, <<B2/binary, 24>>),
    B4 = if F4 == undefined -> B3;
	    true -> e_type_string(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_string(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    if F7 == undefined -> B6;
       true ->
	   e_mfield_MasterInfo_address(F7, <<B6/binary, 58>>)
    end.

'e_msg_FrameworkInfo.Capability'(Msg) ->
    'e_msg_FrameworkInfo.Capability'(Msg, <<>>).


'e_msg_FrameworkInfo.Capability'(#'FrameworkInfo.Capability'{type
								 = F1},
				 Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   'e_enum_FrameworkInfo.Capability.Type'(F1,
						  <<Bin/binary, 8>>)
    end.

e_msg_FrameworkInfo(Msg) ->
    e_msg_FrameworkInfo(Msg, <<>>).


e_msg_FrameworkInfo(#'FrameworkInfo'{user = F1,
				     name = F2, id = F3, failover_timeout = F4,
				     checkpoint = F5, role = F6, hostname = F7,
				     principal = F8, webui_url = F9,
				     capabilities = F10, labels = F11},
		    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_FrameworkInfo_id(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 33>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_bool(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_string(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_string(F8, <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_string(F9, <<B8/binary, 74>>)
	 end,
    B10 = begin
	    TrF10 = id(F10),
	    if TrF10 == [] -> B9;
	       true -> e_field_FrameworkInfo_capabilities(TrF10, B9)
	    end
	  end,
    if F11 == undefined -> B10;
       true ->
	   e_mfield_FrameworkInfo_labels(F11, <<B10/binary, 90>>)
    end.

e_msg_URL(Msg) -> e_msg_URL(Msg, <<>>).


e_msg_URL(#'URL'{scheme = F1, address = F2, path = F3,
		 query = F4, fragment = F5},
	  Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_URL_address(F2, <<B1/binary, 18>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 26>>)
	 end,
    B4 = begin
	   TrF4 = id(F4),
	   if TrF4 == [] -> B3;
	      true -> e_field_URL_query(TrF4, B3)
	   end
	 end,
    if F5 == undefined -> B4;
       true -> e_type_string(F5, <<B4/binary, 42>>)
    end.

'e_msg_Call.ReadFile'(Msg) ->
    'e_msg_Call.ReadFile'(Msg, <<>>).


'e_msg_Call.ReadFile'(#'Call.ReadFile'{path = F1,
				       offset = F2, length = F3},
		      Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_string(F2, <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_type_string(F3, <<B2/binary, 26>>)
    end.

'e_msg_Call.ListFiles'(Msg) ->
    'e_msg_Call.ListFiles'(Msg, <<>>).


'e_msg_Call.ListFiles'(#'Call.ListFiles'{path = F1},
		       Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

'e_msg_Call.SetLoggingLevel'(Msg) ->
    'e_msg_Call.SetLoggingLevel'(Msg, <<>>).


'e_msg_Call.SetLoggingLevel'(#'Call.SetLoggingLevel'{level
							 = F1,
						     duration = F2},
			     Bin) ->
    B1 = e_varint(F1, <<Bin/binary, 8>>),
    'e_mfield_Call.SetLoggingLevel_duration'(F2,
					     <<B1/binary, 18>>).

e_msg_Call(Msg) -> e_msg_Call(Msg, <<>>).


e_msg_Call(#'Call'{type = F1, get_metrics = F2,
		   set_logging_level = F3, list_files = F4,
		   read_file = F5},
	   Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> 'e_enum_Call.Type'(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_mfield_Call_get_metrics(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_Call_set_logging_level(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Call_list_files(F4, <<B3/binary, 34>>)
	 end,
    if F5 == undefined -> B4;
       true -> e_mfield_Call_read_file(F5, <<B4/binary, 42>>)
    end.

'e_msg_ResourceUsage.Executor.Task'(Msg) ->
    'e_msg_ResourceUsage.Executor.Task'(Msg, <<>>).


'e_msg_ResourceUsage.Executor.Task'(#'ResourceUsage.Executor.Task'{name
								       = F1,
								   id = F2,
								   resources =
								       F3,
								   labels = F4},
				    Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_mfield_ResourceUsage.Executor.Task_id'(F2,
						   <<B1/binary, 18>>),
    B3 = begin
	   TrF3 = id(F3),
	   if TrF3 == [] -> B2;
	      true ->
		  'e_field_ResourceUsage.Executor.Task_resources'(TrF3,
								  B2)
	   end
	 end,
    if F4 == undefined -> B3;
       true ->
	   'e_mfield_ResourceUsage.Executor.Task_labels'(F4,
							 <<B3/binary, 34>>)
    end.

e_msg_Role(Msg) -> e_msg_Role(Msg, <<>>).


e_msg_Role(#'Role'{name = F1, weight = F2,
		   frameworks = F3, resources = F4},
	   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_type_double(F2, <<B1/binary, 17>>),
    B3 = begin
	   TrF3 = id(F3),
	   if TrF3 == [] -> B2;
	      true -> e_field_Role_frameworks(TrF3, B2)
	   end
	 end,
    begin
      TrF4 = id(F4),
      if TrF4 == [] -> B3;
	 true -> e_field_Role_resources(TrF4, B3)
      end
    end.

e_msg_IcmpStatistics(Msg) ->
    e_msg_IcmpStatistics(Msg, <<>>).


e_msg_IcmpStatistics(#'IcmpStatistics'{'InMsgs' = F1,
				       'InErrors' = F2, 'InCsumErrors' = F3,
				       'InDestUnreachs' = F4,
				       'InTimeExcds' = F5, 'InParmProbs' = F6,
				       'InSrcQuenchs' = F7, 'InRedirects' = F8,
				       'InEchos' = F9, 'InEchoReps' = F10,
				       'InTimestamps' = F11,
				       'InTimestampReps' = F12,
				       'InAddrMasks' = F13,
				       'InAddrMaskReps' = F14, 'OutMsgs' = F15,
				       'OutErrors' = F16,
				       'OutDestUnreachs' = F17,
				       'OutTimeExcds' = F18,
				       'OutParmProbs' = F19,
				       'OutSrcQuenchs' = F20,
				       'OutRedirects' = F21, 'OutEchos' = F22,
				       'OutEchoReps' = F23,
				       'OutTimestamps' = F24,
				       'OutTimestampReps' = F25,
				       'OutAddrMasks' = F26,
				       'OutAddrMaskReps' = F27},
		     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_int64(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int64(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_type_int64(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_int64(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_int64(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_int64(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_type_int64(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_type_int64(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_int64(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_int64(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_int64(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_type_int64(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_int64(F13, <<B12/binary, 104>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_int64(F14, <<B13/binary, 112>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_type_int64(F15, <<B14/binary, 120>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_type_int64(F16, <<B15/binary, 128, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_type_int64(F17, <<B16/binary, 136, 1>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_type_int64(F18, <<B17/binary, 144, 1>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_type_int64(F19, <<B18/binary, 152, 1>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_type_int64(F20, <<B19/binary, 160, 1>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_type_int64(F21, <<B20/binary, 168, 1>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_type_int64(F22, <<B21/binary, 176, 1>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_type_int64(F23, <<B22/binary, 184, 1>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true -> e_type_int64(F24, <<B23/binary, 192, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true -> e_type_int64(F25, <<B24/binary, 200, 1>>)
	  end,
    B26 = if F26 == undefined -> B25;
	     true -> e_type_int64(F26, <<B25/binary, 208, 1>>)
	  end,
    if F27 == undefined -> B26;
       true -> e_type_int64(F27, <<B26/binary, 216, 1>>)
    end.

e_msg_SNMPStatistics(Msg) ->
    e_msg_SNMPStatistics(Msg, <<>>).


e_msg_SNMPStatistics(#'SNMPStatistics'{ip_stats = F1,
				       icmp_stats = F2, tcp_stats = F3,
				       udp_stats = F4},
		     Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		e_mfield_SNMPStatistics_ip_stats(F1, <<Bin/binary, 10>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_SNMPStatistics_icmp_stats(F2,
						   <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_SNMPStatistics_tcp_stats(F3, <<B2/binary, 26>>)
	 end,
    if F4 == undefined -> B3;
       true ->
	   e_mfield_SNMPStatistics_udp_stats(F4, <<B3/binary, 34>>)
    end.

e_msg_TrafficControlStatistics(Msg) ->
    e_msg_TrafficControlStatistics(Msg, <<>>).


e_msg_TrafficControlStatistics(#'TrafficControlStatistics'{id
							       = F1,
							   backlog = F2,
							   bytes = F3,
							   drops = F4,
							   overlimits = F5,
							   packets = F6,
							   qlen = F7,
							   ratebps = F8,
							   ratepps = F9,
							   requeues = F10},
			       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_varint(F9, <<B8/binary, 72>>)
	 end,
    if F10 == undefined -> B9;
       true -> e_varint(F10, <<B9/binary, 80>>)
    end.

e_msg_PerfStatistics(Msg) ->
    e_msg_PerfStatistics(Msg, <<>>).


e_msg_PerfStatistics(#'PerfStatistics'{timestamp = F1,
				       duration = F2, cycles = F3,
				       stalled_cycles_frontend = F4,
				       stalled_cycles_backend = F5,
				       instructions = F6, cache_references = F7,
				       cache_misses = F8, branches = F9,
				       branch_misses = F10, bus_cycles = F11,
				       ref_cycles = F12, cpu_clock = F13,
				       task_clock = F14, page_faults = F15,
				       minor_faults = F16, major_faults = F17,
				       context_switches = F18,
				       cpu_migrations = F19,
				       alignment_faults = F20,
				       emulation_faults = F21,
				       l1_dcache_loads = F22,
				       l1_dcache_load_misses = F23,
				       l1_dcache_stores = F24,
				       l1_dcache_store_misses = F25,
				       l1_dcache_prefetches = F26,
				       l1_dcache_prefetch_misses = F27,
				       l1_icache_loads = F28,
				       l1_icache_load_misses = F29,
				       l1_icache_prefetches = F30,
				       l1_icache_prefetch_misses = F31,
				       llc_loads = F32, llc_load_misses = F33,
				       llc_stores = F34, llc_store_misses = F35,
				       llc_prefetches = F36,
				       llc_prefetch_misses = F37,
				       dtlb_loads = F38, dtlb_load_misses = F39,
				       dtlb_stores = F40,
				       dtlb_store_misses = F41,
				       dtlb_prefetches = F42,
				       dtlb_prefetch_misses = F43,
				       itlb_loads = F44, itlb_load_misses = F45,
				       branch_loads = F46,
				       branch_load_misses = F47,
				       node_loads = F48, node_load_misses = F49,
				       node_stores = F50,
				       node_store_misses = F51,
				       node_prefetches = F52,
				       node_prefetch_misses = F53},
		     Bin) ->
    B1 = e_type_double(F1, <<Bin/binary, 9>>),
    B2 = e_type_double(F2, <<B1/binary, 17>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_varint(F4, <<B3/binary, 32>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_varint(F6, <<B5/binary, 48>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_varint(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 80>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 88>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_varint(F12, <<B11/binary, 96>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_type_double(F13, <<B12/binary, 105>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_type_double(F14, <<B13/binary, 113>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 120>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_varint(F16, <<B15/binary, 128, 1>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_varint(F17, <<B16/binary, 136, 1>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_varint(F18, <<B17/binary, 144, 1>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_varint(F19, <<B18/binary, 152, 1>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_varint(F20, <<B19/binary, 160, 1>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_varint(F21, <<B20/binary, 168, 1>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_varint(F22, <<B21/binary, 176, 1>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_varint(F23, <<B22/binary, 184, 1>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true -> e_varint(F24, <<B23/binary, 192, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true -> e_varint(F25, <<B24/binary, 200, 1>>)
	  end,
    B26 = if F26 == undefined -> B25;
	     true -> e_varint(F26, <<B25/binary, 208, 1>>)
	  end,
    B27 = if F27 == undefined -> B26;
	     true -> e_varint(F27, <<B26/binary, 216, 1>>)
	  end,
    B28 = if F28 == undefined -> B27;
	     true -> e_varint(F28, <<B27/binary, 224, 1>>)
	  end,
    B29 = if F29 == undefined -> B28;
	     true -> e_varint(F29, <<B28/binary, 232, 1>>)
	  end,
    B30 = if F30 == undefined -> B29;
	     true -> e_varint(F30, <<B29/binary, 240, 1>>)
	  end,
    B31 = if F31 == undefined -> B30;
	     true -> e_varint(F31, <<B30/binary, 248, 1>>)
	  end,
    B32 = if F32 == undefined -> B31;
	     true -> e_varint(F32, <<B31/binary, 128, 2>>)
	  end,
    B33 = if F33 == undefined -> B32;
	     true -> e_varint(F33, <<B32/binary, 136, 2>>)
	  end,
    B34 = if F34 == undefined -> B33;
	     true -> e_varint(F34, <<B33/binary, 144, 2>>)
	  end,
    B35 = if F35 == undefined -> B34;
	     true -> e_varint(F35, <<B34/binary, 152, 2>>)
	  end,
    B36 = if F36 == undefined -> B35;
	     true -> e_varint(F36, <<B35/binary, 160, 2>>)
	  end,
    B37 = if F37 == undefined -> B36;
	     true -> e_varint(F37, <<B36/binary, 168, 2>>)
	  end,
    B38 = if F38 == undefined -> B37;
	     true -> e_varint(F38, <<B37/binary, 176, 2>>)
	  end,
    B39 = if F39 == undefined -> B38;
	     true -> e_varint(F39, <<B38/binary, 184, 2>>)
	  end,
    B40 = if F40 == undefined -> B39;
	     true -> e_varint(F40, <<B39/binary, 192, 2>>)
	  end,
    B41 = if F41 == undefined -> B40;
	     true -> e_varint(F41, <<B40/binary, 200, 2>>)
	  end,
    B42 = if F42 == undefined -> B41;
	     true -> e_varint(F42, <<B41/binary, 208, 2>>)
	  end,
    B43 = if F43 == undefined -> B42;
	     true -> e_varint(F43, <<B42/binary, 216, 2>>)
	  end,
    B44 = if F44 == undefined -> B43;
	     true -> e_varint(F44, <<B43/binary, 224, 2>>)
	  end,
    B45 = if F45 == undefined -> B44;
	     true -> e_varint(F45, <<B44/binary, 232, 2>>)
	  end,
    B46 = if F46 == undefined -> B45;
	     true -> e_varint(F46, <<B45/binary, 240, 2>>)
	  end,
    B47 = if F47 == undefined -> B46;
	     true -> e_varint(F47, <<B46/binary, 248, 2>>)
	  end,
    B48 = if F48 == undefined -> B47;
	     true -> e_varint(F48, <<B47/binary, 128, 3>>)
	  end,
    B49 = if F49 == undefined -> B48;
	     true -> e_varint(F49, <<B48/binary, 136, 3>>)
	  end,
    B50 = if F50 == undefined -> B49;
	     true -> e_varint(F50, <<B49/binary, 144, 3>>)
	  end,
    B51 = if F51 == undefined -> B50;
	     true -> e_varint(F51, <<B50/binary, 152, 3>>)
	  end,
    B52 = if F52 == undefined -> B51;
	     true -> e_varint(F52, <<B51/binary, 160, 3>>)
	  end,
    if F53 == undefined -> B52;
       true -> e_varint(F53, <<B52/binary, 168, 3>>)
    end.

e_msg_ResourceStatistics(Msg) ->
    e_msg_ResourceStatistics(Msg, <<>>).


e_msg_ResourceStatistics(#'ResourceStatistics'{timestamp
						   = F1,
					       processes = F2, threads = F3,
					       cpus_user_time_secs = F4,
					       cpus_system_time_secs = F5,
					       cpus_limit = F6,
					       cpus_nr_periods = F7,
					       cpus_nr_throttled = F8,
					       cpus_throttled_time_secs = F9,
					       mem_total_bytes = F10,
					       mem_total_memsw_bytes = F11,
					       mem_limit_bytes = F12,
					       mem_soft_limit_bytes = F13,
					       mem_file_bytes = F14,
					       mem_anon_bytes = F15,
					       mem_cache_bytes = F16,
					       mem_rss_bytes = F17,
					       mem_mapped_file_bytes = F18,
					       mem_swap_bytes = F19,
					       mem_unevictable_bytes = F20,
					       mem_low_pressure_counter = F21,
					       mem_medium_pressure_counter =
						   F22,
					       mem_critical_pressure_counter =
						   F23,
					       disk_limit_bytes = F24,
					       disk_used_bytes = F25,
					       perf = F26, net_rx_packets = F27,
					       net_rx_bytes = F28,
					       net_rx_errors = F29,
					       net_rx_dropped = F30,
					       net_tx_packets = F31,
					       net_tx_bytes = F32,
					       net_tx_errors = F33,
					       net_tx_dropped = F34,
					       net_tcp_rtt_microsecs_p50 = F35,
					       net_tcp_rtt_microsecs_p90 = F36,
					       net_tcp_rtt_microsecs_p95 = F37,
					       net_tcp_rtt_microsecs_p99 = F38,
					       net_tcp_active_connections = F39,
					       net_tcp_time_wait_connections =
						   F40,
					       net_traffic_control_statistics =
						   F41,
					       net_snmp_statistics = F42},
			 Bin) ->
    B1 = e_type_double(F1, <<Bin/binary, 9>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_varint(F2, <<B1/binary, 240, 1>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 248, 1>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_type_double(F4, <<B3/binary, 17>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_type_double(F5, <<B4/binary, 25>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_double(F6, <<B5/binary, 33>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true -> e_varint(F7, <<B6/binary, 56>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true -> e_varint(F8, <<B7/binary, 64>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_double(F9, <<B8/binary, 73>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_varint(F10, <<B9/binary, 160, 2>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_varint(F11, <<B10/binary, 168, 2>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_varint(F12, <<B11/binary, 48>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true -> e_varint(F13, <<B12/binary, 176, 2>>)
	  end,
    B14 = if F14 == undefined -> B13;
	     true -> e_varint(F14, <<B13/binary, 80>>)
	  end,
    B15 = if F15 == undefined -> B14;
	     true -> e_varint(F15, <<B14/binary, 88>>)
	  end,
    B16 = if F16 == undefined -> B15;
	     true -> e_varint(F16, <<B15/binary, 184, 2>>)
	  end,
    B17 = if F17 == undefined -> B16;
	     true -> e_varint(F17, <<B16/binary, 40>>)
	  end,
    B18 = if F18 == undefined -> B17;
	     true -> e_varint(F18, <<B17/binary, 96>>)
	  end,
    B19 = if F19 == undefined -> B18;
	     true -> e_varint(F19, <<B18/binary, 192, 2>>)
	  end,
    B20 = if F20 == undefined -> B19;
	     true -> e_varint(F20, <<B19/binary, 200, 2>>)
	  end,
    B21 = if F21 == undefined -> B20;
	     true -> e_varint(F21, <<B20/binary, 128, 2>>)
	  end,
    B22 = if F22 == undefined -> B21;
	     true -> e_varint(F22, <<B21/binary, 136, 2>>)
	  end,
    B23 = if F23 == undefined -> B22;
	     true -> e_varint(F23, <<B22/binary, 144, 2>>)
	  end,
    B24 = if F24 == undefined -> B23;
	     true -> e_varint(F24, <<B23/binary, 208, 1>>)
	  end,
    B25 = if F25 == undefined -> B24;
	     true -> e_varint(F25, <<B24/binary, 216, 1>>)
	  end,
    B26 = if F26 == undefined -> B25;
	     true ->
		 e_mfield_ResourceStatistics_perf(F26,
						  <<B25/binary, 106>>)
	  end,
    B27 = if F27 == undefined -> B26;
	     true -> e_varint(F27, <<B26/binary, 112>>)
	  end,
    B28 = if F28 == undefined -> B27;
	     true -> e_varint(F28, <<B27/binary, 120>>)
	  end,
    B29 = if F29 == undefined -> B28;
	     true -> e_varint(F29, <<B28/binary, 128, 1>>)
	  end,
    B30 = if F30 == undefined -> B29;
	     true -> e_varint(F30, <<B29/binary, 136, 1>>)
	  end,
    B31 = if F31 == undefined -> B30;
	     true -> e_varint(F31, <<B30/binary, 144, 1>>)
	  end,
    B32 = if F32 == undefined -> B31;
	     true -> e_varint(F32, <<B31/binary, 152, 1>>)
	  end,
    B33 = if F33 == undefined -> B32;
	     true -> e_varint(F33, <<B32/binary, 160, 1>>)
	  end,
    B34 = if F34 == undefined -> B33;
	     true -> e_varint(F34, <<B33/binary, 168, 1>>)
	  end,
    B35 = if F35 == undefined -> B34;
	     true -> e_type_double(F35, <<B34/binary, 177, 1>>)
	  end,
    B36 = if F36 == undefined -> B35;
	     true -> e_type_double(F36, <<B35/binary, 185, 1>>)
	  end,
    B37 = if F37 == undefined -> B36;
	     true -> e_type_double(F37, <<B36/binary, 193, 1>>)
	  end,
    B38 = if F38 == undefined -> B37;
	     true -> e_type_double(F38, <<B37/binary, 201, 1>>)
	  end,
    B39 = if F39 == undefined -> B38;
	     true -> e_type_double(F39, <<B38/binary, 225, 1>>)
	  end,
    B40 = if F40 == undefined -> B39;
	     true -> e_type_double(F40, <<B39/binary, 233, 1>>)
	  end,
    B41 = begin
	    TrF41 = id(F41),
	    if TrF41 == [] -> B40;
	       true ->
		   e_field_ResourceStatistics_net_traffic_control_statistics(TrF41,
									     B40)
	    end
	  end,
    if F42 == undefined -> B41;
       true ->
	   e_mfield_ResourceStatistics_net_snmp_statistics(F42,
							   <<B41/binary, 210,
							     2>>)
    end.

e_msg_FileInfo(Msg) -> e_msg_FileInfo(Msg, <<>>).


e_msg_FileInfo(#'FileInfo'{path = F1, nlink = F2,
			   size = F3, mtime = F4, mode = F5, uid = F6,
			   gid = F7},
	       Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 16>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true -> e_varint(F3, <<B2/binary, 24>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_FileInfo_mtime(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_varint(F5, <<B4/binary, 40>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_string(F6, <<B5/binary, 50>>)
	 end,
    if F7 == undefined -> B6;
       true -> e_type_string(F7, <<B6/binary, 58>>)
    end.

'e_msg_Response.ListFiles'(Msg) ->
    'e_msg_Response.ListFiles'(Msg, <<>>).


'e_msg_Response.ListFiles'(#'Response.ListFiles'{file_infos
						     = F1},
			   Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Response.ListFiles_file_infos'(TrF1, Bin)
      end
    end.

e_msg_CgroupInfo(Msg) -> e_msg_CgroupInfo(Msg, <<>>).


e_msg_CgroupInfo(#'CgroupInfo'{net_cls = F1}, Bin) ->
    if F1 == undefined -> Bin;
       true ->
	   e_mfield_CgroupInfo_net_cls(F1, <<Bin/binary, 10>>)
    end.

e_msg_ContainerStatus(Msg) ->
    e_msg_ContainerStatus(Msg, <<>>).


e_msg_ContainerStatus(#'ContainerStatus'{network_infos =
					     F1,
					 cgroup_info = F2, executor_pid = F3},
		      Bin) ->
    B1 = begin
	   TrF1 = id(F1),
	   if TrF1 == [] -> Bin;
	      true -> e_field_ContainerStatus_network_infos(TrF1, Bin)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_ContainerStatus_cgroup_info(F2,
						     <<B1/binary, 18>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

e_msg_TaskStatus(Msg) -> e_msg_TaskStatus(Msg, <<>>).


e_msg_TaskStatus(#'TaskStatus'{task_id = F1, state = F2,
			       message = F3, source = F4, reason = F5,
			       data = F6, agent_id = F7, executor_id = F8,
			       timestamp = F9, uuid = F10, healthy = F11,
			       labels = F12, container_status = F13},
		 Bin) ->
    B1 = e_mfield_TaskStatus_task_id(F1,
				     <<Bin/binary, 10>>),
    B2 = e_enum_TaskState(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_type_string(F3, <<B2/binary, 34>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		'e_enum_TaskStatus.Source'(F4, <<B3/binary, 72>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_enum_TaskStatus.Reason'(F5, <<B4/binary, 80>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true -> e_type_bytes(F6, <<B5/binary, 26>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		e_mfield_TaskStatus_agent_id(F7, <<B6/binary, 42>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		e_mfield_TaskStatus_executor_id(F8, <<B7/binary, 58>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_type_double(F9, <<B8/binary, 49>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_bytes(F10, <<B9/binary, 90>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_type_bool(F11, <<B10/binary, 64>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 e_mfield_TaskStatus_labels(F12, <<B11/binary, 98>>)
	  end,
    if F13 == undefined -> B12;
       true ->
	   e_mfield_TaskStatus_container_status(F13,
						<<B12/binary, 106>>)
    end.

e_msg_Attribute(Msg) -> e_msg_Attribute(Msg, <<>>).


e_msg_Attribute(#'Attribute'{name = F1, type = F2,
			     scalar = F3, ranges = F4, set = F5, text = F6},
		Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = 'e_enum_Value.Type'(F2, <<B1/binary, 16>>),
    B3 = if F3 == undefined -> B2;
	    true -> e_mfield_Attribute_scalar(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Attribute_ranges(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true -> e_mfield_Attribute_set(F5, <<B4/binary, 50>>)
	 end,
    if F6 == undefined -> B5;
       true -> e_mfield_Attribute_text(F6, <<B5/binary, 42>>)
    end.

e_msg_AgentInfo(Msg) -> e_msg_AgentInfo(Msg, <<>>).


e_msg_AgentInfo(#'AgentInfo'{hostname = F1, port = F2,
			     resources = F3, attributes = F4, id = F5},
		Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_type_int32(F2, <<B1/binary, 64>>)
	 end,
    B3 = begin
	   TrF3 = id(F3),
	   if TrF3 == [] -> B2;
	      true -> e_field_AgentInfo_resources(TrF3, B2)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4),
	   if TrF4 == [] -> B3;
	      true -> e_field_AgentInfo_attributes(TrF4, B3)
	   end
	 end,
    if F5 == undefined -> B4;
       true -> e_mfield_AgentInfo_id(F5, <<B4/binary, 50>>)
    end.

'e_msg_Response.GetLoggingLevel'(Msg) ->
    'e_msg_Response.GetLoggingLevel'(Msg, <<>>).


'e_msg_Response.GetLoggingLevel'(#'Response.GetLoggingLevel'{level
								 = F1},
				 Bin) ->
    e_varint(F1, <<Bin/binary, 8>>).

e_msg_Task(Msg) -> e_msg_Task(Msg, <<>>).


e_msg_Task(#'Task'{name = F1, task_id = F2,
		   framework_id = F3, executor_id = F4, agent_id = F5,
		   state = F6, resources = F7, statuses = F8,
		   status_update_state = F9, status_update_uuid = F10,
		   labels = F11, discovery = F12, container = F13,
		   user = F14},
	   Bin) ->
    B1 = e_type_string(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_Task_task_id(F2, <<B1/binary, 18>>),
    B3 = e_mfield_Task_framework_id(F3, <<B2/binary, 26>>),
    B4 = if F4 == undefined -> B3;
	    true -> e_mfield_Task_executor_id(F4, <<B3/binary, 34>>)
	 end,
    B5 = e_mfield_Task_agent_id(F5, <<B4/binary, 42>>),
    B6 = e_enum_TaskState(F6, <<B5/binary, 48>>),
    B7 = begin
	   TrF7 = id(F7),
	   if TrF7 == [] -> B6;
	      true -> e_field_Task_resources(TrF7, B6)
	   end
	 end,
    B8 = begin
	   TrF8 = id(F8),
	   if TrF8 == [] -> B7;
	      true -> e_field_Task_statuses(TrF8, B7)
	   end
	 end,
    B9 = if F9 == undefined -> B8;
	    true -> e_enum_TaskState(F9, <<B8/binary, 72>>)
	 end,
    B10 = if F10 == undefined -> B9;
	     true -> e_type_bytes(F10, <<B9/binary, 82>>)
	  end,
    B11 = if F11 == undefined -> B10;
	     true -> e_mfield_Task_labels(F11, <<B10/binary, 90>>)
	  end,
    B12 = if F12 == undefined -> B11;
	     true -> e_mfield_Task_discovery(F12, <<B11/binary, 98>>)
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 e_mfield_Task_container(F13, <<B12/binary, 106>>)
	  end,
    if F14 == undefined -> B13;
       true -> e_type_string(F14, <<B13/binary, 114>>)
    end.

'e_msg_Response.GetContainers.Container'(Msg) ->
    'e_msg_Response.GetContainers.Container'(Msg, <<>>).


'e_msg_Response.GetContainers.Container'(#'Response.GetContainers.Container'{framework_id
										 =
										 F1,
									     executor_id
										 =
										 F2,
									     executor_name
										 =
										 F3,
									     container_id
										 =
										 F4,
									     container_status
										 =
										 F5,
									     resource_statistics
										 =
										 F6},
					 Bin) ->
    B1 =
	'e_mfield_Response.GetContainers.Container_framework_id'(F1,
								 <<Bin/binary,
								   10>>),
    B2 =
	'e_mfield_Response.GetContainers.Container_executor_id'(F2,
								<<B1/binary,
								  18>>),
    B3 = e_type_string(F3, <<B2/binary, 26>>),
    B4 =
	'e_mfield_Response.GetContainers.Container_container_id'(F4,
								 <<B3/binary,
								   34>>),
    B5 = if F5 == undefined -> B4;
	    true ->
		'e_mfield_Response.GetContainers.Container_container_status'(F5,
									     <<B4/binary,
									       42>>)
	 end,
    if F6 == undefined -> B5;
       true ->
	   'e_mfield_Response.GetContainers.Container_resource_statistics'(F6,
									   <<B5/binary,
									     50>>)
    end.

'e_msg_Response.GetContainers'(Msg) ->
    'e_msg_Response.GetContainers'(Msg, <<>>).


'e_msg_Response.GetContainers'(#'Response.GetContainers'{containers
							     = F1},
			       Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true ->
	     'e_field_Response.GetContainers_containers'(TrF1, Bin)
      end
    end.

'e_msg_Response.GetState'(_Msg) -> <<>>.

'e_msg_Response.GetVersion'(Msg) ->
    'e_msg_Response.GetVersion'(Msg, <<>>).


'e_msg_Response.GetVersion'(#'Response.GetVersion'{version_info
						       = F1},
			    Bin) ->
    'e_mfield_Response.GetVersion_version_info'(F1,
						<<Bin/binary, 10>>).

'e_msg_Response.GetFlags'(Msg) ->
    'e_msg_Response.GetFlags'(Msg, <<>>).


'e_msg_Response.GetFlags'(#'Response.GetFlags'{flags =
						   F1},
			  Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> 'e_field_Response.GetFlags_flags'(TrF1, Bin)
      end
    end.

'e_msg_Response.GetHealth'(Msg) ->
    'e_msg_Response.GetHealth'(Msg, <<>>).


'e_msg_Response.GetHealth'(#'Response.GetHealth'{healthy
						     = F1},
			   Bin) ->
    e_type_bool(F1, <<Bin/binary, 8>>).

e_msg_Response(Msg) -> e_msg_Response(Msg, <<>>).


e_msg_Response(#'Response'{type = F1, get_health = F2,
			   get_flags = F3, get_version = F4, get_metrics = F5,
			   get_logging_level = F6, list_files = F7,
			   get_file_contents = F8, get_state = F9,
			   get_containers = F10},
	       Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> 'e_enum_Response.Type'(F1, <<Bin/binary, 8>>)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		e_mfield_Response_get_health(F2, <<B1/binary, 18>>)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		e_mfield_Response_get_flags(F3, <<B2/binary, 26>>)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		e_mfield_Response_get_version(F4, <<B3/binary, 34>>)
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		e_mfield_Response_get_metrics(F5, <<B4/binary, 42>>)
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		e_mfield_Response_get_logging_level(F6,
						    <<B5/binary, 50>>)
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		e_mfield_Response_list_files(F7, <<B6/binary, 58>>)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		e_mfield_Response_get_file_contents(F8,
						    <<B7/binary, 66>>)
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		e_mfield_Response_get_state(F9, <<B8/binary, 74>>)
	 end,
    if F10 == undefined -> B9;
       true ->
	   e_mfield_Response_get_containers(F10, <<B9/binary, 82>>)
    end.

e_msg_Filters(Msg) -> e_msg_Filters(Msg, <<>>).


e_msg_Filters(#'Filters'{refuse_seconds = F1}, Bin) ->
    if F1 == undefined -> Bin;
       true -> e_type_double(F1, <<Bin/binary, 9>>)
    end.

e_msg_Credentials(Msg) -> e_msg_Credentials(Msg, <<>>).


e_msg_Credentials(#'Credentials'{credentials = F1},
		  Bin) ->
    begin
      TrF1 = id(F1),
      if TrF1 == [] -> Bin;
	 true -> e_field_Credentials_credentials(TrF1, Bin)
      end
    end.

e_msg_RateLimit(Msg) -> e_msg_RateLimit(Msg, <<>>).


e_msg_RateLimit(#'RateLimit'{qps = F1, principal = F2,
			     capacity = F3},
		Bin) ->
    B1 = if F1 == undefined -> Bin;
	    true -> e_type_double(F1, <<Bin/binary, 9>>)
	 end,
    B2 = e_type_string(F2, <<B1/binary, 18>>),
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

e_msg_RateLimits(Msg) -> e_msg_RateLimits(Msg, <<>>).


e_msg_RateLimits(#'RateLimits'{limits = F1,
			       aggregate_default_qps = F2,
			       aggregate_default_capacity = F3},
		 Bin) ->
    B1 = begin
	   TrF1 = id(F1),
	   if TrF1 == [] -> Bin;
	      true -> e_field_RateLimits_limits(TrF1, Bin)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true -> e_type_double(F2, <<B1/binary, 17>>)
	 end,
    if F3 == undefined -> B2;
       true -> e_varint(F3, <<B2/binary, 24>>)
    end.

e_msg_OfferID(Msg) -> e_msg_OfferID(Msg, <<>>).


e_msg_OfferID(#'OfferID'{value = F1}, Bin) ->
    e_type_string(F1, <<Bin/binary, 10>>).

e_msg_InverseOffer(Msg) ->
    e_msg_InverseOffer(Msg, <<>>).


e_msg_InverseOffer(#'InverseOffer'{id = F1, url = F2,
				   framework_id = F3, agent_id = F4,
				   unavailability = F5, resources = F6},
		   Bin) ->
    B1 = e_mfield_InverseOffer_id(F1, <<Bin/binary, 10>>),
    B2 = if F2 == undefined -> B1;
	    true -> e_mfield_InverseOffer_url(F2, <<B1/binary, 18>>)
	 end,
    B3 = e_mfield_InverseOffer_framework_id(F3,
					    <<B2/binary, 26>>),
    B4 = if F4 == undefined -> B3;
	    true ->
		e_mfield_InverseOffer_agent_id(F4, <<B3/binary, 34>>)
	 end,
    B5 = e_mfield_InverseOffer_unavailability(F5,
					      <<B4/binary, 42>>),
    begin
      TrF6 = id(F6),
      if TrF6 == [] -> B5;
	 true -> e_field_InverseOffer_resources(TrF6, B5)
      end
    end.

'e_msg_ResourceUsage.Executor'(Msg) ->
    'e_msg_ResourceUsage.Executor'(Msg, <<>>).


'e_msg_ResourceUsage.Executor'(#'ResourceUsage.Executor'{executor_info
							     = F1,
							 allocated = F2,
							 statistics = F3,
							 container_id = F4,
							 tasks = F5},
			       Bin) ->
    B1 = 'e_mfield_ResourceUsage.Executor_executor_info'(F1,
							 <<Bin/binary, 10>>),
    B2 = begin
	   TrF2 = id(F2),
	   if TrF2 == [] -> B1;
	      true ->
		  'e_field_ResourceUsage.Executor_allocated'(TrF2, B1)
	   end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		'e_mfield_ResourceUsage.Executor_statistics'(F3,
							     <<B2/binary, 26>>)
	 end,
    B4 = 'e_mfield_ResourceUsage.Executor_container_id'(F4,
							<<B3/binary, 34>>),
    begin
      TrF5 = id(F5),
      if TrF5 == [] -> B4;
	 true -> 'e_field_ResourceUsage.Executor_tasks'(TrF5, B4)
      end
    end.

e_msg_ResourceUsage(Msg) ->
    e_msg_ResourceUsage(Msg, <<>>).


e_msg_ResourceUsage(#'ResourceUsage'{executors = F1,
				     total = F2},
		    Bin) ->
    B1 = begin
	   TrF1 = id(F1),
	   if TrF1 == [] -> Bin;
	      true -> e_field_ResourceUsage_executors(TrF1, Bin)
	   end
	 end,
    begin
      TrF2 = id(F2),
      if TrF2 == [] -> B1;
	 true -> e_field_ResourceUsage_total(TrF2, B1)
      end
    end.

e_msg_Offer(Msg) -> e_msg_Offer(Msg, <<>>).


e_msg_Offer(#'Offer'{id = F1, framework_id = F2,
		     agent_id = F3, hostname = F4, url = F5, resources = F6,
		     attributes = F7, executor_ids = F8,
		     unavailability = F9},
	    Bin) ->
    B1 = e_mfield_Offer_id(F1, <<Bin/binary, 10>>),
    B2 = e_mfield_Offer_framework_id(F2, <<B1/binary, 18>>),
    B3 = e_mfield_Offer_agent_id(F3, <<B2/binary, 26>>),
    B4 = e_type_string(F4, <<B3/binary, 34>>),
    B5 = if F5 == undefined -> B4;
	    true -> e_mfield_Offer_url(F5, <<B4/binary, 66>>)
	 end,
    B6 = begin
	   TrF6 = id(F6),
	   if TrF6 == [] -> B5;
	      true -> e_field_Offer_resources(TrF6, B5)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7),
	   if TrF7 == [] -> B6;
	      true -> e_field_Offer_attributes(TrF7, B6)
	   end
	 end,
    B8 = begin
	   TrF8 = id(F8),
	   if TrF8 == [] -> B7;
	      true -> e_field_Offer_executor_ids(TrF8, B7)
	   end
	 end,
    if F9 == undefined -> B8;
       true ->
	   e_mfield_Offer_unavailability(F9, <<B8/binary, 74>>)
    end.

e_mfield_Environment_variables(Msg, Bin) ->
    SubBin = 'e_msg_Environment.Variable'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Environment_variables([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Environment_variables(id(Elem), Bin2),
    e_field_Environment_variables(Rest, Bin3);
e_field_Environment_variables([], Bin) -> Bin.

e_mfield_CommandInfo_uris(Msg, Bin) ->
    SubBin = 'e_msg_CommandInfo.URI'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CommandInfo_uris([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_CommandInfo_uris(id(Elem), Bin2),
    e_field_CommandInfo_uris(Rest, Bin3);
e_field_CommandInfo_uris([], Bin) -> Bin.

e_mfield_CommandInfo_environment(Msg, Bin) ->
    SubBin = e_msg_Environment(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CommandInfo_arguments([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_type_string(id(Elem), Bin2),
    e_field_CommandInfo_arguments(Rest, Bin3);
e_field_CommandInfo_arguments([], Bin) -> Bin.

'e_mfield_ContainerInfo.DockerInfo_port_mappings'(Msg,
						  Bin) ->
    SubBin =
	'e_msg_ContainerInfo.DockerInfo.PortMapping'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ContainerInfo.DockerInfo_port_mappings'([Elem
						  | Rest],
						 Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_ContainerInfo.DockerInfo_port_mappings'(id(Elem),
							  Bin2),
    'e_field_ContainerInfo.DockerInfo_port_mappings'(Rest,
						     Bin3);
'e_field_ContainerInfo.DockerInfo_port_mappings'([],
						 Bin) ->
    Bin.

'e_mfield_ContainerInfo.DockerInfo_parameters'(Msg,
					       Bin) ->
    SubBin = e_msg_Parameter(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ContainerInfo.DockerInfo_parameters'([Elem
					       | Rest],
					      Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	'e_mfield_ContainerInfo.DockerInfo_parameters'(id(Elem),
						       Bin2),
    'e_field_ContainerInfo.DockerInfo_parameters'(Rest,
						  Bin3);
'e_field_ContainerInfo.DockerInfo_parameters'([],
					      Bin) ->
    Bin.

e_mfield_Unavailability_start(Msg, Bin) ->
    SubBin = e_msg_TimeInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Unavailability_duration(Msg, Bin) ->
    SubBin = e_msg_DurationInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MachineInfo_id(Msg, Bin) ->
    SubBin = e_msg_MachineID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MachineInfo_unavailability(Msg, Bin) ->
    SubBin = e_msg_Unavailability(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Resource.DiskInfo.Source_path'(Msg, Bin) ->
    SubBin = 'e_msg_Resource.DiskInfo.Source.Path'(Msg,
						   <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Resource.DiskInfo.Source_mount'(Msg, Bin) ->
    SubBin = 'e_msg_Resource.DiskInfo.Source.Mount'(Msg,
						    <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Parameters_parameter(Msg, Bin) ->
    SubBin = e_msg_Parameter(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Parameters_parameter([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Parameters_parameter(id(Elem), Bin2),
    e_field_Parameters_parameter(Rest, Bin3);
e_field_Parameters_parameter([], Bin) -> Bin.

'e_mfield_Volume.Source.DockerVolume_driver_options'(Msg,
						     Bin) ->
    SubBin = e_msg_Parameters(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Volume.Source_docker_volume'(Msg, Bin) ->
    SubBin = 'e_msg_Volume.Source.DockerVolume'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Image.Docker_credential'(Msg, Bin) ->
    SubBin = e_msg_Credential(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Labels_labels(Msg, Bin) ->
    SubBin = e_msg_Label(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Labels_labels([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Labels_labels(id(Elem), Bin2),
    e_field_Labels_labels(Rest, Bin3);
e_field_Labels_labels([], Bin) -> Bin.

'e_mfield_Image.Appc_labels'(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Image_appc(Msg, Bin) ->
    SubBin = 'e_msg_Image.Appc'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Image_docker(Msg, Bin) ->
    SubBin = 'e_msg_Image.Docker'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Volume_image(Msg, Bin) ->
    SubBin = e_msg_Image(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Volume_source(Msg, Bin) ->
    SubBin = 'e_msg_Volume.Source'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Resource.DiskInfo_persistence'(Msg, Bin) ->
    SubBin = 'e_msg_Resource.DiskInfo.Persistence'(Msg,
						   <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Resource.DiskInfo_volume'(Msg, Bin) ->
    SubBin = e_msg_Volume(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Resource.DiskInfo_source'(Msg, Bin) ->
    SubBin = 'e_msg_Resource.DiskInfo.Source'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Resource.ReservationInfo_labels'(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Value.Set_item'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem), Bin2),
    'e_field_Value.Set_item'(Rest, Bin3);
'e_field_Value.Set_item'([], Bin) -> Bin.

'e_mfield_Value.Ranges_range'(Msg, Bin) ->
    SubBin = 'e_msg_Value.Range'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Value.Ranges_range'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_Value.Ranges_range'(id(Elem), Bin2),
    'e_field_Value.Ranges_range'(Rest, Bin3);
'e_field_Value.Ranges_range'([], Bin) -> Bin.

e_mfield_Resource_scalar(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_Value.Scalar'(Msg, Bin2).

e_mfield_Resource_ranges(Msg, Bin) ->
    SubBin = 'e_msg_Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Resource_set(Msg, Bin) ->
    SubBin = 'e_msg_Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Resource_reservation(Msg, Bin) ->
    SubBin = 'e_msg_Resource.ReservationInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Resource_disk(Msg, Bin) ->
    SubBin = 'e_msg_Resource.DiskInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Resource_revocable(_Msg, Bin) ->
    <<Bin/binary, 0>>.

'e_mfield_Offer.Operation.Destroy_volumes'(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Offer.Operation.Destroy_volumes'([Elem | Rest],
					  Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Offer.Operation.Destroy_volumes'(id(Elem),
						   Bin2),
    'e_field_Offer.Operation.Destroy_volumes'(Rest, Bin3);
'e_field_Offer.Operation.Destroy_volumes'([], Bin) ->
    Bin.

'e_mfield_Offer.Operation.Create_volumes'(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Offer.Operation.Create_volumes'([Elem | Rest],
					 Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Offer.Operation.Create_volumes'(id(Elem),
						  Bin2),
    'e_field_Offer.Operation.Create_volumes'(Rest, Bin3);
'e_field_Offer.Operation.Create_volumes'([], Bin) ->
    Bin.

'e_mfield_Offer.Operation.Unreserve_resources'(Msg,
					       Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Offer.Operation.Unreserve_resources'([Elem
					       | Rest],
					      Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Offer.Operation.Unreserve_resources'(id(Elem),
						       Bin2),
    'e_field_Offer.Operation.Unreserve_resources'(Rest,
						  Bin3);
'e_field_Offer.Operation.Unreserve_resources'([],
					      Bin) ->
    Bin.

'e_mfield_Offer.Operation.Reserve_resources'(Msg,
					     Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Offer.Operation.Reserve_resources'([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Offer.Operation.Reserve_resources'(id(Elem),
						     Bin2),
    'e_field_Offer.Operation.Reserve_resources'(Rest, Bin3);
'e_field_Offer.Operation.Reserve_resources'([], Bin) ->
    Bin.

e_mfield_Port_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Ports_ports(Msg, Bin) ->
    SubBin = e_msg_Port(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Ports_ports([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Ports_ports(id(Elem), Bin2),
    e_field_Ports_ports(Rest, Bin3);
e_field_Ports_ports([], Bin) -> Bin.

e_mfield_DiscoveryInfo_ports(Msg, Bin) ->
    SubBin = e_msg_Ports(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DiscoveryInfo_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_KillPolicy_grace_period(Msg, Bin) ->
    SubBin = e_msg_DurationInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_HealthCheck.HTTP_statuses'([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_varint(id(Elem), Bin2),
    'e_field_HealthCheck.HTTP_statuses'(Rest, Bin3);
'e_field_HealthCheck.HTTP_statuses'([], Bin) -> Bin.

e_mfield_HealthCheck_http(Msg, Bin) ->
    SubBin = 'e_msg_HealthCheck.HTTP'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_HealthCheck_command(Msg, Bin) ->
    SubBin = e_msg_CommandInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_NetworkInfo_ip_addresses(Msg, Bin) ->
    SubBin = 'e_msg_NetworkInfo.IPAddress'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_NetworkInfo_ip_addresses([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_NetworkInfo_ip_addresses(id(Elem),
					     Bin2),
    e_field_NetworkInfo_ip_addresses(Rest, Bin3);
e_field_NetworkInfo_ip_addresses([], Bin) -> Bin.

e_field_NetworkInfo_groups([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem), Bin2),
    e_field_NetworkInfo_groups(Rest, Bin3);
e_field_NetworkInfo_groups([], Bin) -> Bin.

e_mfield_NetworkInfo_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ContainerInfo.MesosInfo_image'(Msg, Bin) ->
    SubBin = e_msg_Image(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ContainerInfo_volumes(Msg, Bin) ->
    SubBin = e_msg_Volume(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ContainerInfo_volumes([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ContainerInfo_volumes(id(Elem), Bin2),
    e_field_ContainerInfo_volumes(Rest, Bin3);
e_field_ContainerInfo_volumes([], Bin) -> Bin.

e_mfield_ContainerInfo_docker(Msg, Bin) ->
    SubBin = 'e_msg_ContainerInfo.DockerInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ContainerInfo_mesos(Msg, Bin) ->
    SubBin = 'e_msg_ContainerInfo.MesosInfo'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ContainerInfo_network_infos(Msg, Bin) ->
    SubBin = e_msg_NetworkInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ContainerInfo_network_infos([Elem | Rest],
				    Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_ContainerInfo_network_infos(id(Elem),
						Bin2),
    e_field_ContainerInfo_network_infos(Rest, Bin3);
e_field_ContainerInfo_network_infos([], Bin) -> Bin.

e_mfield_ExecutorInfo_executor_id(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_command(Msg, Bin) ->
    SubBin = e_msg_CommandInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_container(Msg, Bin) ->
    SubBin = e_msg_ContainerInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ExecutorInfo_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_ExecutorInfo_resources(id(Elem), Bin2),
    e_field_ExecutorInfo_resources(Rest, Bin3);
e_field_ExecutorInfo_resources([], Bin) -> Bin.

e_mfield_ExecutorInfo_discovery(Msg, Bin) ->
    SubBin = e_msg_DiscoveryInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_shutdown_grace_period(Msg, Bin) ->
    SubBin = e_msg_DurationInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ExecutorInfo_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_task_id(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_agent_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_TaskInfo_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_TaskInfo_resources(id(Elem), Bin2),
    e_field_TaskInfo_resources(Rest, Bin3);
e_field_TaskInfo_resources([], Bin) -> Bin.

e_mfield_TaskInfo_executor(Msg, Bin) ->
    SubBin = e_msg_ExecutorInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_command(Msg, Bin) ->
    SubBin = e_msg_CommandInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_container(Msg, Bin) ->
    SubBin = e_msg_ContainerInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_health_check(Msg, Bin) ->
    SubBin = e_msg_HealthCheck(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_kill_policy(Msg, Bin) ->
    SubBin = e_msg_KillPolicy(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskInfo_discovery(Msg, Bin) ->
    SubBin = e_msg_DiscoveryInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Offer.Operation.Launch_task_infos'(Msg,
					     Bin) ->
    SubBin = e_msg_TaskInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Offer.Operation.Launch_task_infos'([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Offer.Operation.Launch_task_infos'(id(Elem),
						     Bin2),
    'e_field_Offer.Operation.Launch_task_infos'(Rest, Bin3);
'e_field_Offer.Operation.Launch_task_infos'([], Bin) ->
    Bin.

'e_mfield_Offer.Operation_launch'(Msg, Bin) ->
    SubBin = 'e_msg_Offer.Operation.Launch'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Offer.Operation_reserve'(Msg, Bin) ->
    SubBin = 'e_msg_Offer.Operation.Reserve'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Offer.Operation_unreserve'(Msg, Bin) ->
    SubBin = 'e_msg_Offer.Operation.Unreserve'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Offer.Operation_create'(Msg, Bin) ->
    SubBin = 'e_msg_Offer.Operation.Create'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Offer.Operation_destroy'(Msg, Bin) ->
    SubBin = 'e_msg_Offer.Operation.Destroy'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Value_scalar(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_Value.Scalar'(Msg, Bin2).

e_mfield_Value_ranges(Msg, Bin) ->
    SubBin = 'e_msg_Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Value_set(Msg, Bin) ->
    SubBin = 'e_msg_Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Value_text(Msg, Bin) ->
    SubBin = 'e_msg_Value.Text'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_agent_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Request_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_Request_resources(id(Elem), Bin2),
    e_field_Request_resources(Rest, Bin3);
e_field_Request_resources([], Bin) -> Bin.

'e_field_Response.GetFileContents_data'([Elem | Rest],
					Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_bytes(id(Elem), Bin2),
    'e_field_Response.GetFileContents_data'(Rest, Bin3);
'e_field_Response.GetFileContents_data'([], Bin) -> Bin.

'e_mfield_Call.GetMetrics_timeout'(Msg, Bin) ->
    SubBin = e_msg_DurationInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetMetrics_metrics'(Msg, Bin) ->
    SubBin = e_msg_Metric(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Response.GetMetrics_metrics'([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_Response.GetMetrics_metrics'(id(Elem),
						  Bin2),
    'e_field_Response.GetMetrics_metrics'(Rest, Bin3);
'e_field_Response.GetMetrics_metrics'([], Bin) -> Bin.

e_mfield_MasterInfo_address(Msg, Bin) ->
    SubBin = e_msg_Address(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FrameworkInfo_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FrameworkInfo_capabilities(Msg, Bin) ->
    SubBin = 'e_msg_FrameworkInfo.Capability'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FrameworkInfo_capabilities([Elem | Rest],
				   Bin) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 = e_mfield_FrameworkInfo_capabilities(id(Elem),
					       Bin2),
    e_field_FrameworkInfo_capabilities(Rest, Bin3);
e_field_FrameworkInfo_capabilities([], Bin) -> Bin.

e_mfield_FrameworkInfo_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_URL_address(Msg, Bin) ->
    SubBin = e_msg_Address(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_URL_query(Msg, Bin) ->
    SubBin = e_msg_Parameter(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_URL_query([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_URL_query(id(Elem), Bin2),
    e_field_URL_query(Rest, Bin3);
e_field_URL_query([], Bin) -> Bin.

'e_mfield_Call.SetLoggingLevel_duration'(Msg, Bin) ->
    SubBin = e_msg_DurationInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Call_get_metrics(Msg, Bin) ->
    SubBin = 'e_msg_Call.GetMetrics'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Call_set_logging_level(Msg, Bin) ->
    SubBin = 'e_msg_Call.SetLoggingLevel'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Call_list_files(Msg, Bin) ->
    SubBin = 'e_msg_Call.ListFiles'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Call_read_file(Msg, Bin) ->
    SubBin = 'e_msg_Call.ReadFile'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ResourceUsage.Executor.Task_id'(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ResourceUsage.Executor.Task_resources'(Msg,
						 Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ResourceUsage.Executor.Task_resources'([Elem
						 | Rest],
						Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	'e_mfield_ResourceUsage.Executor.Task_resources'(id(Elem),
							 Bin2),
    'e_field_ResourceUsage.Executor.Task_resources'(Rest,
						    Bin3);
'e_field_ResourceUsage.Executor.Task_resources'([],
						Bin) ->
    Bin.

'e_mfield_ResourceUsage.Executor.Task_labels'(Msg,
					      Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Role_frameworks(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Role_frameworks([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_Role_frameworks(id(Elem), Bin2),
    e_field_Role_frameworks(Rest, Bin3);
e_field_Role_frameworks([], Bin) -> Bin.

e_mfield_Role_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Role_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_Role_resources(id(Elem), Bin2),
    e_field_Role_resources(Rest, Bin3);
e_field_Role_resources([], Bin) -> Bin.

e_mfield_SNMPStatistics_ip_stats(Msg, Bin) ->
    SubBin = e_msg_IpStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_SNMPStatistics_icmp_stats(Msg, Bin) ->
    SubBin = e_msg_IcmpStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_SNMPStatistics_tcp_stats(Msg, Bin) ->
    SubBin = e_msg_TcpStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_SNMPStatistics_udp_stats(Msg, Bin) ->
    SubBin = e_msg_UdpStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResourceStatistics_perf(Msg, Bin) ->
    SubBin = e_msg_PerfStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ResourceStatistics_net_traffic_control_statistics(Msg,
							   Bin) ->
    SubBin = e_msg_TrafficControlStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ResourceStatistics_net_traffic_control_statistics([Elem
							   | Rest],
							  Bin) ->
    Bin2 = <<Bin/binary, 154, 2>>,
    Bin3 =
	e_mfield_ResourceStatistics_net_traffic_control_statistics(id(Elem),
								   Bin2),
    e_field_ResourceStatistics_net_traffic_control_statistics(Rest,
							      Bin3);
e_field_ResourceStatistics_net_traffic_control_statistics([],
							  Bin) ->
    Bin.

e_mfield_ResourceStatistics_net_snmp_statistics(Msg,
						Bin) ->
    SubBin = e_msg_SNMPStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_FileInfo_mtime(Msg, Bin) ->
    SubBin = e_msg_TimeInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.ListFiles_file_infos'(Msg, Bin) ->
    SubBin = e_msg_FileInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Response.ListFiles_file_infos'([Elem | Rest],
					Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Response.ListFiles_file_infos'(id(Elem),
						 Bin2),
    'e_field_Response.ListFiles_file_infos'(Rest, Bin3);
'e_field_Response.ListFiles_file_infos'([], Bin) -> Bin.

e_mfield_CgroupInfo_net_cls(Msg, Bin) ->
    SubBin = 'e_msg_CgroupInfo.NetCls'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ContainerStatus_network_infos(Msg, Bin) ->
    SubBin = e_msg_NetworkInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ContainerStatus_network_infos([Elem | Rest],
				      Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ContainerStatus_network_infos(id(Elem),
						  Bin2),
    e_field_ContainerStatus_network_infos(Rest, Bin3);
e_field_ContainerStatus_network_infos([], Bin) -> Bin.

e_mfield_ContainerStatus_cgroup_info(Msg, Bin) ->
    SubBin = e_msg_CgroupInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_task_id(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_agent_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_executor_id(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_TaskStatus_container_status(Msg, Bin) ->
    SubBin = e_msg_ContainerStatus(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Attribute_scalar(Msg, Bin) ->
    Bin2 = <<Bin/binary, 9>>,
    'e_msg_Value.Scalar'(Msg, Bin2).

e_mfield_Attribute_ranges(Msg, Bin) ->
    SubBin = 'e_msg_Value.Ranges'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Attribute_set(Msg, Bin) ->
    SubBin = 'e_msg_Value.Set'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Attribute_text(Msg, Bin) ->
    SubBin = 'e_msg_Value.Text'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AgentInfo_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AgentInfo_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_AgentInfo_resources(id(Elem), Bin2),
    e_field_AgentInfo_resources(Rest, Bin3);
e_field_AgentInfo_resources([], Bin) -> Bin.

e_mfield_AgentInfo_attributes(Msg, Bin) ->
    SubBin = e_msg_Attribute(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AgentInfo_attributes([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_AgentInfo_attributes(id(Elem), Bin2),
    e_field_AgentInfo_attributes(Rest, Bin3);
e_field_AgentInfo_attributes([], Bin) -> Bin.

e_mfield_AgentInfo_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_task_id(Msg, Bin) ->
    SubBin = e_msg_TaskID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_executor_id(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_agent_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Task_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_Task_resources(id(Elem), Bin2),
    e_field_Task_resources(Rest, Bin3);
e_field_Task_resources([], Bin) -> Bin.

e_mfield_Task_statuses(Msg, Bin) ->
    SubBin = e_msg_TaskStatus(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Task_statuses([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_mfield_Task_statuses(id(Elem), Bin2),
    e_field_Task_statuses(Rest, Bin3);
e_field_Task_statuses([], Bin) -> Bin.

e_mfield_Task_labels(Msg, Bin) ->
    SubBin = e_msg_Labels(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_discovery(Msg, Bin) ->
    SubBin = e_msg_DiscoveryInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Task_container(Msg, Bin) ->
    SubBin = e_msg_ContainerInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetContainers.Container_framework_id'(Msg,
							 Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetContainers.Container_executor_id'(Msg,
							Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetContainers.Container_container_id'(Msg,
							 Bin) ->
    SubBin = e_msg_ContainerID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetContainers.Container_container_status'(Msg,
							     Bin) ->
    SubBin = e_msg_ContainerStatus(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetContainers.Container_resource_statistics'(Msg,
								Bin) ->
    SubBin = e_msg_ResourceStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetContainers_containers'(Msg,
					     Bin) ->
    SubBin = 'e_msg_Response.GetContainers.Container'(Msg,
						      <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Response.GetContainers_containers'([Elem
					     | Rest],
					    Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	'e_mfield_Response.GetContainers_containers'(id(Elem),
						     Bin2),
    'e_field_Response.GetContainers_containers'(Rest, Bin3);
'e_field_Response.GetContainers_containers'([], Bin) ->
    Bin.

'e_mfield_Response.GetVersion_version_info'(Msg, Bin) ->
    SubBin = e_msg_VersionInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_Response.GetFlags_flags'(Msg, Bin) ->
    SubBin = e_msg_Flag(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_Response.GetFlags_flags'([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_Response.GetFlags_flags'(id(Elem),
					      Bin2),
    'e_field_Response.GetFlags_flags'(Rest, Bin3);
'e_field_Response.GetFlags_flags'([], Bin) -> Bin.

e_mfield_Response_get_health(Msg, Bin) ->
    Bin2 = <<Bin/binary, 2>>,
    'e_msg_Response.GetHealth'(Msg, Bin2).

e_mfield_Response_get_flags(Msg, Bin) ->
    SubBin = 'e_msg_Response.GetFlags'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_version(Msg, Bin) ->
    SubBin = 'e_msg_Response.GetVersion'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_metrics(Msg, Bin) ->
    SubBin = 'e_msg_Response.GetMetrics'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_logging_level(Msg, Bin) ->
    SubBin = 'e_msg_Response.GetLoggingLevel'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_list_files(Msg, Bin) ->
    SubBin = 'e_msg_Response.ListFiles'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_file_contents(Msg, Bin) ->
    SubBin = 'e_msg_Response.GetFileContents'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_state(_Msg, Bin) ->
    <<Bin/binary, 0>>.

e_mfield_Response_get_containers(Msg, Bin) ->
    SubBin = 'e_msg_Response.GetContainers'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Credentials_credentials(Msg, Bin) ->
    SubBin = e_msg_Credential(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Credentials_credentials([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_Credentials_credentials(id(Elem), Bin2),
    e_field_Credentials_credentials(Rest, Bin3);
e_field_Credentials_credentials([], Bin) -> Bin.

e_mfield_RateLimits_limits(Msg, Bin) ->
    SubBin = e_msg_RateLimit(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RateLimits_limits([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_RateLimits_limits(id(Elem), Bin2),
    e_field_RateLimits_limits(Rest, Bin3);
e_field_RateLimits_limits([], Bin) -> Bin.

e_mfield_InverseOffer_id(Msg, Bin) ->
    SubBin = e_msg_OfferID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_InverseOffer_url(Msg, Bin) ->
    SubBin = e_msg_URL(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_InverseOffer_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_InverseOffer_agent_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_InverseOffer_unavailability(Msg, Bin) ->
    SubBin = e_msg_Unavailability(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_InverseOffer_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_InverseOffer_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_InverseOffer_resources(id(Elem), Bin2),
    e_field_InverseOffer_resources(Rest, Bin3);
e_field_InverseOffer_resources([], Bin) -> Bin.

'e_mfield_ResourceUsage.Executor_executor_info'(Msg,
						Bin) ->
    SubBin = e_msg_ExecutorInfo(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ResourceUsage.Executor_allocated'(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ResourceUsage.Executor_allocated'([Elem
					    | Rest],
					   Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	'e_mfield_ResourceUsage.Executor_allocated'(id(Elem),
						    Bin2),
    'e_field_ResourceUsage.Executor_allocated'(Rest, Bin3);
'e_field_ResourceUsage.Executor_allocated'([], Bin) ->
    Bin.

'e_mfield_ResourceUsage.Executor_statistics'(Msg,
					     Bin) ->
    SubBin = e_msg_ResourceStatistics(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ResourceUsage.Executor_container_id'(Msg,
					       Bin) ->
    SubBin = e_msg_ContainerID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ResourceUsage.Executor_tasks'(Msg, Bin) ->
    SubBin = 'e_msg_ResourceUsage.Executor.Task'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ResourceUsage.Executor_tasks'([Elem | Rest],
				       Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = 'e_mfield_ResourceUsage.Executor_tasks'(id(Elem),
						   Bin2),
    'e_field_ResourceUsage.Executor_tasks'(Rest, Bin3);
'e_field_ResourceUsage.Executor_tasks'([], Bin) -> Bin.

e_mfield_ResourceUsage_executors(Msg, Bin) ->
    SubBin = 'e_msg_ResourceUsage.Executor'(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ResourceUsage_executors([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_ResourceUsage_executors(id(Elem), Bin2),
    e_field_ResourceUsage_executors(Rest, Bin3);
e_field_ResourceUsage_executors([], Bin) -> Bin.

e_mfield_ResourceUsage_total(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ResourceUsage_total([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_ResourceUsage_total(id(Elem), Bin2),
    e_field_ResourceUsage_total(Rest, Bin3);
e_field_ResourceUsage_total([], Bin) -> Bin.

e_mfield_Offer_id(Msg, Bin) ->
    SubBin = e_msg_OfferID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_framework_id(Msg, Bin) ->
    SubBin = e_msg_FrameworkID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_agent_id(Msg, Bin) ->
    SubBin = e_msg_AgentID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_url(Msg, Bin) ->
    SubBin = e_msg_URL(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Offer_resources(Msg, Bin) ->
    SubBin = e_msg_Resource(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Offer_resources([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_Offer_resources(id(Elem), Bin2),
    e_field_Offer_resources(Rest, Bin3);
e_field_Offer_resources([], Bin) -> Bin.

e_mfield_Offer_attributes(Msg, Bin) ->
    SubBin = e_msg_Attribute(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Offer_attributes([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_mfield_Offer_attributes(id(Elem), Bin2),
    e_field_Offer_attributes(Rest, Bin3);
e_field_Offer_attributes([], Bin) -> Bin.

e_mfield_Offer_executor_ids(Msg, Bin) ->
    SubBin = e_msg_ExecutorID(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_Offer_executor_ids([Elem | Rest], Bin) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_Offer_executor_ids(id(Elem), Bin2),
    e_field_Offer_executor_ids(Rest, Bin3);
e_field_Offer_executor_ids([], Bin) -> Bin.

e_mfield_Offer_unavailability(Msg, Bin) ->
    SubBin = e_msg_Unavailability(Msg, <<>>),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.



'e_enum_Call.Type'('UNKNOWN', Bin) -> <<Bin/binary, 0>>;
'e_enum_Call.Type'('GET_HEALTH', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Call.Type'('GET_FLAGS', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Call.Type'('GET_VERSION', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Call.Type'('GET_METRICS', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Call.Type'('GET_LOGGING_LEVEL', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_Call.Type'('SET_LOGGING_LEVEL', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_Call.Type'('LIST_FILES', Bin) ->
    <<Bin/binary, 7>>;
'e_enum_Call.Type'('READ_FILE', Bin) ->
    <<Bin/binary, 8>>;
'e_enum_Call.Type'('GET_STATE', Bin) ->
    <<Bin/binary, 9>>;
'e_enum_Call.Type'('GET_CONTAINERS', Bin) ->
    <<Bin/binary, 10>>.

'e_enum_Response.Type'('UNKNOWN', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_Response.Type'('GET_HEALTH', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Response.Type'('GET_FLAGS', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Response.Type'('GET_VERSION', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Response.Type'('GET_METRICS', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Response.Type'('GET_LOGGING_LEVEL', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_Response.Type'('LIST_FILES', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_Response.Type'('READ_FILE', Bin) ->
    <<Bin/binary, 7>>;
'e_enum_Response.Type'('GET_STATE', Bin) ->
    <<Bin/binary, 8>>;
'e_enum_Response.Type'('GET_CONTAINERS', Bin) ->
    <<Bin/binary, 9>>.

'e_enum_MachineInfo.Mode'('UP', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_MachineInfo.Mode'('DRAINING', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_MachineInfo.Mode'('DOWN', Bin) ->
    <<Bin/binary, 3>>.

'e_enum_FrameworkInfo.Capability.Type'('UNKNOWN',
				       Bin) ->
    <<Bin/binary, 0>>;
'e_enum_FrameworkInfo.Capability.Type'('REVOCABLE_RESOURCES',
				       Bin) ->
    <<Bin/binary, 1>>;
'e_enum_FrameworkInfo.Capability.Type'('TASK_KILLING_STATE',
				       Bin) ->
    <<Bin/binary, 2>>;
'e_enum_FrameworkInfo.Capability.Type'('GPU_RESOURCES',
				       Bin) ->
    <<Bin/binary, 3>>.

'e_enum_Value.Type'('SCALAR', Bin) -> <<Bin/binary, 0>>;
'e_enum_Value.Type'('RANGES', Bin) -> <<Bin/binary, 1>>;
'e_enum_Value.Type'('SET', Bin) -> <<Bin/binary, 2>>;
'e_enum_Value.Type'('TEXT', Bin) -> <<Bin/binary, 3>>.

'e_enum_Resource.DiskInfo.Source.Type'('PATH', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Resource.DiskInfo.Source.Type'('MOUNT', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_Offer.Operation.Type'('LAUNCH', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_Offer.Operation.Type'('RESERVE', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_Offer.Operation.Type'('UNRESERVE', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_Offer.Operation.Type'('CREATE', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_Offer.Operation.Type'('DESTROY', Bin) ->
    <<Bin/binary, 5>>.

e_enum_TaskState('TASK_STAGING', Bin) ->
    <<Bin/binary, 6>>;
e_enum_TaskState('TASK_STARTING', Bin) ->
    <<Bin/binary, 0>>;
e_enum_TaskState('TASK_RUNNING', Bin) ->
    <<Bin/binary, 1>>;
e_enum_TaskState('TASK_KILLING', Bin) ->
    <<Bin/binary, 8>>;
e_enum_TaskState('TASK_FINISHED', Bin) ->
    <<Bin/binary, 2>>;
e_enum_TaskState('TASK_FAILED', Bin) ->
    <<Bin/binary, 3>>;
e_enum_TaskState('TASK_KILLED', Bin) ->
    <<Bin/binary, 4>>;
e_enum_TaskState('TASK_LOST', Bin) -> <<Bin/binary, 5>>;
e_enum_TaskState('TASK_ERROR', Bin) ->
    <<Bin/binary, 7>>.

'e_enum_TaskStatus.Source'('SOURCE_MASTER', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_TaskStatus.Source'('SOURCE_AGENT', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_TaskStatus.Source'('SOURCE_EXECUTOR', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_TaskStatus.Reason'('REASON_COMMAND_EXECUTOR_FAILED',
			   Bin) ->
    <<Bin/binary, 0>>;
'e_enum_TaskStatus.Reason'('REASON_CONTAINER_LAUNCH_FAILED',
			   Bin) ->
    <<Bin/binary, 21>>;
'e_enum_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION',
			   Bin) ->
    <<Bin/binary, 19>>;
'e_enum_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION_DISK',
			   Bin) ->
    <<Bin/binary, 20>>;
'e_enum_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION_MEMORY',
			   Bin) ->
    <<Bin/binary, 8>>;
'e_enum_TaskStatus.Reason'('REASON_CONTAINER_PREEMPTED',
			   Bin) ->
    <<Bin/binary, 17>>;
'e_enum_TaskStatus.Reason'('REASON_CONTAINER_UPDATE_FAILED',
			   Bin) ->
    <<Bin/binary, 22>>;
'e_enum_TaskStatus.Reason'('REASON_EXECUTOR_REGISTRATION_TIMEOUT',
			   Bin) ->
    <<Bin/binary, 23>>;
'e_enum_TaskStatus.Reason'('REASON_EXECUTOR_REREGISTRATION_TIMEOUT',
			   Bin) ->
    <<Bin/binary, 24>>;
'e_enum_TaskStatus.Reason'('REASON_EXECUTOR_TERMINATED',
			   Bin) ->
    <<Bin/binary, 1>>;
'e_enum_TaskStatus.Reason'('REASON_EXECUTOR_UNREGISTERED',
			   Bin) ->
    <<Bin/binary, 2>>;
'e_enum_TaskStatus.Reason'('REASON_FRAMEWORK_REMOVED',
			   Bin) ->
    <<Bin/binary, 3>>;
'e_enum_TaskStatus.Reason'('REASON_GC_ERROR', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_TaskStatus.Reason'('REASON_INVALID_FRAMEWORKID',
			   Bin) ->
    <<Bin/binary, 5>>;
'e_enum_TaskStatus.Reason'('REASON_INVALID_OFFERS',
			   Bin) ->
    <<Bin/binary, 6>>;
'e_enum_TaskStatus.Reason'('REASON_MASTER_DISCONNECTED',
			   Bin) ->
    <<Bin/binary, 7>>;
'e_enum_TaskStatus.Reason'('REASON_RECONCILIATION',
			   Bin) ->
    <<Bin/binary, 9>>;
'e_enum_TaskStatus.Reason'('REASON_RESOURCES_UNKNOWN',
			   Bin) ->
    <<Bin/binary, 18>>;
'e_enum_TaskStatus.Reason'('REASON_AGENT_DISCONNECTED',
			   Bin) ->
    <<Bin/binary, 10>>;
'e_enum_TaskStatus.Reason'('REASON_AGENT_REMOVED',
			   Bin) ->
    <<Bin/binary, 11>>;
'e_enum_TaskStatus.Reason'('REASON_AGENT_RESTARTED',
			   Bin) ->
    <<Bin/binary, 12>>;
'e_enum_TaskStatus.Reason'('REASON_AGENT_UNKNOWN',
			   Bin) ->
    <<Bin/binary, 13>>;
'e_enum_TaskStatus.Reason'('REASON_TASK_INVALID',
			   Bin) ->
    <<Bin/binary, 14>>;
'e_enum_TaskStatus.Reason'('REASON_TASK_UNAUTHORIZED',
			   Bin) ->
    <<Bin/binary, 15>>;
'e_enum_TaskStatus.Reason'('REASON_TASK_UNKNOWN',
			   Bin) ->
    <<Bin/binary, 16>>.

'e_enum_Image.Type'('APPC', Bin) -> <<Bin/binary, 1>>;
'e_enum_Image.Type'('DOCKER', Bin) -> <<Bin/binary, 2>>.

'e_enum_Volume.Mode'('RW', Bin) -> <<Bin/binary, 1>>;
'e_enum_Volume.Mode'('RO', Bin) -> <<Bin/binary, 2>>.

'e_enum_Volume.Source.Type'('UNKNOWN', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_Volume.Source.Type'('DOCKER_VOLUME', Bin) ->
    <<Bin/binary, 1>>.

'e_enum_NetworkInfo.Protocol'('IPv4', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_NetworkInfo.Protocol'('IPv6', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_ContainerInfo.Type'('DOCKER', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_ContainerInfo.Type'('MESOS', Bin) ->
    <<Bin/binary, 2>>.

'e_enum_ContainerInfo.DockerInfo.Network'('HOST',
					  Bin) ->
    <<Bin/binary, 1>>;
'e_enum_ContainerInfo.DockerInfo.Network'('BRIDGE',
					  Bin) ->
    <<Bin/binary, 2>>;
'e_enum_ContainerInfo.DockerInfo.Network'('NONE',
					  Bin) ->
    <<Bin/binary, 3>>;
'e_enum_ContainerInfo.DockerInfo.Network'('USER',
					  Bin) ->
    <<Bin/binary, 4>>.

'e_enum_DiscoveryInfo.Visibility'('FRAMEWORK', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_DiscoveryInfo.Visibility'('CLUSTER', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_DiscoveryInfo.Visibility'('EXTERNAL', Bin) ->
    <<Bin/binary, 2>>.

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_type_bytes(Bytes, Bin) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>.

e_type_double(Value, Bin) ->
    <<Bin/binary, Value:64/little-float>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    case MsgName of
      'Environment.Variable' ->
	  'd_msg_Environment.Variable'(Bin);
      'Environment' -> d_msg_Environment(Bin);
      'CommandInfo.URI' -> 'd_msg_CommandInfo.URI'(Bin);
      'CommandInfo' -> d_msg_CommandInfo(Bin);
      'Parameter' -> d_msg_Parameter(Bin);
      'ContainerInfo.DockerInfo.PortMapping' ->
	  'd_msg_ContainerInfo.DockerInfo.PortMapping'(Bin);
      'ContainerInfo.DockerInfo' ->
	  'd_msg_ContainerInfo.DockerInfo'(Bin);
      'TimeInfo' -> d_msg_TimeInfo(Bin);
      'WeightInfo' -> d_msg_WeightInfo(Bin);
      'DurationInfo' -> d_msg_DurationInfo(Bin);
      'Unavailability' -> d_msg_Unavailability(Bin);
      'MachineID' -> d_msg_MachineID(Bin);
      'MachineInfo' -> d_msg_MachineInfo(Bin);
      'Resource.RevocableInfo' ->
	  'd_msg_Resource.RevocableInfo'(Bin);
      'Resource.DiskInfo.Source.Mount' ->
	  'd_msg_Resource.DiskInfo.Source.Mount'(Bin);
      'Resource.DiskInfo.Source.Path' ->
	  'd_msg_Resource.DiskInfo.Source.Path'(Bin);
      'Resource.DiskInfo.Source' ->
	  'd_msg_Resource.DiskInfo.Source'(Bin);
      'Parameters' -> d_msg_Parameters(Bin);
      'Volume.Source.DockerVolume' ->
	  'd_msg_Volume.Source.DockerVolume'(Bin);
      'Volume.Source' -> 'd_msg_Volume.Source'(Bin);
      'Credential' -> d_msg_Credential(Bin);
      'Image.Docker' -> 'd_msg_Image.Docker'(Bin);
      'Label' -> d_msg_Label(Bin);
      'Labels' -> d_msg_Labels(Bin);
      'Image.Appc' -> 'd_msg_Image.Appc'(Bin);
      'Image' -> d_msg_Image(Bin);
      'Volume' -> d_msg_Volume(Bin);
      'Resource.DiskInfo.Persistence' ->
	  'd_msg_Resource.DiskInfo.Persistence'(Bin);
      'Resource.DiskInfo' -> 'd_msg_Resource.DiskInfo'(Bin);
      'Resource.ReservationInfo' ->
	  'd_msg_Resource.ReservationInfo'(Bin);
      'Value.Set' -> 'd_msg_Value.Set'(Bin);
      'Value.Range' -> 'd_msg_Value.Range'(Bin);
      'Value.Ranges' -> 'd_msg_Value.Ranges'(Bin);
      'Value.Scalar' -> 'd_msg_Value.Scalar'(Bin);
      'Resource' -> d_msg_Resource(Bin);
      'Offer.Operation.Destroy' ->
	  'd_msg_Offer.Operation.Destroy'(Bin);
      'Offer.Operation.Create' ->
	  'd_msg_Offer.Operation.Create'(Bin);
      'Offer.Operation.Unreserve' ->
	  'd_msg_Offer.Operation.Unreserve'(Bin);
      'Offer.Operation.Reserve' ->
	  'd_msg_Offer.Operation.Reserve'(Bin);
      'Port' -> d_msg_Port(Bin);
      'Ports' -> d_msg_Ports(Bin);
      'DiscoveryInfo' -> d_msg_DiscoveryInfo(Bin);
      'KillPolicy' -> d_msg_KillPolicy(Bin);
      'HealthCheck.HTTP' -> 'd_msg_HealthCheck.HTTP'(Bin);
      'HealthCheck' -> d_msg_HealthCheck(Bin);
      'NetworkInfo.IPAddress' ->
	  'd_msg_NetworkInfo.IPAddress'(Bin);
      'NetworkInfo' -> d_msg_NetworkInfo(Bin);
      'ContainerInfo.MesosInfo' ->
	  'd_msg_ContainerInfo.MesosInfo'(Bin);
      'ContainerInfo' -> d_msg_ContainerInfo(Bin);
      'FrameworkID' -> d_msg_FrameworkID(Bin);
      'ExecutorID' -> d_msg_ExecutorID(Bin);
      'ExecutorInfo' -> d_msg_ExecutorInfo(Bin);
      'AgentID' -> d_msg_AgentID(Bin);
      'TaskID' -> d_msg_TaskID(Bin);
      'TaskInfo' -> d_msg_TaskInfo(Bin);
      'Offer.Operation.Launch' ->
	  'd_msg_Offer.Operation.Launch'(Bin);
      'Offer.Operation' -> 'd_msg_Offer.Operation'(Bin);
      'Flag' -> d_msg_Flag(Bin);
      'Value.Text' -> 'd_msg_Value.Text'(Bin);
      'Value' -> d_msg_Value(Bin);
      'Request' -> d_msg_Request(Bin);
      'ContainerID' -> d_msg_ContainerID(Bin);
      'Metric' -> d_msg_Metric(Bin);
      'Response.GetFileContents' ->
	  'd_msg_Response.GetFileContents'(Bin);
      'CgroupInfo.NetCls' -> 'd_msg_CgroupInfo.NetCls'(Bin);
      'Call.GetMetrics' -> 'd_msg_Call.GetMetrics'(Bin);
      'UdpStatistics' -> d_msg_UdpStatistics(Bin);
      'TcpStatistics' -> d_msg_TcpStatistics(Bin);
      'IpStatistics' -> d_msg_IpStatistics(Bin);
      'Response.GetMetrics' ->
	  'd_msg_Response.GetMetrics'(Bin);
      'VersionInfo' -> d_msg_VersionInfo(Bin);
      'Address' -> d_msg_Address(Bin);
      'MasterInfo' -> d_msg_MasterInfo(Bin);
      'FrameworkInfo.Capability' ->
	  'd_msg_FrameworkInfo.Capability'(Bin);
      'FrameworkInfo' -> d_msg_FrameworkInfo(Bin);
      'URL' -> d_msg_URL(Bin);
      'Call.ReadFile' -> 'd_msg_Call.ReadFile'(Bin);
      'Call.ListFiles' -> 'd_msg_Call.ListFiles'(Bin);
      'Call.SetLoggingLevel' ->
	  'd_msg_Call.SetLoggingLevel'(Bin);
      'Call' -> d_msg_Call(Bin);
      'ResourceUsage.Executor.Task' ->
	  'd_msg_ResourceUsage.Executor.Task'(Bin);
      'Role' -> d_msg_Role(Bin);
      'IcmpStatistics' -> d_msg_IcmpStatistics(Bin);
      'SNMPStatistics' -> d_msg_SNMPStatistics(Bin);
      'TrafficControlStatistics' ->
	  d_msg_TrafficControlStatistics(Bin);
      'PerfStatistics' -> d_msg_PerfStatistics(Bin);
      'ResourceStatistics' -> d_msg_ResourceStatistics(Bin);
      'FileInfo' -> d_msg_FileInfo(Bin);
      'Response.ListFiles' -> 'd_msg_Response.ListFiles'(Bin);
      'CgroupInfo' -> d_msg_CgroupInfo(Bin);
      'ContainerStatus' -> d_msg_ContainerStatus(Bin);
      'TaskStatus' -> d_msg_TaskStatus(Bin);
      'Attribute' -> d_msg_Attribute(Bin);
      'AgentInfo' -> d_msg_AgentInfo(Bin);
      'Response.GetLoggingLevel' ->
	  'd_msg_Response.GetLoggingLevel'(Bin);
      'Task' -> d_msg_Task(Bin);
      'Response.GetContainers.Container' ->
	  'd_msg_Response.GetContainers.Container'(Bin);
      'Response.GetContainers' ->
	  'd_msg_Response.GetContainers'(Bin);
      'Response.GetState' -> 'd_msg_Response.GetState'(Bin);
      'Response.GetVersion' ->
	  'd_msg_Response.GetVersion'(Bin);
      'Response.GetFlags' -> 'd_msg_Response.GetFlags'(Bin);
      'Response.GetHealth' -> 'd_msg_Response.GetHealth'(Bin);
      'Response' -> d_msg_Response(Bin);
      'Filters' -> d_msg_Filters(Bin);
      'Credentials' -> d_msg_Credentials(Bin);
      'RateLimit' -> d_msg_RateLimit(Bin);
      'RateLimits' -> d_msg_RateLimits(Bin);
      'OfferID' -> d_msg_OfferID(Bin);
      'InverseOffer' -> d_msg_InverseOffer(Bin);
      'ResourceUsage.Executor' ->
	  'd_msg_ResourceUsage.Executor'(Bin);
      'ResourceUsage' -> d_msg_ResourceUsage(Bin);
      'Offer' -> d_msg_Offer(Bin)
    end.



'd_msg_Environment.Variable'(Bin) ->
    'dfp_read_field_def_Environment.Variable'(Bin, 0, 0,
					      id(undefined), id(undefined)).

'dfp_read_field_def_Environment.Variable'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_Environment.Variable_name'(Rest, Z1, Z2, F1,
					F2);
'dfp_read_field_def_Environment.Variable'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_Environment.Variable_value'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_Environment.Variable'(<<>>, 0, 0,
					  F1, F2) ->
    #'Environment.Variable'{name = F1, value = F2};
'dfp_read_field_def_Environment.Variable'(Other, Z1, Z2,
					  F1, F2) ->
    'dg_read_field_def_Environment.Variable'(Other, Z1, Z2,
					     F1, F2).

'dg_read_field_def_Environment.Variable'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Environment.Variable'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'dg_read_field_def_Environment.Variable'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Environment.Variable_name'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_Environment.Variable_value'(Rest, 0, 0, F1,
					       F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Environment.Variable'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Environment.Variable'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Environment.Variable'(Rest, 0, 0,
							     F1, F2);
	    5 -> 'skip_32_Environment.Variable'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Environment.Variable'(<<>>, 0, 0, F1,
					 F2) ->
    #'Environment.Variable'{name = F1, value = F2}.

'd_field_Environment.Variable_name'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Environment.Variable_name'(Rest, N + 7,
					X bsl N + Acc, F1, F2);
'd_field_Environment.Variable_name'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Environment.Variable'(Rest2, 0, 0,
					      NewFValue, F2).


'd_field_Environment.Variable_value'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Environment.Variable_value'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_Environment.Variable_value'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Environment.Variable'(Rest2, 0, 0,
					      F1, NewFValue).


'skip_varint_Environment.Variable'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'skip_varint_Environment.Variable'(Rest, Z1, Z2, F1,
				       F2);
'skip_varint_Environment.Variable'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Environment.Variable'(Rest, Z1, Z2,
					      F1, F2).


'skip_length_delimited_Environment.Variable'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Environment.Variable'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'skip_length_delimited_Environment.Variable'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Environment.Variable'(Rest2, 0, 0,
					      F1, F2).


'skip_32_Environment.Variable'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Environment.Variable'(Rest, Z1, Z2,
					      F1, F2).


'skip_64_Environment.Variable'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Environment.Variable'(Rest, Z1, Z2,
					      F1, F2).


d_msg_Environment(Bin) ->
    dfp_read_field_def_Environment(Bin, 0, 0, id([])).

dfp_read_field_def_Environment(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    d_field_Environment_variables(Rest, Z1, Z2, F1);
dfp_read_field_def_Environment(<<>>, 0, 0, F1) ->
    #'Environment'{variables = lists_reverse(F1)};
dfp_read_field_def_Environment(Other, Z1, Z2, F1) ->
    dg_read_field_def_Environment(Other, Z1, Z2, F1).

dg_read_field_def_Environment(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Environment(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_Environment(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Environment_variables(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Environment(Rest, 0, 0, F1);
	    1 -> skip_64_Environment(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Environment(Rest, 0, 0, F1);
	    5 -> skip_32_Environment(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Environment(<<>>, 0, 0, F1) ->
    #'Environment'{variables = lists_reverse(F1)}.

d_field_Environment_variables(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    d_field_Environment_variables(Rest, N + 7,
				  X bsl N + Acc, F1);
d_field_Environment_variables(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Environment.Variable'(Bs),
    dfp_read_field_def_Environment(Rest2, 0, 0,
				   cons(NewFValue, F1)).


skip_varint_Environment(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_Environment(Rest, Z1, Z2, F1);
skip_varint_Environment(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_Environment(Rest, Z1, Z2, F1).


skip_length_delimited_Environment(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Environment(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_Environment(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Environment(Rest2, 0, 0, F1).


skip_32_Environment(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Environment(Rest, Z1, Z2, F1).


skip_64_Environment(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Environment(Rest, Z1, Z2, F1).


'd_msg_CommandInfo.URI'(Bin) ->
    'dfp_read_field_def_CommandInfo.URI'(Bin, 0, 0,
					 id(undefined), id(undefined),
					 id(undefined), id(undefined),
					 id(undefined)).

'dfp_read_field_def_CommandInfo.URI'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_CommandInfo.URI_value'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
'dfp_read_field_def_CommandInfo.URI'(<<16,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_CommandInfo.URI_executable'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5);
'dfp_read_field_def_CommandInfo.URI'(<<24,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_CommandInfo.URI_extract'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5);
'dfp_read_field_def_CommandInfo.URI'(<<32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_CommandInfo.URI_cache'(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5);
'dfp_read_field_def_CommandInfo.URI'(<<42,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_CommandInfo.URI_output_file'(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5);
'dfp_read_field_def_CommandInfo.URI'(<<>>, 0, 0, F1, F2,
				     F3, F4, F5) ->
    #'CommandInfo.URI'{value = F1, executable = F2,
		       extract = F3, cache = F4, output_file = F5};
'dfp_read_field_def_CommandInfo.URI'(Other, Z1, Z2, F1,
				     F2, F3, F4, F5) ->
    'dg_read_field_def_CommandInfo.URI'(Other, Z1, Z2, F1,
					F2, F3, F4, F5).

'dg_read_field_def_CommandInfo.URI'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_CommandInfo.URI'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5);
'dg_read_field_def_CommandInfo.URI'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_CommandInfo.URI_value'(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      16 ->
	  'd_field_CommandInfo.URI_executable'(Rest, 0, 0, F1, F2,
					       F3, F4, F5);
      24 ->
	  'd_field_CommandInfo.URI_extract'(Rest, 0, 0, F1, F2,
					    F3, F4, F5);
      32 ->
	  'd_field_CommandInfo.URI_cache'(Rest, 0, 0, F1, F2, F3,
					  F4, F5);
      42 ->
	  'd_field_CommandInfo.URI_output_file'(Rest, 0, 0, F1,
						F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_CommandInfo.URI'(Rest, 0, 0, F1, F2, F3,
					      F4, F5);
	    1 ->
		'skip_64_CommandInfo.URI'(Rest, 0, 0, F1, F2, F3, F4,
					  F5);
	    2 ->
		'skip_length_delimited_CommandInfo.URI'(Rest, 0, 0, F1,
							F2, F3, F4, F5);
	    5 ->
		'skip_32_CommandInfo.URI'(Rest, 0, 0, F1, F2, F3, F4,
					  F5)
	  end
    end;
'dg_read_field_def_CommandInfo.URI'(<<>>, 0, 0, F1, F2,
				    F3, F4, F5) ->
    #'CommandInfo.URI'{value = F1, executable = F2,
		       extract = F3, cache = F4, output_file = F5}.

'd_field_CommandInfo.URI_value'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_CommandInfo.URI_value'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_CommandInfo.URI_value'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_CommandInfo.URI'(Rest2, 0, 0,
					 NewFValue, F2, F3, F4, F5).


'd_field_CommandInfo.URI_executable'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_CommandInfo.URI_executable'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_CommandInfo.URI_executable'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_CommandInfo.URI'(Rest, 0, 0, F1,
					 NewFValue, F3, F4, F5).


'd_field_CommandInfo.URI_extract'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_CommandInfo.URI_extract'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_CommandInfo.URI_extract'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, F4, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_CommandInfo.URI'(Rest, 0, 0, F1, F2,
					 NewFValue, F4, F5).


'd_field_CommandInfo.URI_cache'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_CommandInfo.URI_cache'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_CommandInfo.URI_cache'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, _, F5) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_CommandInfo.URI'(Rest, 0, 0, F1, F2,
					 F3, NewFValue, F5).


'd_field_CommandInfo.URI_output_file'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_CommandInfo.URI_output_file'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_CommandInfo.URI_output_file'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_CommandInfo.URI'(Rest2, 0, 0, F1,
					 F2, F3, F4, NewFValue).


'skip_varint_CommandInfo.URI'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_CommandInfo.URI'(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5);
'skip_varint_CommandInfo.URI'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_CommandInfo.URI'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5).


'skip_length_delimited_CommandInfo.URI'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_CommandInfo.URI'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5);
'skip_length_delimited_CommandInfo.URI'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_CommandInfo.URI'(Rest2, 0, 0, F1,
					 F2, F3, F4, F5).


'skip_32_CommandInfo.URI'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_CommandInfo.URI'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5).


'skip_64_CommandInfo.URI'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_CommandInfo.URI'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5).


d_msg_CommandInfo(Bin) ->
    dfp_read_field_def_CommandInfo(Bin, 0, 0, id([]),
				   id(undefined), id(undefined), id(undefined),
				   id([]), id(undefined)).

dfp_read_field_def_CommandInfo(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandInfo_uris(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_CommandInfo(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandInfo_environment(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6);
dfp_read_field_def_CommandInfo(<<48, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandInfo_shell(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
dfp_read_field_def_CommandInfo(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandInfo_value(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
dfp_read_field_def_CommandInfo(<<58, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandInfo_arguments(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6);
dfp_read_field_def_CommandInfo(<<42, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_CommandInfo_user(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_CommandInfo(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6) ->
    #'CommandInfo'{uris = lists_reverse(F1),
		   environment = F2, shell = F3, value = F4,
		   arguments = lists_reverse(F5), user = F6};
dfp_read_field_def_CommandInfo(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6) ->
    dg_read_field_def_CommandInfo(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6).

dg_read_field_def_CommandInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_CommandInfo(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_CommandInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CommandInfo_uris(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      18 ->
	  d_field_CommandInfo_environment(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6);
      48 ->
	  d_field_CommandInfo_shell(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6);
      26 ->
	  d_field_CommandInfo_value(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6);
      58 ->
	  d_field_CommandInfo_arguments(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6);
      42 ->
	  d_field_CommandInfo_user(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CommandInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6);
	    1 ->
		skip_64_CommandInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6);
	    2 ->
		skip_length_delimited_CommandInfo(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6);
	    5 ->
		skip_32_CommandInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_CommandInfo(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6) ->
    #'CommandInfo'{uris = lists_reverse(F1),
		   environment = F2, shell = F3, value = F4,
		   arguments = lists_reverse(F5), user = F6}.

d_field_CommandInfo_uris(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandInfo_uris(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_CommandInfo_uris(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_CommandInfo.URI'(Bs),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0,
				   cons(NewFValue, F1), F2, F3, F4, F5, F6).


d_field_CommandInfo_environment(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandInfo_environment(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandInfo_environment(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Environment(Bs),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1,
				   if F2 == undefined -> NewFValue;
				      true ->
					  merge_msg_Environment(F2, NewFValue)
				   end,
				   F3, F4, F5, F6).


d_field_CommandInfo_shell(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandInfo_shell(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6);
d_field_CommandInfo_shell(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, _, F4, F5, F6) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_CommandInfo(Rest, 0, 0, F1, F2,
				   NewFValue, F4, F5, F6).


d_field_CommandInfo_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandInfo_value(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6);
d_field_CommandInfo_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6).


d_field_CommandInfo_arguments(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandInfo_arguments(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_CommandInfo_arguments(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, cons(NewFValue, F5), F6).


d_field_CommandInfo_user(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_CommandInfo_user(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_CommandInfo_user(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue).


skip_varint_CommandInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_CommandInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6);
skip_varint_CommandInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CommandInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6).


skip_length_delimited_CommandInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_CommandInfo(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_CommandInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CommandInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6).


skip_32_CommandInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CommandInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6).


skip_64_CommandInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6) ->
    dfp_read_field_def_CommandInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6).


d_msg_Parameter(Bin) ->
    dfp_read_field_def_Parameter(Bin, 0, 0, id(undefined),
				 id(undefined)).

dfp_read_field_def_Parameter(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_Parameter_key(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Parameter(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_Parameter_value(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Parameter(<<>>, 0, 0, F1, F2) ->
    #'Parameter'{key = F1, value = F2};
dfp_read_field_def_Parameter(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Parameter(Other, Z1, Z2, F1, F2).

dg_read_field_def_Parameter(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Parameter(Rest, N + 7, X bsl N + Acc,
				F1, F2);
dg_read_field_def_Parameter(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Parameter_key(Rest, 0, 0, F1, F2);
      18 -> d_field_Parameter_value(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Parameter(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Parameter(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_Parameter(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Parameter(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Parameter(<<>>, 0, 0, F1, F2) ->
    #'Parameter'{key = F1, value = F2}.

d_field_Parameter_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2)
    when N < 57 ->
    d_field_Parameter_key(Rest, N + 7, X bsl N + Acc, F1,
			  F2);
d_field_Parameter_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Parameter(Rest2, 0, 0, NewFValue,
				 F2).


d_field_Parameter_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2)
    when N < 57 ->
    d_field_Parameter_value(Rest, N + 7, X bsl N + Acc, F1,
			    F2);
d_field_Parameter_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Parameter(Rest2, 0, 0, F1,
				 NewFValue).


skip_varint_Parameter(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    skip_varint_Parameter(Rest, Z1, Z2, F1, F2);
skip_varint_Parameter(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    dfp_read_field_def_Parameter(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Parameter(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Parameter(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
skip_length_delimited_Parameter(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Parameter(Rest2, 0, 0, F1, F2).


skip_32_Parameter(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_Parameter(Rest, Z1, Z2, F1, F2).


skip_64_Parameter(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_Parameter(Rest, Z1, Z2, F1, F2).


'd_msg_ContainerInfo.DockerInfo.PortMapping'(Bin) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Bin,
							      0, 0,
							      id(undefined),
							      id(undefined),
							      id(undefined)).

'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<8,
							    Rest/binary>>,
							  Z1, Z2, F1, F2, F3) ->
    'd_field_ContainerInfo.DockerInfo.PortMapping_host_port'(Rest,
							     Z1, Z2, F1, F2,
							     F3);
'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<16,
							    Rest/binary>>,
							  Z1, Z2, F1, F2, F3) ->
    'd_field_ContainerInfo.DockerInfo.PortMapping_container_port'(Rest,
								  Z1, Z2, F1,
								  F2, F3);
'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<26,
							    Rest/binary>>,
							  Z1, Z2, F1, F2, F3) ->
    'd_field_ContainerInfo.DockerInfo.PortMapping_protocol'(Rest,
							    Z1, Z2, F1, F2, F3);
'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<>>,
							  0, 0, F1, F2, F3) ->
    #'ContainerInfo.DockerInfo.PortMapping'{host_port = F1,
					    container_port = F2, protocol = F3};
'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Other,
							  Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Other,
							     Z1, Z2, F1, F2,
							     F3).

'dg_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3);
'dg_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_ContainerInfo.DockerInfo.PortMapping_host_port'(Rest,
								   0, 0, F1, F2,
								   F3);
      16 ->
	  'd_field_ContainerInfo.DockerInfo.PortMapping_container_port'(Rest,
									0, 0,
									F1, F2,
									F3);
      26 ->
	  'd_field_ContainerInfo.DockerInfo.PortMapping_protocol'(Rest,
								  0, 0, F1, F2,
								  F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ContainerInfo.DockerInfo.PortMapping'(Rest,
								   0, 0, F1, F2,
								   F3);
	    1 ->
		'skip_64_ContainerInfo.DockerInfo.PortMapping'(Rest, 0,
							       0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_ContainerInfo.DockerInfo.PortMapping'(Rest,
									     0,
									     0,
									     F1,
									     F2,
									     F3);
	    5 ->
		'skip_32_ContainerInfo.DockerInfo.PortMapping'(Rest, 0,
							       0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_ContainerInfo.DockerInfo.PortMapping'(<<>>,
							 0, 0, F1, F2, F3) ->
    #'ContainerInfo.DockerInfo.PortMapping'{host_port = F1,
					    container_port = F2, protocol = F3}.

'd_field_ContainerInfo.DockerInfo.PortMapping_host_port'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo.PortMapping_host_port'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3);
'd_field_ContainerInfo.DockerInfo.PortMapping_host_port'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest,
							      0, 0, NewFValue,
							      F2, F3).


'd_field_ContainerInfo.DockerInfo.PortMapping_container_port'(<<1:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, F2,
							      F3)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo.PortMapping_container_port'(Rest,
								  N + 7,
								  X bsl N + Acc,
								  F1, F2, F3);
'd_field_ContainerInfo.DockerInfo.PortMapping_container_port'(<<0:1,
								X:7,
								Rest/binary>>,
							      N, Acc, F1, _,
							      F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest,
							      0, 0, F1,
							      NewFValue, F3).


'd_field_ContainerInfo.DockerInfo.PortMapping_protocol'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo.PortMapping_protocol'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3);
'd_field_ContainerInfo.DockerInfo.PortMapping_protocol'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest2,
							      0, 0, F1, F2,
							      NewFValue).


'skip_varint_ContainerInfo.DockerInfo.PortMapping'(<<1:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F1, F2, F3) ->
    'skip_varint_ContainerInfo.DockerInfo.PortMapping'(Rest,
						       Z1, Z2, F1, F2, F3);
'skip_varint_ContainerInfo.DockerInfo.PortMapping'(<<0:1,
						     _:7, Rest/binary>>,
						   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest,
							      Z1, Z2, F1, F2,
							      F3).


'skip_length_delimited_ContainerInfo.DockerInfo.PortMapping'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_ContainerInfo.DockerInfo.PortMapping'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F1, F2, F3);
'skip_length_delimited_ContainerInfo.DockerInfo.PortMapping'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F1, F2,
							     F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest2,
							      0, 0, F1, F2, F3).


'skip_32_ContainerInfo.DockerInfo.PortMapping'(<<_:32,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest,
							      Z1, Z2, F1, F2,
							      F3).


'skip_64_ContainerInfo.DockerInfo.PortMapping'(<<_:64,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo.PortMapping'(Rest,
							      Z1, Z2, F1, F2,
							      F3).


'd_msg_ContainerInfo.DockerInfo'(Bin) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Bin, 0, 0,
						  id(undefined), id(undefined),
						  id([]), id(undefined), id([]),
						  id(undefined), id(undefined)).

'dfp_read_field_def_ContainerInfo.DockerInfo'(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_image'(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<16,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_network'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<26,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_port_mappings'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<32,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_privileged'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<42,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_parameters'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<48,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_force_pull_image'(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<58,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3, F4, F5, F6,
					      F7) ->
    'd_field_ContainerInfo.DockerInfo_volume_driver'(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7);
'dfp_read_field_def_ContainerInfo.DockerInfo'(<<>>, 0,
					      0, F1, F2, F3, F4, F5, F6, F7) ->
    #'ContainerInfo.DockerInfo'{image = F1, network = F2,
				port_mappings = lists_reverse(F3),
				privileged = F4, parameters = lists_reverse(F5),
				force_pull_image = F6, volume_driver = F7};
'dfp_read_field_def_ContainerInfo.DockerInfo'(Other, Z1,
					      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dg_read_field_def_ContainerInfo.DockerInfo'(Other, Z1,
						 Z2, F1, F2, F3, F4, F5, F6,
						 F7).

'dg_read_field_def_ContainerInfo.DockerInfo'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    'dg_read_field_def_ContainerInfo.DockerInfo'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7);
'dg_read_field_def_ContainerInfo.DockerInfo'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6,
					     F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ContainerInfo.DockerInfo_image'(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      16 ->
	  'd_field_ContainerInfo.DockerInfo_network'(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6,
						     F7);
      26 ->
	  'd_field_ContainerInfo.DockerInfo_port_mappings'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7);
      32 ->
	  'd_field_ContainerInfo.DockerInfo_privileged'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7);
      42 ->
	  'd_field_ContainerInfo.DockerInfo_parameters'(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7);
      48 ->
	  'd_field_ContainerInfo.DockerInfo_force_pull_image'(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7);
      58 ->
	  'd_field_ContainerInfo.DockerInfo_volume_driver'(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ContainerInfo.DockerInfo'(Rest, 0, 0, F1,
						       F2, F3, F4, F5, F6, F7);
	    1 ->
		'skip_64_ContainerInfo.DockerInfo'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7);
	    2 ->
		'skip_length_delimited_ContainerInfo.DockerInfo'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7);
	    5 ->
		'skip_32_ContainerInfo.DockerInfo'(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7)
	  end
    end;
'dg_read_field_def_ContainerInfo.DockerInfo'(<<>>, 0, 0,
					     F1, F2, F3, F4, F5, F6, F7) ->
    #'ContainerInfo.DockerInfo'{image = F1, network = F2,
				port_mappings = lists_reverse(F3),
				privileged = F4, parameters = lists_reverse(F5),
				force_pull_image = F6, volume_driver = F7}.

'd_field_ContainerInfo.DockerInfo_image'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_image'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
'd_field_ContainerInfo.DockerInfo_image'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest2, 0,
						  0, NewFValue, F2, F3, F4, F5,
						  F6, F7).


'd_field_ContainerInfo.DockerInfo_network'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_network'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7);
'd_field_ContainerInfo.DockerInfo_network'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, _, F3, F4, F5, F6, F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue =
	'd_enum_ContainerInfo.DockerInfo.Network'(Tmp),
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest, 0,
						  0, F1, NewFValue, F3, F4, F5,
						  F6, F7).


'd_field_ContainerInfo.DockerInfo_port_mappings'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_port_mappings'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7);
'd_field_ContainerInfo.DockerInfo_port_mappings'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue =
	'd_msg_ContainerInfo.DockerInfo.PortMapping'(Bs),
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest2, 0,
						  0, F1, F2,
						  cons(NewFValue, F3), F4, F5,
						  F6, F7).


'd_field_ContainerInfo.DockerInfo_privileged'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_privileged'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7);
'd_field_ContainerInfo.DockerInfo_privileged'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, _, F5, F6,
					      F7) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest, 0,
						  0, F1, F2, F3, NewFValue, F5,
						  F6, F7).


'd_field_ContainerInfo.DockerInfo_parameters'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_parameters'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7);
'd_field_ContainerInfo.DockerInfo_parameters'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Parameter(Bs),
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest2, 0,
						  0, F1, F2, F3, F4,
						  cons(NewFValue, F5), F6, F7).


'd_field_ContainerInfo.DockerInfo_force_pull_image'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_force_pull_image'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7);
'd_field_ContainerInfo.DockerInfo_force_pull_image'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    _, F7) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest, 0,
						  0, F1, F2, F3, F4, F5,
						  NewFValue, F7).


'd_field_ContainerInfo.DockerInfo_volume_driver'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7)
    when N < 57 ->
    'd_field_ContainerInfo.DockerInfo_volume_driver'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7);
'd_field_ContainerInfo.DockerInfo_volume_driver'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6,
						  NewFValue).


'skip_varint_ContainerInfo.DockerInfo'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'skip_varint_ContainerInfo.DockerInfo'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7);
'skip_varint_ContainerInfo.DockerInfo'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7).


'skip_length_delimited_ContainerInfo.DockerInfo'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7)
    when N < 57 ->
    'skip_length_delimited_ContainerInfo.DockerInfo'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7);
'skip_length_delimited_ContainerInfo.DockerInfo'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest2, 0,
						  0, F1, F2, F3, F4, F5, F6,
						  F7).


'skip_32_ContainerInfo.DockerInfo'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7).


'skip_64_ContainerInfo.DockerInfo'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    'dfp_read_field_def_ContainerInfo.DockerInfo'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7).


d_msg_TimeInfo(Bin) ->
    dfp_read_field_def_TimeInfo(Bin, 0, 0, id(undefined)).

dfp_read_field_def_TimeInfo(<<8, Rest/binary>>, Z1, Z2,
			    F1) ->
    d_field_TimeInfo_nanoseconds(Rest, Z1, Z2, F1);
dfp_read_field_def_TimeInfo(<<>>, 0, 0, F1) ->
    #'TimeInfo'{nanoseconds = F1};
dfp_read_field_def_TimeInfo(Other, Z1, Z2, F1) ->
    dg_read_field_def_TimeInfo(Other, Z1, Z2, F1).

dg_read_field_def_TimeInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_TimeInfo(Rest, N + 7, X bsl N + Acc,
			       F1);
dg_read_field_def_TimeInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_TimeInfo_nanoseconds(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_TimeInfo(Rest, 0, 0, F1);
	    1 -> skip_64_TimeInfo(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_TimeInfo(Rest, 0, 0, F1);
	    5 -> skip_32_TimeInfo(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_TimeInfo(<<>>, 0, 0, F1) ->
    #'TimeInfo'{nanoseconds = F1}.

d_field_TimeInfo_nanoseconds(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    d_field_TimeInfo_nanoseconds(Rest, N + 7, X bsl N + Acc,
				 F1);
d_field_TimeInfo_nanoseconds(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TimeInfo(Rest, 0, 0, NewFValue).


skip_varint_TimeInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1) ->
    skip_varint_TimeInfo(Rest, Z1, Z2, F1);
skip_varint_TimeInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1) ->
    dfp_read_field_def_TimeInfo(Rest, Z1, Z2, F1).


skip_length_delimited_TimeInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_TimeInfo(Rest, N + 7,
				   X bsl N + Acc, F1);
skip_length_delimited_TimeInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TimeInfo(Rest2, 0, 0, F1).


skip_32_TimeInfo(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_TimeInfo(Rest, Z1, Z2, F1).


skip_64_TimeInfo(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_TimeInfo(Rest, Z1, Z2, F1).


d_msg_WeightInfo(Bin) ->
    dfp_read_field_def_WeightInfo(Bin, 0, 0, id(undefined),
				  id(undefined)).

dfp_read_field_def_WeightInfo(<<9, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_WeightInfo_weight(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_WeightInfo(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_WeightInfo_role(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_WeightInfo(<<>>, 0, 0, F1, F2) ->
    #'WeightInfo'{weight = F1, role = F2};
dfp_read_field_def_WeightInfo(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_WeightInfo(Other, Z1, Z2, F1, F2).

dg_read_field_def_WeightInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_WeightInfo(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
dg_read_field_def_WeightInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      9 -> d_field_WeightInfo_weight(Rest, 0, 0, F1, F2);
      18 -> d_field_WeightInfo_role(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_WeightInfo(Rest, 0, 0, F1, F2);
	    1 -> skip_64_WeightInfo(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_WeightInfo(Rest, 0, 0, F1, F2);
	    5 -> skip_32_WeightInfo(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_WeightInfo(<<>>, 0, 0, F1, F2) ->
    #'WeightInfo'{weight = F1, role = F2}.

d_field_WeightInfo_weight(<<Value:64/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, F2) ->
    dfp_read_field_def_WeightInfo(Rest, Z1, Z2, Value, F2).


d_field_WeightInfo_role(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2)
    when N < 57 ->
    d_field_WeightInfo_role(Rest, N + 7, X bsl N + Acc, F1,
			    F2);
d_field_WeightInfo_role(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_WeightInfo(Rest2, 0, 0, F1,
				  NewFValue).


skip_varint_WeightInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    skip_varint_WeightInfo(Rest, Z1, Z2, F1, F2);
skip_varint_WeightInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    dfp_read_field_def_WeightInfo(Rest, Z1, Z2, F1, F2).


skip_length_delimited_WeightInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_WeightInfo(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
skip_length_delimited_WeightInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_WeightInfo(Rest2, 0, 0, F1, F2).


skip_32_WeightInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_WeightInfo(Rest, Z1, Z2, F1, F2).


skip_64_WeightInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_WeightInfo(Rest, Z1, Z2, F1, F2).


d_msg_DurationInfo(Bin) ->
    dfp_read_field_def_DurationInfo(Bin, 0, 0,
				    id(undefined)).

dfp_read_field_def_DurationInfo(<<8, Rest/binary>>, Z1,
				Z2, F1) ->
    d_field_DurationInfo_nanoseconds(Rest, Z1, Z2, F1);
dfp_read_field_def_DurationInfo(<<>>, 0, 0, F1) ->
    #'DurationInfo'{nanoseconds = F1};
dfp_read_field_def_DurationInfo(Other, Z1, Z2, F1) ->
    dg_read_field_def_DurationInfo(Other, Z1, Z2, F1).

dg_read_field_def_DurationInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_DurationInfo(Rest, N + 7,
				   X bsl N + Acc, F1);
dg_read_field_def_DurationInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_DurationInfo_nanoseconds(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_DurationInfo(Rest, 0, 0, F1);
	    1 -> skip_64_DurationInfo(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_DurationInfo(Rest, 0, 0, F1);
	    5 -> skip_32_DurationInfo(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_DurationInfo(<<>>, 0, 0, F1) ->
    #'DurationInfo'{nanoseconds = F1}.

d_field_DurationInfo_nanoseconds(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    d_field_DurationInfo_nanoseconds(Rest, N + 7,
				     X bsl N + Acc, F1);
d_field_DurationInfo_nanoseconds(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_DurationInfo(Rest, 0, 0, NewFValue).


skip_varint_DurationInfo(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    skip_varint_DurationInfo(Rest, Z1, Z2, F1);
skip_varint_DurationInfo(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    dfp_read_field_def_DurationInfo(Rest, Z1, Z2, F1).


skip_length_delimited_DurationInfo(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_DurationInfo(Rest, N + 7,
				       X bsl N + Acc, F1);
skip_length_delimited_DurationInfo(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DurationInfo(Rest2, 0, 0, F1).


skip_32_DurationInfo(<<_:32, Rest/binary>>, Z1, Z2,
		     F1) ->
    dfp_read_field_def_DurationInfo(Rest, Z1, Z2, F1).


skip_64_DurationInfo(<<_:64, Rest/binary>>, Z1, Z2,
		     F1) ->
    dfp_read_field_def_DurationInfo(Rest, Z1, Z2, F1).


d_msg_Unavailability(Bin) ->
    dfp_read_field_def_Unavailability(Bin, 0, 0,
				      id(undefined), id(undefined)).

dfp_read_field_def_Unavailability(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    d_field_Unavailability_start(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Unavailability(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    d_field_Unavailability_duration(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Unavailability(<<>>, 0, 0, F1, F2) ->
    #'Unavailability'{start = F1, duration = F2};
dfp_read_field_def_Unavailability(Other, Z1, Z2, F1,
				  F2) ->
    dg_read_field_def_Unavailability(Other, Z1, Z2, F1, F2).

dg_read_field_def_Unavailability(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Unavailability(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
dg_read_field_def_Unavailability(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Unavailability_start(Rest, 0, 0, F1, F2);
      18 ->
	  d_field_Unavailability_duration(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Unavailability(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Unavailability(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_Unavailability(Rest, 0, 0, F1,
						     F2);
	    5 -> skip_32_Unavailability(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Unavailability(<<>>, 0, 0, F1, F2) ->
    #'Unavailability'{start = F1, duration = F2}.

d_field_Unavailability_start(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    d_field_Unavailability_start(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
d_field_Unavailability_start(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TimeInfo(Bs),
    dfp_read_field_def_Unavailability(Rest2, 0, 0,
				      if F1 == undefined -> NewFValue;
					 true ->
					     merge_msg_TimeInfo(F1, NewFValue)
				      end,
				      F2).


d_field_Unavailability_duration(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_Unavailability_duration(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_Unavailability_duration(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DurationInfo(Bs),
    dfp_read_field_def_Unavailability(Rest2, 0, 0, F1,
				      if F2 == undefined -> NewFValue;
					 true ->
					     merge_msg_DurationInfo(F2,
								    NewFValue)
				      end).


skip_varint_Unavailability(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2) ->
    skip_varint_Unavailability(Rest, Z1, Z2, F1, F2);
skip_varint_Unavailability(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2) ->
    dfp_read_field_def_Unavailability(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Unavailability(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Unavailability(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
skip_length_delimited_Unavailability(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Unavailability(Rest2, 0, 0, F1, F2).


skip_32_Unavailability(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2) ->
    dfp_read_field_def_Unavailability(Rest, Z1, Z2, F1, F2).


skip_64_Unavailability(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2) ->
    dfp_read_field_def_Unavailability(Rest, Z1, Z2, F1, F2).


d_msg_MachineID(Bin) ->
    dfp_read_field_def_MachineID(Bin, 0, 0, id(undefined),
				 id(undefined)).

dfp_read_field_def_MachineID(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_MachineID_hostname(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_MachineID(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2) ->
    d_field_MachineID_ip(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_MachineID(<<>>, 0, 0, F1, F2) ->
    #'MachineID'{hostname = F1, ip = F2};
dfp_read_field_def_MachineID(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_MachineID(Other, Z1, Z2, F1, F2).

dg_read_field_def_MachineID(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_MachineID(Rest, N + 7, X bsl N + Acc,
				F1, F2);
dg_read_field_def_MachineID(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_MachineID_hostname(Rest, 0, 0, F1, F2);
      18 -> d_field_MachineID_ip(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_MachineID(Rest, 0, 0, F1, F2);
	    1 -> skip_64_MachineID(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_MachineID(Rest, 0, 0, F1, F2);
	    5 -> skip_32_MachineID(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_MachineID(<<>>, 0, 0, F1, F2) ->
    #'MachineID'{hostname = F1, ip = F2}.

d_field_MachineID_hostname(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2)
    when N < 57 ->
    d_field_MachineID_hostname(Rest, N + 7, X bsl N + Acc,
			       F1, F2);
d_field_MachineID_hostname(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MachineID(Rest2, 0, 0, NewFValue,
				 F2).


d_field_MachineID_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2)
    when N < 57 ->
    d_field_MachineID_ip(Rest, N + 7, X bsl N + Acc, F1,
			 F2);
d_field_MachineID_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MachineID(Rest2, 0, 0, F1,
				 NewFValue).


skip_varint_MachineID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    skip_varint_MachineID(Rest, Z1, Z2, F1, F2);
skip_varint_MachineID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2) ->
    dfp_read_field_def_MachineID(Rest, Z1, Z2, F1, F2).


skip_length_delimited_MachineID(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_MachineID(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
skip_length_delimited_MachineID(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MachineID(Rest2, 0, 0, F1, F2).


skip_32_MachineID(<<_:32, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_MachineID(Rest, Z1, Z2, F1, F2).


skip_64_MachineID(<<_:64, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_MachineID(Rest, Z1, Z2, F1, F2).


d_msg_MachineInfo(Bin) ->
    dfp_read_field_def_MachineInfo(Bin, 0, 0, id(undefined),
				   id(undefined), id(undefined)).

dfp_read_field_def_MachineInfo(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_MachineInfo_id(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_MachineInfo(<<16, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_MachineInfo_mode(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_MachineInfo(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3) ->
    d_field_MachineInfo_unavailability(Rest, Z1, Z2, F1, F2,
				       F3);
dfp_read_field_def_MachineInfo(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'MachineInfo'{id = F1, mode = F2, unavailability = F3};
dfp_read_field_def_MachineInfo(Other, Z1, Z2, F1, F2,
			       F3) ->
    dg_read_field_def_MachineInfo(Other, Z1, Z2, F1, F2,
				  F3).

dg_read_field_def_MachineInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_MachineInfo(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
dg_read_field_def_MachineInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_MachineInfo_id(Rest, 0, 0, F1, F2, F3);
      16 -> d_field_MachineInfo_mode(Rest, 0, 0, F1, F2, F3);
      26 ->
	  d_field_MachineInfo_unavailability(Rest, 0, 0, F1, F2,
					     F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_MachineInfo(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_MachineInfo(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_MachineInfo(Rest, 0, 0, F1, F2,
						  F3);
	    5 -> skip_32_MachineInfo(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_MachineInfo(<<>>, 0, 0, F1, F2, F3) ->
    #'MachineInfo'{id = F1, mode = F2, unavailability = F3}.

d_field_MachineInfo_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MachineInfo_id(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3);
d_field_MachineInfo_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_MachineID(Bs),
    dfp_read_field_def_MachineInfo(Rest2, 0, 0,
				   if F1 == undefined -> NewFValue;
				      true -> merge_msg_MachineID(F1, NewFValue)
				   end,
				   F2, F3).


d_field_MachineInfo_mode(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MachineInfo_mode(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3);
d_field_MachineInfo_mode(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_MachineInfo.Mode'(Tmp),
    dfp_read_field_def_MachineInfo(Rest, 0, 0, F1,
				   NewFValue, F3).


d_field_MachineInfo_unavailability(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_MachineInfo_unavailability(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
d_field_MachineInfo_unavailability(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Unavailability(Bs),
    dfp_read_field_def_MachineInfo(Rest2, 0, 0, F1, F2,
				   if F3 == undefined -> NewFValue;
				      true ->
					  merge_msg_Unavailability(F3,
								   NewFValue)
				   end).


skip_varint_MachineInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    skip_varint_MachineInfo(Rest, Z1, Z2, F1, F2, F3);
skip_varint_MachineInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3) ->
    dfp_read_field_def_MachineInfo(Rest, Z1, Z2, F1, F2,
				   F3).


skip_length_delimited_MachineInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_MachineInfo(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
skip_length_delimited_MachineInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MachineInfo(Rest2, 0, 0, F1, F2, F3).


skip_32_MachineInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_MachineInfo(Rest, Z1, Z2, F1, F2,
				   F3).


skip_64_MachineInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3) ->
    dfp_read_field_def_MachineInfo(Rest, Z1, Z2, F1, F2,
				   F3).


'd_msg_Resource.RevocableInfo'(Bin) ->
    'dfp_read_field_def_Resource.RevocableInfo'(Bin, 0, 0).

'dfp_read_field_def_Resource.RevocableInfo'(<<>>, 0,
					    0) ->
    #'Resource.RevocableInfo'{};
'dfp_read_field_def_Resource.RevocableInfo'(Other, Z1,
					    Z2) ->
    'dg_read_field_def_Resource.RevocableInfo'(Other, Z1,
					       Z2).

'dg_read_field_def_Resource.RevocableInfo'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.RevocableInfo'(Rest, N + 7,
					       X bsl N + Acc);
'dg_read_field_def_Resource.RevocableInfo'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> 'skip_varint_Resource.RevocableInfo'(Rest, 0, 0);
      1 -> 'skip_64_Resource.RevocableInfo'(Rest, 0, 0);
      2 ->
	  'skip_length_delimited_Resource.RevocableInfo'(Rest, 0,
							 0);
      5 -> 'skip_32_Resource.RevocableInfo'(Rest, 0, 0)
    end;
'dg_read_field_def_Resource.RevocableInfo'(<<>>, 0,
					   0) ->
    #'Resource.RevocableInfo'{}.

'skip_varint_Resource.RevocableInfo'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2) ->
    'skip_varint_Resource.RevocableInfo'(Rest, Z1, Z2);
'skip_varint_Resource.RevocableInfo'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2) ->
    'dfp_read_field_def_Resource.RevocableInfo'(Rest, Z1,
						Z2).


'skip_length_delimited_Resource.RevocableInfo'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc)
    when N < 57 ->
    'skip_length_delimited_Resource.RevocableInfo'(Rest,
						   N + 7, X bsl N + Acc);
'skip_length_delimited_Resource.RevocableInfo'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.RevocableInfo'(Rest2, 0,
						0).


'skip_32_Resource.RevocableInfo'(<<_:32, Rest/binary>>,
				 Z1, Z2) ->
    'dfp_read_field_def_Resource.RevocableInfo'(Rest, Z1,
						Z2).


'skip_64_Resource.RevocableInfo'(<<_:64, Rest/binary>>,
				 Z1, Z2) ->
    'dfp_read_field_def_Resource.RevocableInfo'(Rest, Z1,
						Z2).


'd_msg_Resource.DiskInfo.Source.Mount'(Bin) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Bin,
							0, 0, id(undefined)).

'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F1) ->
    'd_field_Resource.DiskInfo.Source.Mount_root'(Rest, Z1,
						  Z2, F1);
'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(<<>>,
						    0, 0, F1) ->
    #'Resource.DiskInfo.Source.Mount'{root = F1};
'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Other,
						    Z1, Z2, F1) ->
    'dg_read_field_def_Resource.DiskInfo.Source.Mount'(Other,
						       Z1, Z2, F1).

'dg_read_field_def_Resource.DiskInfo.Source.Mount'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.DiskInfo.Source.Mount'(Rest,
						       N + 7, X bsl N + Acc,
						       F1);
'dg_read_field_def_Resource.DiskInfo.Source.Mount'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Resource.DiskInfo.Source.Mount_root'(Rest, 0,
							0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Resource.DiskInfo.Source.Mount'(Rest, 0, 0,
							     F1);
	    1 ->
		'skip_64_Resource.DiskInfo.Source.Mount'(Rest, 0, 0,
							 F1);
	    2 ->
		'skip_length_delimited_Resource.DiskInfo.Source.Mount'(Rest,
								       0, 0,
								       F1);
	    5 ->
		'skip_32_Resource.DiskInfo.Source.Mount'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Resource.DiskInfo.Source.Mount'(<<>>,
						   0, 0, F1) ->
    #'Resource.DiskInfo.Source.Mount'{root = F1}.

'd_field_Resource.DiskInfo.Source.Mount_root'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Source.Mount_root'(Rest,
						  N + 7, X bsl N + Acc, F1);
'd_field_Resource.DiskInfo.Source.Mount_root'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Rest2,
							0, 0, NewFValue).


'skip_varint_Resource.DiskInfo.Source.Mount'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'skip_varint_Resource.DiskInfo.Source.Mount'(Rest, Z1,
						 Z2, F1);
'skip_varint_Resource.DiskInfo.Source.Mount'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Rest,
							Z1, Z2, F1).


'skip_length_delimited_Resource.DiskInfo.Source.Mount'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Resource.DiskInfo.Source.Mount'(Rest,
							   N + 7, X bsl N + Acc,
							   F1);
'skip_length_delimited_Resource.DiskInfo.Source.Mount'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Rest2,
							0, 0, F1).


'skip_32_Resource.DiskInfo.Source.Mount'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Rest,
							Z1, Z2, F1).


'skip_64_Resource.DiskInfo.Source.Mount'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Mount'(Rest,
							Z1, Z2, F1).


'd_msg_Resource.DiskInfo.Source.Path'(Bin) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Bin,
						       0, 0, id(undefined)).

'dfp_read_field_def_Resource.DiskInfo.Source.Path'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F1) ->
    'd_field_Resource.DiskInfo.Source.Path_root'(Rest, Z1,
						 Z2, F1);
'dfp_read_field_def_Resource.DiskInfo.Source.Path'(<<>>,
						   0, 0, F1) ->
    #'Resource.DiskInfo.Source.Path'{root = F1};
'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Other,
						   Z1, Z2, F1) ->
    'dg_read_field_def_Resource.DiskInfo.Source.Path'(Other,
						      Z1, Z2, F1).

'dg_read_field_def_Resource.DiskInfo.Source.Path'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.DiskInfo.Source.Path'(Rest,
						      N + 7, X bsl N + Acc, F1);
'dg_read_field_def_Resource.DiskInfo.Source.Path'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Resource.DiskInfo.Source.Path_root'(Rest, 0, 0,
						       F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Resource.DiskInfo.Source.Path'(Rest, 0, 0,
							    F1);
	    1 ->
		'skip_64_Resource.DiskInfo.Source.Path'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Resource.DiskInfo.Source.Path'(Rest,
								      0, 0, F1);
	    5 ->
		'skip_32_Resource.DiskInfo.Source.Path'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Resource.DiskInfo.Source.Path'(<<>>,
						  0, 0, F1) ->
    #'Resource.DiskInfo.Source.Path'{root = F1}.

'd_field_Resource.DiskInfo.Source.Path_root'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Source.Path_root'(Rest,
						 N + 7, X bsl N + Acc, F1);
'd_field_Resource.DiskInfo.Source.Path_root'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Rest2,
						       0, 0, NewFValue).


'skip_varint_Resource.DiskInfo.Source.Path'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'skip_varint_Resource.DiskInfo.Source.Path'(Rest, Z1,
						Z2, F1);
'skip_varint_Resource.DiskInfo.Source.Path'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Rest,
						       Z1, Z2, F1).


'skip_length_delimited_Resource.DiskInfo.Source.Path'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Resource.DiskInfo.Source.Path'(Rest,
							  N + 7, X bsl N + Acc,
							  F1);
'skip_length_delimited_Resource.DiskInfo.Source.Path'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Rest2,
						       0, 0, F1).


'skip_32_Resource.DiskInfo.Source.Path'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Rest,
						       Z1, Z2, F1).


'skip_64_Resource.DiskInfo.Source.Path'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'dfp_read_field_def_Resource.DiskInfo.Source.Path'(Rest,
						       Z1, Z2, F1).


'd_msg_Resource.DiskInfo.Source'(Bin) ->
    'dfp_read_field_def_Resource.DiskInfo.Source'(Bin, 0, 0,
						  id(undefined), id(undefined),
						  id(undefined)).

'dfp_read_field_def_Resource.DiskInfo.Source'(<<8,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'd_field_Resource.DiskInfo.Source_type'(Rest, Z1, Z2,
					    F1, F2, F3);
'dfp_read_field_def_Resource.DiskInfo.Source'(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'd_field_Resource.DiskInfo.Source_path'(Rest, Z1, Z2,
					    F1, F2, F3);
'dfp_read_field_def_Resource.DiskInfo.Source'(<<26,
						Rest/binary>>,
					      Z1, Z2, F1, F2, F3) ->
    'd_field_Resource.DiskInfo.Source_mount'(Rest, Z1, Z2,
					     F1, F2, F3);
'dfp_read_field_def_Resource.DiskInfo.Source'(<<>>, 0,
					      0, F1, F2, F3) ->
    #'Resource.DiskInfo.Source'{type = F1, path = F2,
				mount = F3};
'dfp_read_field_def_Resource.DiskInfo.Source'(Other, Z1,
					      Z2, F1, F2, F3) ->
    'dg_read_field_def_Resource.DiskInfo.Source'(Other, Z1,
						 Z2, F1, F2, F3).

'dg_read_field_def_Resource.DiskInfo.Source'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.DiskInfo.Source'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3);
'dg_read_field_def_Resource.DiskInfo.Source'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_Resource.DiskInfo.Source_type'(Rest, 0, 0, F1,
						  F2, F3);
      18 ->
	  'd_field_Resource.DiskInfo.Source_path'(Rest, 0, 0, F1,
						  F2, F3);
      26 ->
	  'd_field_Resource.DiskInfo.Source_mount'(Rest, 0, 0, F1,
						   F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Resource.DiskInfo.Source'(Rest, 0, 0, F1,
						       F2, F3);
	    1 ->
		'skip_64_Resource.DiskInfo.Source'(Rest, 0, 0, F1, F2,
						   F3);
	    2 ->
		'skip_length_delimited_Resource.DiskInfo.Source'(Rest,
								 0, 0, F1, F2,
								 F3);
	    5 ->
		'skip_32_Resource.DiskInfo.Source'(Rest, 0, 0, F1, F2,
						   F3)
	  end
    end;
'dg_read_field_def_Resource.DiskInfo.Source'(<<>>, 0, 0,
					     F1, F2, F3) ->
    #'Resource.DiskInfo.Source'{type = F1, path = F2,
				mount = F3}.

'd_field_Resource.DiskInfo.Source_type'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Source_type'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
'd_field_Resource.DiskInfo.Source_type'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F2, F3) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Resource.DiskInfo.Source.Type'(Tmp),
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest, 0,
						  0, NewFValue, F2, F3).


'd_field_Resource.DiskInfo.Source_path'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Source_path'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
'd_field_Resource.DiskInfo.Source_path'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.DiskInfo.Source.Path'(Bs),
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest2, 0,
						  0, F1,
						  if F2 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_Resource.DiskInfo.Source.Path'(F2,
												   NewFValue)
						  end,
						  F3).


'd_field_Resource.DiskInfo.Source_mount'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Source_mount'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
'd_field_Resource.DiskInfo.Source_mount'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.DiskInfo.Source.Mount'(Bs),
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest2, 0,
						  0, F1, F2,
						  if F3 == undefined ->
							 NewFValue;
						     true ->
							 'merge_msg_Resource.DiskInfo.Source.Mount'(F3,
												    NewFValue)
						  end).


'skip_varint_Resource.DiskInfo.Source'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    'skip_varint_Resource.DiskInfo.Source'(Rest, Z1, Z2, F1,
					   F2, F3);
'skip_varint_Resource.DiskInfo.Source'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest, Z1,
						  Z2, F1, F2, F3).


'skip_length_delimited_Resource.DiskInfo.Source'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_Resource.DiskInfo.Source'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3);
'skip_length_delimited_Resource.DiskInfo.Source'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest2, 0,
						  0, F1, F2, F3).


'skip_32_Resource.DiskInfo.Source'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest, Z1,
						  Z2, F1, F2, F3).


'skip_64_Resource.DiskInfo.Source'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Resource.DiskInfo.Source'(Rest, Z1,
						  Z2, F1, F2, F3).


d_msg_Parameters(Bin) ->
    dfp_read_field_def_Parameters(Bin, 0, 0, id([])).

dfp_read_field_def_Parameters(<<10, Rest/binary>>, Z1,
			      Z2, F1) ->
    d_field_Parameters_parameter(Rest, Z1, Z2, F1);
dfp_read_field_def_Parameters(<<>>, 0, 0, F1) ->
    #'Parameters'{parameter = lists_reverse(F1)};
dfp_read_field_def_Parameters(Other, Z1, Z2, F1) ->
    dg_read_field_def_Parameters(Other, Z1, Z2, F1).

dg_read_field_def_Parameters(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Parameters(Rest, N + 7, X bsl N + Acc,
				 F1);
dg_read_field_def_Parameters(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Parameters_parameter(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Parameters(Rest, 0, 0, F1);
	    1 -> skip_64_Parameters(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Parameters(Rest, 0, 0, F1);
	    5 -> skip_32_Parameters(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Parameters(<<>>, 0, 0, F1) ->
    #'Parameters'{parameter = lists_reverse(F1)}.

d_field_Parameters_parameter(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    d_field_Parameters_parameter(Rest, N + 7, X bsl N + Acc,
				 F1);
d_field_Parameters_parameter(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Parameter(Bs),
    dfp_read_field_def_Parameters(Rest2, 0, 0,
				  cons(NewFValue, F1)).


skip_varint_Parameters(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    skip_varint_Parameters(Rest, Z1, Z2, F1);
skip_varint_Parameters(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    dfp_read_field_def_Parameters(Rest, Z1, Z2, F1).


skip_length_delimited_Parameters(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Parameters(Rest, N + 7,
				     X bsl N + Acc, F1);
skip_length_delimited_Parameters(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Parameters(Rest2, 0, 0, F1).


skip_32_Parameters(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Parameters(Rest, Z1, Z2, F1).


skip_64_Parameters(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Parameters(Rest, Z1, Z2, F1).


'd_msg_Volume.Source.DockerVolume'(Bin) ->
    'dfp_read_field_def_Volume.Source.DockerVolume'(Bin, 0,
						    0, id(undefined),
						    id(undefined),
						    id(undefined)).

'dfp_read_field_def_Volume.Source.DockerVolume'(<<10,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3) ->
    'd_field_Volume.Source.DockerVolume_driver'(Rest, Z1,
						Z2, F1, F2, F3);
'dfp_read_field_def_Volume.Source.DockerVolume'(<<18,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3) ->
    'd_field_Volume.Source.DockerVolume_name'(Rest, Z1, Z2,
					      F1, F2, F3);
'dfp_read_field_def_Volume.Source.DockerVolume'(<<26,
						  Rest/binary>>,
						Z1, Z2, F1, F2, F3) ->
    'd_field_Volume.Source.DockerVolume_driver_options'(Rest,
							Z1, Z2, F1, F2, F3);
'dfp_read_field_def_Volume.Source.DockerVolume'(<<>>, 0,
						0, F1, F2, F3) ->
    #'Volume.Source.DockerVolume'{driver = F1, name = F2,
				  driver_options = F3};
'dfp_read_field_def_Volume.Source.DockerVolume'(Other,
						Z1, Z2, F1, F2, F3) ->
    'dg_read_field_def_Volume.Source.DockerVolume'(Other,
						   Z1, Z2, F1, F2, F3).

'dg_read_field_def_Volume.Source.DockerVolume'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_Volume.Source.DockerVolume'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3);
'dg_read_field_def_Volume.Source.DockerVolume'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Volume.Source.DockerVolume_driver'(Rest, 0, 0,
						      F1, F2, F3);
      18 ->
	  'd_field_Volume.Source.DockerVolume_name'(Rest, 0, 0,
						    F1, F2, F3);
      26 ->
	  'd_field_Volume.Source.DockerVolume_driver_options'(Rest,
							      0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Volume.Source.DockerVolume'(Rest, 0, 0, F1,
							 F2, F3);
	    1 ->
		'skip_64_Volume.Source.DockerVolume'(Rest, 0, 0, F1, F2,
						     F3);
	    2 ->
		'skip_length_delimited_Volume.Source.DockerVolume'(Rest,
								   0, 0, F1, F2,
								   F3);
	    5 ->
		'skip_32_Volume.Source.DockerVolume'(Rest, 0, 0, F1, F2,
						     F3)
	  end
    end;
'dg_read_field_def_Volume.Source.DockerVolume'(<<>>, 0,
					       0, F1, F2, F3) ->
    #'Volume.Source.DockerVolume'{driver = F1, name = F2,
				  driver_options = F3}.

'd_field_Volume.Source.DockerVolume_driver'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Volume.Source.DockerVolume_driver'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3);
'd_field_Volume.Source.DockerVolume_driver'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest2,
						    0, 0, NewFValue, F2, F3).


'd_field_Volume.Source.DockerVolume_name'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Volume.Source.DockerVolume_name'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3);
'd_field_Volume.Source.DockerVolume_name'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest2,
						    0, 0, F1, NewFValue, F3).


'd_field_Volume.Source.DockerVolume_driver_options'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Volume.Source.DockerVolume_driver_options'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3);
'd_field_Volume.Source.DockerVolume_driver_options'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Parameters(Bs),
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest2,
						    0, 0, F1, F2,
						    if F3 == undefined ->
							   NewFValue;
						       true ->
							   merge_msg_Parameters(F3,
										NewFValue)
						    end).


'skip_varint_Volume.Source.DockerVolume'(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'skip_varint_Volume.Source.DockerVolume'(Rest, Z1, Z2,
					     F1, F2, F3);
'skip_varint_Volume.Source.DockerVolume'(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest,
						    Z1, Z2, F1, F2, F3).


'skip_length_delimited_Volume.Source.DockerVolume'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_Volume.Source.DockerVolume'(Rest,
						       N + 7, X bsl N + Acc, F1,
						       F2, F3);
'skip_length_delimited_Volume.Source.DockerVolume'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest2,
						    0, 0, F1, F2, F3).


'skip_32_Volume.Source.DockerVolume'(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest,
						    Z1, Z2, F1, F2, F3).


'skip_64_Volume.Source.DockerVolume'(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Volume.Source.DockerVolume'(Rest,
						    Z1, Z2, F1, F2, F3).


'd_msg_Volume.Source'(Bin) ->
    'dfp_read_field_def_Volume.Source'(Bin, 0, 0,
				       id(undefined), id(undefined)).

'dfp_read_field_def_Volume.Source'(<<8, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'd_field_Volume.Source_type'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Volume.Source'(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'd_field_Volume.Source_docker_volume'(Rest, Z1, Z2, F1,
					  F2);
'dfp_read_field_def_Volume.Source'(<<>>, 0, 0, F1,
				   F2) ->
    #'Volume.Source'{type = F1, docker_volume = F2};
'dfp_read_field_def_Volume.Source'(Other, Z1, Z2, F1,
				   F2) ->
    'dg_read_field_def_Volume.Source'(Other, Z1, Z2, F1,
				      F2).

'dg_read_field_def_Volume.Source'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Volume.Source'(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
'dg_read_field_def_Volume.Source'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> 'd_field_Volume.Source_type'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_Volume.Source_docker_volume'(Rest, 0, 0, F1,
						F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Volume.Source'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Volume.Source'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Volume.Source'(Rest, 0, 0, F1,
						      F2);
	    5 -> 'skip_32_Volume.Source'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Volume.Source'(<<>>, 0, 0, F1, F2) ->
    #'Volume.Source'{type = F1, docker_volume = F2}.

'd_field_Volume.Source_type'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Volume.Source_type'(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
'd_field_Volume.Source_type'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Volume.Source.Type'(Tmp),
    'dfp_read_field_def_Volume.Source'(Rest, 0, 0,
				       NewFValue, F2).


'd_field_Volume.Source_docker_volume'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Volume.Source_docker_volume'(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
'd_field_Volume.Source_docker_volume'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Volume.Source.DockerVolume'(Bs),
    'dfp_read_field_def_Volume.Source'(Rest2, 0, 0, F1,
				       if F2 == undefined -> NewFValue;
					  true ->
					      'merge_msg_Volume.Source.DockerVolume'(F2,
										     NewFValue)
				       end).


'skip_varint_Volume.Source'(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    'skip_varint_Volume.Source'(Rest, Z1, Z2, F1, F2);
'skip_varint_Volume.Source'(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Volume.Source'(Rest, Z1, Z2, F1,
				       F2).


'skip_length_delimited_Volume.Source'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Volume.Source'(Rest, N + 7,
					  X bsl N + Acc, F1, F2);
'skip_length_delimited_Volume.Source'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Volume.Source'(Rest2, 0, 0, F1, F2).


'skip_32_Volume.Source'(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    'dfp_read_field_def_Volume.Source'(Rest, Z1, Z2, F1,
				       F2).


'skip_64_Volume.Source'(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2) ->
    'dfp_read_field_def_Volume.Source'(Rest, Z1, Z2, F1,
				       F2).


d_msg_Credential(Bin) ->
    dfp_read_field_def_Credential(Bin, 0, 0, id(undefined),
				  id(undefined)).

dfp_read_field_def_Credential(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_Credential_principal(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Credential(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2) ->
    d_field_Credential_secret(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Credential(<<>>, 0, 0, F1, F2) ->
    #'Credential'{principal = F1, secret = F2};
dfp_read_field_def_Credential(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Credential(Other, Z1, Z2, F1, F2).

dg_read_field_def_Credential(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Credential(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
dg_read_field_def_Credential(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Credential_principal(Rest, 0, 0, F1, F2);
      18 -> d_field_Credential_secret(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Credential(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Credential(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_Credential(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Credential(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Credential(<<>>, 0, 0, F1, F2) ->
    #'Credential'{principal = F1, secret = F2}.

d_field_Credential_principal(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    d_field_Credential_principal(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
d_field_Credential_principal(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Credential(Rest2, 0, 0, NewFValue,
				  F2).


d_field_Credential_secret(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 57 ->
    d_field_Credential_secret(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
d_field_Credential_secret(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Credential(Rest2, 0, 0, F1,
				  NewFValue).


skip_varint_Credential(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    skip_varint_Credential(Rest, Z1, Z2, F1, F2);
skip_varint_Credential(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2) ->
    dfp_read_field_def_Credential(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Credential(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Credential(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
skip_length_delimited_Credential(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Credential(Rest2, 0, 0, F1, F2).


skip_32_Credential(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_Credential(Rest, Z1, Z2, F1, F2).


skip_64_Credential(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2) ->
    dfp_read_field_def_Credential(Rest, Z1, Z2, F1, F2).


'd_msg_Image.Docker'(Bin) ->
    'dfp_read_field_def_Image.Docker'(Bin, 0, 0,
				      id(undefined), id(undefined)).

'dfp_read_field_def_Image.Docker'(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'd_field_Image.Docker_name'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Image.Docker'(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2) ->
    'd_field_Image.Docker_credential'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Image.Docker'(<<>>, 0, 0, F1, F2) ->
    #'Image.Docker'{name = F1, credential = F2};
'dfp_read_field_def_Image.Docker'(Other, Z1, Z2, F1,
				  F2) ->
    'dg_read_field_def_Image.Docker'(Other, Z1, Z2, F1, F2).

'dg_read_field_def_Image.Docker'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Image.Docker'(Rest, N + 7,
				     X bsl N + Acc, F1, F2);
'dg_read_field_def_Image.Docker'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Image.Docker_name'(Rest, 0, 0, F1, F2);
      18 ->
	  'd_field_Image.Docker_credential'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Image.Docker'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Image.Docker'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Image.Docker'(Rest, 0, 0, F1,
						     F2);
	    5 -> 'skip_32_Image.Docker'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Image.Docker'(<<>>, 0, 0, F1, F2) ->
    #'Image.Docker'{name = F1, credential = F2}.

'd_field_Image.Docker_name'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Image.Docker_name'(Rest, N + 7, X bsl N + Acc,
				F1, F2);
'd_field_Image.Docker_name'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Image.Docker'(Rest2, 0, 0,
				      NewFValue, F2).


'd_field_Image.Docker_credential'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Image.Docker_credential'(Rest, N + 7,
				      X bsl N + Acc, F1, F2);
'd_field_Image.Docker_credential'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Credential(Bs),
    'dfp_read_field_def_Image.Docker'(Rest2, 0, 0, F1,
				      if F2 == undefined -> NewFValue;
					 true ->
					     merge_msg_Credential(F2, NewFValue)
				      end).


'skip_varint_Image.Docker'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2) ->
    'skip_varint_Image.Docker'(Rest, Z1, Z2, F1, F2);
'skip_varint_Image.Docker'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Image.Docker'(Rest, Z1, Z2, F1, F2).


'skip_length_delimited_Image.Docker'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Image.Docker'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'skip_length_delimited_Image.Docker'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Image.Docker'(Rest2, 0, 0, F1, F2).


'skip_32_Image.Docker'(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2) ->
    'dfp_read_field_def_Image.Docker'(Rest, Z1, Z2, F1, F2).


'skip_64_Image.Docker'(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2) ->
    'dfp_read_field_def_Image.Docker'(Rest, Z1, Z2, F1, F2).


d_msg_Label(Bin) ->
    dfp_read_field_def_Label(Bin, 0, 0, id(undefined),
			     id(undefined)).

dfp_read_field_def_Label(<<10, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    d_field_Label_key(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Label(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2) ->
    d_field_Label_value(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Label(<<>>, 0, 0, F1, F2) ->
    #'Label'{key = F1, value = F2};
dfp_read_field_def_Label(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Label(Other, Z1, Z2, F1, F2).

dg_read_field_def_Label(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Label(Rest, N + 7, X bsl N + Acc, F1,
			    F2);
dg_read_field_def_Label(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Label_key(Rest, 0, 0, F1, F2);
      18 -> d_field_Label_value(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Label(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Label(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_Label(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Label(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Label(<<>>, 0, 0, F1, F2) ->
    #'Label'{key = F1, value = F2}.

d_field_Label_key(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2)
    when N < 57 ->
    d_field_Label_key(Rest, N + 7, X bsl N + Acc, F1, F2);
d_field_Label_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Label(Rest2, 0, 0, NewFValue, F2).


d_field_Label_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2)
    when N < 57 ->
    d_field_Label_value(Rest, N + 7, X bsl N + Acc, F1, F2);
d_field_Label_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Label(Rest2, 0, 0, F1, NewFValue).


skip_varint_Label(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    skip_varint_Label(Rest, Z1, Z2, F1, F2);
skip_varint_Label(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2) ->
    dfp_read_field_def_Label(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Label(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Label(Rest, N + 7, X bsl N + Acc,
				F1, F2);
skip_length_delimited_Label(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Label(Rest2, 0, 0, F1, F2).


skip_32_Label(<<_:32, Rest/binary>>, Z1, Z2, F1, F2) ->
    dfp_read_field_def_Label(Rest, Z1, Z2, F1, F2).


skip_64_Label(<<_:64, Rest/binary>>, Z1, Z2, F1, F2) ->
    dfp_read_field_def_Label(Rest, Z1, Z2, F1, F2).


d_msg_Labels(Bin) ->
    dfp_read_field_def_Labels(Bin, 0, 0, id([])).

dfp_read_field_def_Labels(<<10, Rest/binary>>, Z1, Z2,
			  F1) ->
    d_field_Labels_labels(Rest, Z1, Z2, F1);
dfp_read_field_def_Labels(<<>>, 0, 0, F1) ->
    #'Labels'{labels = lists_reverse(F1)};
dfp_read_field_def_Labels(Other, Z1, Z2, F1) ->
    dg_read_field_def_Labels(Other, Z1, Z2, F1).

dg_read_field_def_Labels(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Labels(Rest, N + 7, X bsl N + Acc,
			     F1);
dg_read_field_def_Labels(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Labels_labels(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Labels(Rest, 0, 0, F1);
	    1 -> skip_64_Labels(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Labels(Rest, 0, 0, F1);
	    5 -> skip_32_Labels(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Labels(<<>>, 0, 0, F1) ->
    #'Labels'{labels = lists_reverse(F1)}.

d_field_Labels_labels(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1)
    when N < 57 ->
    d_field_Labels_labels(Rest, N + 7, X bsl N + Acc, F1);
d_field_Labels_labels(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Label(Bs),
    dfp_read_field_def_Labels(Rest2, 0, 0,
			      cons(NewFValue, F1)).


skip_varint_Labels(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1) ->
    skip_varint_Labels(Rest, Z1, Z2, F1);
skip_varint_Labels(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1) ->
    dfp_read_field_def_Labels(Rest, Z1, Z2, F1).


skip_length_delimited_Labels(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Labels(Rest, N + 7, X bsl N + Acc,
				 F1);
skip_length_delimited_Labels(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Labels(Rest2, 0, 0, F1).


skip_32_Labels(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Labels(Rest, Z1, Z2, F1).


skip_64_Labels(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Labels(Rest, Z1, Z2, F1).


'd_msg_Image.Appc'(Bin) ->
    'dfp_read_field_def_Image.Appc'(Bin, 0, 0,
				    id(undefined), id(undefined),
				    id(undefined)).

'dfp_read_field_def_Image.Appc'(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    'd_field_Image.Appc_name'(Rest, Z1, Z2, F1, F2, F3);
'dfp_read_field_def_Image.Appc'(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    'd_field_Image.Appc_id'(Rest, Z1, Z2, F1, F2, F3);
'dfp_read_field_def_Image.Appc'(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3) ->
    'd_field_Image.Appc_labels'(Rest, Z1, Z2, F1, F2, F3);
'dfp_read_field_def_Image.Appc'(<<>>, 0, 0, F1, F2,
				F3) ->
    #'Image.Appc'{name = F1, id = F2, labels = F3};
'dfp_read_field_def_Image.Appc'(Other, Z1, Z2, F1, F2,
				F3) ->
    'dg_read_field_def_Image.Appc'(Other, Z1, Z2, F1, F2,
				   F3).

'dg_read_field_def_Image.Appc'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_Image.Appc'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_Image.Appc'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Image.Appc_name'(Rest, 0, 0, F1, F2, F3);
      18 -> 'd_field_Image.Appc_id'(Rest, 0, 0, F1, F2, F3);
      26 ->
	  'd_field_Image.Appc_labels'(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Image.Appc'(Rest, 0, 0, F1, F2, F3);
	    1 -> 'skip_64_Image.Appc'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_Image.Appc'(Rest, 0, 0, F1, F2,
						   F3);
	    5 -> 'skip_32_Image.Appc'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_Image.Appc'(<<>>, 0, 0, F1, F2,
			       F3) ->
    #'Image.Appc'{name = F1, id = F2, labels = F3}.

'd_field_Image.Appc_name'(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Image.Appc_name'(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
'd_field_Image.Appc_name'(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Image.Appc'(Rest2, 0, 0, NewFValue,
				    F2, F3).


'd_field_Image.Appc_id'(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Image.Appc_id'(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3);
'd_field_Image.Appc_id'(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Image.Appc'(Rest2, 0, 0, F1,
				    NewFValue, F3).


'd_field_Image.Appc_labels'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Image.Appc_labels'(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
'd_field_Image.Appc_labels'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    'dfp_read_field_def_Image.Appc'(Rest2, 0, 0, F1, F2,
				    if F3 == undefined -> NewFValue;
				       true -> merge_msg_Labels(F3, NewFValue)
				    end).


'skip_varint_Image.Appc'(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3) ->
    'skip_varint_Image.Appc'(Rest, Z1, Z2, F1, F2, F3);
'skip_varint_Image.Appc'(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3) ->
    'dfp_read_field_def_Image.Appc'(Rest, Z1, Z2, F1, F2,
				    F3).


'skip_length_delimited_Image.Appc'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_Image.Appc'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_Image.Appc'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Image.Appc'(Rest2, 0, 0, F1, F2,
				    F3).


'skip_32_Image.Appc'(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3) ->
    'dfp_read_field_def_Image.Appc'(Rest, Z1, Z2, F1, F2,
				    F3).


'skip_64_Image.Appc'(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3) ->
    'dfp_read_field_def_Image.Appc'(Rest, Z1, Z2, F1, F2,
				    F3).


d_msg_Image(Bin) ->
    dfp_read_field_def_Image(Bin, 0, 0, id(undefined),
			     id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_Image(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, F4) ->
    d_field_Image_type(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Image(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4) ->
    d_field_Image_appc(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Image(<<26, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4) ->
    d_field_Image_docker(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Image(<<32, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4) ->
    d_field_Image_cached(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Image(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Image'{type = F1, appc = F2, docker = F3,
	     cached = F4};
dfp_read_field_def_Image(Other, Z1, Z2, F1, F2, F3,
			 F4) ->
    dg_read_field_def_Image(Other, Z1, Z2, F1, F2, F3, F4).

dg_read_field_def_Image(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_Image(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4);
dg_read_field_def_Image(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Image_type(Rest, 0, 0, F1, F2, F3, F4);
      18 -> d_field_Image_appc(Rest, 0, 0, F1, F2, F3, F4);
      26 -> d_field_Image_docker(Rest, 0, 0, F1, F2, F3, F4);
      32 -> d_field_Image_cached(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Image(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_Image(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_Image(Rest, 0, 0, F1, F2, F3, F4);
	    5 -> skip_32_Image(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_Image(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Image'{type = F1, appc = F2, docker = F3,
	     cached = F4}.

d_field_Image_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4)
    when N < 57 ->
    d_field_Image_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4);
d_field_Image_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Image.Type'(Tmp),
    dfp_read_field_def_Image(Rest, 0, 0, NewFValue, F2, F3,
			     F4).


d_field_Image_appc(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4)
    when N < 57 ->
    d_field_Image_appc(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4);
d_field_Image_appc(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Image.Appc'(Bs),
    dfp_read_field_def_Image(Rest2, 0, 0, F1,
			     if F2 == undefined -> NewFValue;
				true -> 'merge_msg_Image.Appc'(F2, NewFValue)
			     end,
			     F3, F4).


d_field_Image_docker(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4)
    when N < 57 ->
    d_field_Image_docker(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4);
d_field_Image_docker(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Image.Docker'(Bs),
    dfp_read_field_def_Image(Rest2, 0, 0, F1, F2,
			     if F3 == undefined -> NewFValue;
				true -> 'merge_msg_Image.Docker'(F3, NewFValue)
			     end,
			     F4).


d_field_Image_cached(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4)
    when N < 57 ->
    d_field_Image_cached(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4);
d_field_Image_cached(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_Image(Rest, 0, 0, F1, F2, F3,
			     NewFValue).


skip_varint_Image(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4) ->
    skip_varint_Image(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_Image(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4) ->
    dfp_read_field_def_Image(Rest, Z1, Z2, F1, F2, F3, F4).


skip_length_delimited_Image(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_Image(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4);
skip_length_delimited_Image(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Image(Rest2, 0, 0, F1, F2, F3, F4).


skip_32_Image(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4) ->
    dfp_read_field_def_Image(Rest, Z1, Z2, F1, F2, F3, F4).


skip_64_Image(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4) ->
    dfp_read_field_def_Image(Rest, Z1, Z2, F1, F2, F3, F4).


d_msg_Volume(Bin) ->
    dfp_read_field_def_Volume(Bin, 0, 0, id(undefined),
			      id(undefined), id(undefined), id(undefined),
			      id(undefined)).

dfp_read_field_def_Volume(<<24, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    d_field_Volume_mode(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Volume(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    d_field_Volume_container_path(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5);
dfp_read_field_def_Volume(<<18, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    d_field_Volume_host_path(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
dfp_read_field_def_Volume(<<34, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    d_field_Volume_image(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Volume(<<42, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5) ->
    d_field_Volume_source(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Volume(<<>>, 0, 0, F1, F2, F3, F4,
			  F5) ->
    #'Volume'{mode = F1, container_path = F2,
	      host_path = F3, image = F4, source = F5};
dfp_read_field_def_Volume(Other, Z1, Z2, F1, F2, F3, F4,
			  F5) ->
    dg_read_field_def_Volume(Other, Z1, Z2, F1, F2, F3, F4,
			     F5).

dg_read_field_def_Volume(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_Volume(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
dg_read_field_def_Volume(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      24 ->
	  d_field_Volume_mode(Rest, 0, 0, F1, F2, F3, F4, F5);
      10 ->
	  d_field_Volume_container_path(Rest, 0, 0, F1, F2, F3,
					F4, F5);
      18 ->
	  d_field_Volume_host_path(Rest, 0, 0, F1, F2, F3, F4,
				   F5);
      34 ->
	  d_field_Volume_image(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_Volume_source(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Volume(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_Volume(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_Volume(Rest, 0, 0, F1, F2, F3, F4,
					     F5);
	    5 -> skip_32_Volume(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_Volume(<<>>, 0, 0, F1, F2, F3, F4,
			 F5) ->
    #'Volume'{mode = F1, container_path = F2,
	      host_path = F3, image = F4, source = F5}.

d_field_Volume_mode(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Volume_mode(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5);
d_field_Volume_mode(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Volume.Mode'(Tmp),
    dfp_read_field_def_Volume(Rest, 0, 0, NewFValue, F2, F3,
			      F4, F5).


d_field_Volume_container_path(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Volume_container_path(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_Volume_container_path(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Volume(Rest2, 0, 0, F1, NewFValue,
			      F3, F4, F5).


d_field_Volume_host_path(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Volume_host_path(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
d_field_Volume_host_path(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Volume(Rest2, 0, 0, F1, F2,
			      NewFValue, F4, F5).


d_field_Volume_image(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Volume_image(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_Volume_image(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Image(Bs),
    dfp_read_field_def_Volume(Rest2, 0, 0, F1, F2, F3,
			      if F4 == undefined -> NewFValue;
				 true -> merge_msg_Image(F4, NewFValue)
			      end,
			      F5).


d_field_Volume_source(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Volume_source(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5);
d_field_Volume_source(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Volume.Source'(Bs),
    dfp_read_field_def_Volume(Rest2, 0, 0, F1, F2, F3, F4,
			      if F5 == undefined -> NewFValue;
				 true ->
				     'merge_msg_Volume.Source'(F5, NewFValue)
			      end).


skip_varint_Volume(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4, F5) ->
    skip_varint_Volume(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_Volume(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2, F3, F4, F5) ->
    dfp_read_field_def_Volume(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5).


skip_length_delimited_Volume(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_Volume(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5);
skip_length_delimited_Volume(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Volume(Rest2, 0, 0, F1, F2, F3, F4,
			      F5).


skip_32_Volume(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4, F5) ->
    dfp_read_field_def_Volume(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5).


skip_64_Volume(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
	       F3, F4, F5) ->
    dfp_read_field_def_Volume(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5).


'd_msg_Resource.DiskInfo.Persistence'(Bin) ->
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Bin,
						       0, 0, id(undefined),
						       id(undefined)).

'dfp_read_field_def_Resource.DiskInfo.Persistence'(<<10,
						     Rest/binary>>,
						   Z1, Z2, F1, F2) ->
    'd_field_Resource.DiskInfo.Persistence_id'(Rest, Z1, Z2,
					       F1, F2);
'dfp_read_field_def_Resource.DiskInfo.Persistence'(<<18,
						     Rest/binary>>,
						   Z1, Z2, F1, F2) ->
    'd_field_Resource.DiskInfo.Persistence_principal'(Rest,
						      Z1, Z2, F1, F2);
'dfp_read_field_def_Resource.DiskInfo.Persistence'(<<>>,
						   0, 0, F1, F2) ->
    #'Resource.DiskInfo.Persistence'{id = F1,
				     principal = F2};
'dfp_read_field_def_Resource.DiskInfo.Persistence'(Other,
						   Z1, Z2, F1, F2) ->
    'dg_read_field_def_Resource.DiskInfo.Persistence'(Other,
						      Z1, Z2, F1, F2).

'dg_read_field_def_Resource.DiskInfo.Persistence'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.DiskInfo.Persistence'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2);
'dg_read_field_def_Resource.DiskInfo.Persistence'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Resource.DiskInfo.Persistence_id'(Rest, 0, 0,
						     F1, F2);
      18 ->
	  'd_field_Resource.DiskInfo.Persistence_principal'(Rest,
							    0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Resource.DiskInfo.Persistence'(Rest, 0, 0,
							    F1, F2);
	    1 ->
		'skip_64_Resource.DiskInfo.Persistence'(Rest, 0, 0, F1,
							F2);
	    2 ->
		'skip_length_delimited_Resource.DiskInfo.Persistence'(Rest,
								      0, 0, F1,
								      F2);
	    5 ->
		'skip_32_Resource.DiskInfo.Persistence'(Rest, 0, 0, F1,
							F2)
	  end
    end;
'dg_read_field_def_Resource.DiskInfo.Persistence'(<<>>,
						  0, 0, F1, F2) ->
    #'Resource.DiskInfo.Persistence'{id = F1,
				     principal = F2}.

'd_field_Resource.DiskInfo.Persistence_id'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Persistence_id'(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
'd_field_Resource.DiskInfo.Persistence_id'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Rest2,
						       0, 0, NewFValue, F2).


'd_field_Resource.DiskInfo.Persistence_principal'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Resource.DiskInfo.Persistence_principal'(Rest,
						      N + 7, X bsl N + Acc, F1,
						      F2);
'd_field_Resource.DiskInfo.Persistence_principal'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Rest2,
						       0, 0, F1, NewFValue).


'skip_varint_Resource.DiskInfo.Persistence'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'skip_varint_Resource.DiskInfo.Persistence'(Rest, Z1,
						Z2, F1, F2);
'skip_varint_Resource.DiskInfo.Persistence'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Rest,
						       Z1, Z2, F1, F2).


'skip_length_delimited_Resource.DiskInfo.Persistence'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Resource.DiskInfo.Persistence'(Rest,
							  N + 7, X bsl N + Acc,
							  F1, F2);
'skip_length_delimited_Resource.DiskInfo.Persistence'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Rest2,
						       0, 0, F1, F2).


'skip_32_Resource.DiskInfo.Persistence'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Rest,
						       Z1, Z2, F1, F2).


'skip_64_Resource.DiskInfo.Persistence'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Resource.DiskInfo.Persistence'(Rest,
						       Z1, Z2, F1, F2).


'd_msg_Resource.DiskInfo'(Bin) ->
    'dfp_read_field_def_Resource.DiskInfo'(Bin, 0, 0,
					   id(undefined), id(undefined),
					   id(undefined)).

'dfp_read_field_def_Resource.DiskInfo'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    'd_field_Resource.DiskInfo_persistence'(Rest, Z1, Z2,
					    F1, F2, F3);
'dfp_read_field_def_Resource.DiskInfo'(<<18,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    'd_field_Resource.DiskInfo_volume'(Rest, Z1, Z2, F1, F2,
				       F3);
'dfp_read_field_def_Resource.DiskInfo'(<<26,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3) ->
    'd_field_Resource.DiskInfo_source'(Rest, Z1, Z2, F1, F2,
				       F3);
'dfp_read_field_def_Resource.DiskInfo'(<<>>, 0, 0, F1,
				       F2, F3) ->
    #'Resource.DiskInfo'{persistence = F1, volume = F2,
			 source = F3};
'dfp_read_field_def_Resource.DiskInfo'(Other, Z1, Z2,
				       F1, F2, F3) ->
    'dg_read_field_def_Resource.DiskInfo'(Other, Z1, Z2, F1,
					  F2, F3).

'dg_read_field_def_Resource.DiskInfo'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.DiskInfo'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_Resource.DiskInfo'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Resource.DiskInfo_persistence'(Rest, 0, 0, F1,
						  F2, F3);
      18 ->
	  'd_field_Resource.DiskInfo_volume'(Rest, 0, 0, F1, F2,
					     F3);
      26 ->
	  'd_field_Resource.DiskInfo_source'(Rest, 0, 0, F1, F2,
					     F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Resource.DiskInfo'(Rest, 0, 0, F1, F2, F3);
	    1 ->
		'skip_64_Resource.DiskInfo'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_Resource.DiskInfo'(Rest, 0, 0,
							  F1, F2, F3);
	    5 -> 'skip_32_Resource.DiskInfo'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_Resource.DiskInfo'(<<>>, 0, 0, F1,
				      F2, F3) ->
    #'Resource.DiskInfo'{persistence = F1, volume = F2,
			 source = F3}.

'd_field_Resource.DiskInfo_persistence'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Resource.DiskInfo_persistence'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3);
'd_field_Resource.DiskInfo_persistence'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.DiskInfo.Persistence'(Bs),
    'dfp_read_field_def_Resource.DiskInfo'(Rest2, 0, 0,
					   if F1 == undefined -> NewFValue;
					      true ->
						  'merge_msg_Resource.DiskInfo.Persistence'(F1,
											    NewFValue)
					   end,
					   F2, F3).


'd_field_Resource.DiskInfo_volume'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Resource.DiskInfo_volume'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
'd_field_Resource.DiskInfo_volume'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Volume(Bs),
    'dfp_read_field_def_Resource.DiskInfo'(Rest2, 0, 0, F1,
					   if F2 == undefined -> NewFValue;
					      true ->
						  merge_msg_Volume(F2,
								   NewFValue)
					   end,
					   F3).


'd_field_Resource.DiskInfo_source'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Resource.DiskInfo_source'(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3);
'd_field_Resource.DiskInfo_source'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.DiskInfo.Source'(Bs),
    'dfp_read_field_def_Resource.DiskInfo'(Rest2, 0, 0, F1,
					   F2,
					   if F3 == undefined -> NewFValue;
					      true ->
						  'merge_msg_Resource.DiskInfo.Source'(F3,
										       NewFValue)
					   end).


'skip_varint_Resource.DiskInfo'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3) ->
    'skip_varint_Resource.DiskInfo'(Rest, Z1, Z2, F1, F2,
				    F3);
'skip_varint_Resource.DiskInfo'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Resource.DiskInfo'(Rest, Z1, Z2, F1,
					   F2, F3).


'skip_length_delimited_Resource.DiskInfo'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_Resource.DiskInfo'(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_Resource.DiskInfo'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.DiskInfo'(Rest2, 0, 0, F1,
					   F2, F3).


'skip_32_Resource.DiskInfo'(<<_:32, Rest/binary>>, Z1,
			    Z2, F1, F2, F3) ->
    'dfp_read_field_def_Resource.DiskInfo'(Rest, Z1, Z2, F1,
					   F2, F3).


'skip_64_Resource.DiskInfo'(<<_:64, Rest/binary>>, Z1,
			    Z2, F1, F2, F3) ->
    'dfp_read_field_def_Resource.DiskInfo'(Rest, Z1, Z2, F1,
					   F2, F3).


'd_msg_Resource.ReservationInfo'(Bin) ->
    'dfp_read_field_def_Resource.ReservationInfo'(Bin, 0, 0,
						  id(undefined), id(undefined)).

'dfp_read_field_def_Resource.ReservationInfo'(<<10,
						Rest/binary>>,
					      Z1, Z2, F1, F2) ->
    'd_field_Resource.ReservationInfo_principal'(Rest, Z1,
						 Z2, F1, F2);
'dfp_read_field_def_Resource.ReservationInfo'(<<18,
						Rest/binary>>,
					      Z1, Z2, F1, F2) ->
    'd_field_Resource.ReservationInfo_labels'(Rest, Z1, Z2,
					      F1, F2);
'dfp_read_field_def_Resource.ReservationInfo'(<<>>, 0,
					      0, F1, F2) ->
    #'Resource.ReservationInfo'{principal = F1,
				labels = F2};
'dfp_read_field_def_Resource.ReservationInfo'(Other, Z1,
					      Z2, F1, F2) ->
    'dg_read_field_def_Resource.ReservationInfo'(Other, Z1,
						 Z2, F1, F2).

'dg_read_field_def_Resource.ReservationInfo'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Resource.ReservationInfo'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'dg_read_field_def_Resource.ReservationInfo'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Resource.ReservationInfo_principal'(Rest, 0, 0,
						       F1, F2);
      18 ->
	  'd_field_Resource.ReservationInfo_labels'(Rest, 0, 0,
						    F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Resource.ReservationInfo'(Rest, 0, 0, F1,
						       F2);
	    1 ->
		'skip_64_Resource.ReservationInfo'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Resource.ReservationInfo'(Rest,
								 0, 0, F1, F2);
	    5 ->
		'skip_32_Resource.ReservationInfo'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Resource.ReservationInfo'(<<>>, 0, 0,
					     F1, F2) ->
    #'Resource.ReservationInfo'{principal = F1,
				labels = F2}.

'd_field_Resource.ReservationInfo_principal'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Resource.ReservationInfo_principal'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'd_field_Resource.ReservationInfo_principal'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Resource.ReservationInfo'(Rest2, 0,
						  0, NewFValue, F2).


'd_field_Resource.ReservationInfo_labels'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Resource.ReservationInfo_labels'(Rest, N + 7,
					      X bsl N + Acc, F1, F2);
'd_field_Resource.ReservationInfo_labels'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    'dfp_read_field_def_Resource.ReservationInfo'(Rest2, 0,
						  0, F1,
						  if F2 == undefined ->
							 NewFValue;
						     true ->
							 merge_msg_Labels(F2,
									  NewFValue)
						  end).


'skip_varint_Resource.ReservationInfo'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    'skip_varint_Resource.ReservationInfo'(Rest, Z1, Z2, F1,
					   F2);
'skip_varint_Resource.ReservationInfo'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Resource.ReservationInfo'(Rest, Z1,
						  Z2, F1, F2).


'skip_length_delimited_Resource.ReservationInfo'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Resource.ReservationInfo'(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2);
'skip_length_delimited_Resource.ReservationInfo'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Resource.ReservationInfo'(Rest2, 0,
						  0, F1, F2).


'skip_32_Resource.ReservationInfo'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Resource.ReservationInfo'(Rest, Z1,
						  Z2, F1, F2).


'skip_64_Resource.ReservationInfo'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Resource.ReservationInfo'(Rest, Z1,
						  Z2, F1, F2).


'd_msg_Value.Set'(Bin) ->
    'dfp_read_field_def_Value.Set'(Bin, 0, 0, id([])).

'dfp_read_field_def_Value.Set'(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    'd_field_Value.Set_item'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Set'(<<>>, 0, 0, F1) ->
    #'Value.Set'{item = lists_reverse(F1)};
'dfp_read_field_def_Value.Set'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Set'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Set'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Set'(Rest, N + 7,
				  X bsl N + Acc, F1);
'dg_read_field_def_Value.Set'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Value.Set_item'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Set'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Set'(Rest, 0, 0, F1);
	    2 -> 'skip_length_delimited_Value.Set'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Set'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Set'(<<>>, 0, 0, F1) ->
    #'Value.Set'{item = lists_reverse(F1)}.

'd_field_Value.Set_item'(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 57 ->
    'd_field_Value.Set_item'(Rest, N + 7, X bsl N + Acc,
			     F1);
'd_field_Value.Set_item'(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Value.Set'(Rest2, 0, 0,
				   cons(NewFValue, F1)).


'skip_varint_Value.Set'(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    'skip_varint_Value.Set'(Rest, Z1, Z2, F1);
'skip_varint_Value.Set'(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    'dfp_read_field_def_Value.Set'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Set'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Set'(Rest, N + 7,
				      X bsl N + Acc, F1);
'skip_length_delimited_Value.Set'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Set'(Rest2, 0, 0, F1).


'skip_32_Value.Set'(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    'dfp_read_field_def_Value.Set'(Rest, Z1, Z2, F1).


'skip_64_Value.Set'(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    'dfp_read_field_def_Value.Set'(Rest, Z1, Z2, F1).


'd_msg_Value.Range'(Bin) ->
    'dfp_read_field_def_Value.Range'(Bin, 0, 0,
				     id(undefined), id(undefined)).

'dfp_read_field_def_Value.Range'(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2) ->
    'd_field_Value.Range_begin'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Value.Range'(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    'd_field_Value.Range_end'(Rest, Z1, Z2, F1, F2);
'dfp_read_field_def_Value.Range'(<<>>, 0, 0, F1, F2) ->
    #'Value.Range'{'begin' = F1, 'end' = F2};
'dfp_read_field_def_Value.Range'(Other, Z1, Z2, F1,
				 F2) ->
    'dg_read_field_def_Value.Range'(Other, Z1, Z2, F1, F2).

'dg_read_field_def_Value.Range'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Range'(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
'dg_read_field_def_Value.Range'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> 'd_field_Value.Range_begin'(Rest, 0, 0, F1, F2);
      16 -> 'd_field_Value.Range_end'(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Range'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Value.Range'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Value.Range'(Rest, 0, 0, F1, F2);
	    5 -> 'skip_32_Value.Range'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Value.Range'(<<>>, 0, 0, F1, F2) ->
    #'Value.Range'{'begin' = F1, 'end' = F2}.

'd_field_Value.Range_begin'(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Value.Range_begin'(Rest, N + 7, X bsl N + Acc,
				F1, F2);
'd_field_Value.Range_begin'(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_Value.Range'(Rest, 0, 0, NewFValue,
				     F2).


'd_field_Value.Range_end'(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 57 ->
    'd_field_Value.Range_end'(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
'd_field_Value.Range_end'(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_Value.Range'(Rest, 0, 0, F1,
				     NewFValue).


'skip_varint_Value.Range'(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    'skip_varint_Value.Range'(Rest, Z1, Z2, F1, F2);
'skip_varint_Value.Range'(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    'dfp_read_field_def_Value.Range'(Rest, Z1, Z2, F1, F2).


'skip_length_delimited_Value.Range'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Value.Range'(Rest, N + 7,
					X bsl N + Acc, F1, F2);
'skip_length_delimited_Value.Range'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Range'(Rest2, 0, 0, F1, F2).


'skip_32_Value.Range'(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    'dfp_read_field_def_Value.Range'(Rest, Z1, Z2, F1, F2).


'skip_64_Value.Range'(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    'dfp_read_field_def_Value.Range'(Rest, Z1, Z2, F1, F2).


'd_msg_Value.Ranges'(Bin) ->
    'dfp_read_field_def_Value.Ranges'(Bin, 0, 0, id([])).

'dfp_read_field_def_Value.Ranges'(<<10, Rest/binary>>,
				  Z1, Z2, F1) ->
    'd_field_Value.Ranges_range'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Ranges'(<<>>, 0, 0, F1) ->
    #'Value.Ranges'{range = lists_reverse(F1)};
'dfp_read_field_def_Value.Ranges'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Ranges'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Ranges'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Ranges'(Rest, N + 7,
				     X bsl N + Acc, F1);
'dg_read_field_def_Value.Ranges'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Value.Ranges_range'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Ranges'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Ranges'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Value.Ranges'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Ranges'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Ranges'(<<>>, 0, 0, F1) ->
    #'Value.Ranges'{range = lists_reverse(F1)}.

'd_field_Value.Ranges_range'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    'd_field_Value.Ranges_range'(Rest, N + 7, X bsl N + Acc,
				 F1);
'd_field_Value.Ranges_range'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Range'(Bs),
    'dfp_read_field_def_Value.Ranges'(Rest2, 0, 0,
				      cons(NewFValue, F1)).


'skip_varint_Value.Ranges'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'skip_varint_Value.Ranges'(Rest, Z1, Z2, F1);
'skip_varint_Value.Ranges'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'dfp_read_field_def_Value.Ranges'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Ranges'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Ranges'(Rest, N + 7,
					 X bsl N + Acc, F1);
'skip_length_delimited_Value.Ranges'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Ranges'(Rest2, 0, 0, F1).


'skip_32_Value.Ranges'(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Ranges'(Rest, Z1, Z2, F1).


'skip_64_Value.Ranges'(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Ranges'(Rest, Z1, Z2, F1).


'd_msg_Value.Scalar'(Bin) ->
    'dfp_read_field_def_Value.Scalar'(Bin, 0, 0,
				      id(undefined)).

'dfp_read_field_def_Value.Scalar'(<<9, Rest/binary>>,
				  Z1, Z2, F1) ->
    'd_field_Value.Scalar_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Scalar'(<<>>, 0, 0, F1) ->
    #'Value.Scalar'{value = F1};
'dfp_read_field_def_Value.Scalar'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Scalar'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Scalar'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Scalar'(Rest, N + 7,
				     X bsl N + Acc, F1);
'dg_read_field_def_Value.Scalar'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 -> 'd_field_Value.Scalar_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Scalar'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Scalar'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Value.Scalar'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Scalar'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Scalar'(<<>>, 0, 0, F1) ->
    #'Value.Scalar'{value = F1}.

'd_field_Value.Scalar_value'(<<Value:64/little-float,
			       Rest/binary>>,
			     Z1, Z2, _) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, Value).


'skip_varint_Value.Scalar'(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'skip_varint_Value.Scalar'(Rest, Z1, Z2, F1);
'skip_varint_Value.Scalar'(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Scalar'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Scalar'(Rest, N + 7,
					 X bsl N + Acc, F1);
'skip_length_delimited_Value.Scalar'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Scalar'(Rest2, 0, 0, F1).


'skip_32_Value.Scalar'(<<_:32, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, F1).


'skip_64_Value.Scalar'(<<_:64, Rest/binary>>, Z1, Z2,
		       F1) ->
    'dfp_read_field_def_Value.Scalar'(Rest, Z1, Z2, F1).


d_msg_Resource(Bin) ->
    dfp_read_field_def_Resource(Bin, 0, 0, id(undefined),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined)).

dfp_read_field_def_Resource(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9);
dfp_read_field_def_Resource(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9);
dfp_read_field_def_Resource(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_scalar(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9);
dfp_read_field_def_Resource(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_ranges(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9);
dfp_read_field_def_Resource(<<42, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_set(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9);
dfp_read_field_def_Resource(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_role(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9);
dfp_read_field_def_Resource(<<66, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_reservation(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9);
dfp_read_field_def_Resource(<<58, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_disk(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9);
dfp_read_field_def_Resource(<<74, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Resource_revocable(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9);
dfp_read_field_def_Resource(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9) ->
    #'Resource'{name = F1, type = F2, scalar = F3,
		ranges = F4, set = F5, role = F6, reservation = F7,
		disk = F8, revocable = F9};
dfp_read_field_def_Resource(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7, F8, F9) ->
    dg_read_field_def_Resource(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9).

dg_read_field_def_Resource(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 32 - 7 ->
    dg_read_field_def_Resource(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9);
dg_read_field_def_Resource(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Resource_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9);
      16 ->
	  d_field_Resource_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9);
      26 ->
	  d_field_Resource_scalar(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9);
      34 ->
	  d_field_Resource_ranges(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9);
      42 ->
	  d_field_Resource_set(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9);
      50 ->
	  d_field_Resource_role(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9);
      66 ->
	  d_field_Resource_reservation(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9);
      58 ->
	  d_field_Resource_disk(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9);
      74 ->
	  d_field_Resource_revocable(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Resource(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9);
	    1 ->
		skip_64_Resource(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9);
	    2 ->
		skip_length_delimited_Resource(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, F8, F9);
	    5 ->
		skip_32_Resource(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9)
	  end
    end;
dg_read_field_def_Resource(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9) ->
    #'Resource'{name = F1, type = F2, scalar = F3,
		ranges = F4, set = F5, role = F6, reservation = F7,
		disk = F8, revocable = F9}.

d_field_Resource_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Resource(Rest2, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7, F8, F9).


d_field_Resource_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_type(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7, F8, F9) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Value.Type'(Tmp),
    dfp_read_field_def_Resource(Rest, 0, 0, F1, NewFValue,
				F3, F4, F5, F6, F7, F8, F9).


d_field_Resource_scalar(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_scalar(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_scalar(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Scalar'(Bs),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2,
				if F3 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Value.Scalar'(F3, NewFValue)
				end,
				F4, F5, F6, F7, F8, F9).


d_field_Resource_ranges(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_ranges(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_ranges(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Ranges'(Bs),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3,
				if F4 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Value.Ranges'(F4, NewFValue)
				end,
				F5, F6, F7, F8, F9).


d_field_Resource_set(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_set(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_set(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Set'(Bs),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				if F5 == undefined -> NewFValue;
				   true -> 'merge_msg_Value.Set'(F5, NewFValue)
				end,
				F6, F7, F8, F9).


d_field_Resource_role(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_role(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_role(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, _, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, NewFValue, F7, F8, F9).


d_field_Resource_reservation(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_reservation(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_reservation(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.ReservationInfo'(Bs),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6,
				if F7 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Resource.ReservationInfo'(F7,
									    NewFValue)
				end,
				F8, F9).


d_field_Resource_disk(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_disk(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_disk(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.DiskInfo'(Bs),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7,
				if F8 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Resource.DiskInfo'(F8,
								     NewFValue)
				end,
				F9).


d_field_Resource_revocable(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Resource_revocable(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Resource_revocable(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Resource.RevocableInfo'(Bs),
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8,
				if F9 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Resource.RevocableInfo'(F9,
									  NewFValue)
				end).


skip_varint_Resource(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    skip_varint_Resource(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9);
skip_varint_Resource(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_Resource(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9).


skip_length_delimited_Resource(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    skip_length_delimited_Resource(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9);
skip_length_delimited_Resource(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Resource(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9).


skip_32_Resource(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_Resource(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9).


skip_64_Resource(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_Resource(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9).


'd_msg_Offer.Operation.Destroy'(Bin) ->
    'dfp_read_field_def_Offer.Operation.Destroy'(Bin, 0, 0,
						 id([])).

'dfp_read_field_def_Offer.Operation.Destroy'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'd_field_Offer.Operation.Destroy_volumes'(Rest, Z1, Z2,
					      F1);
'dfp_read_field_def_Offer.Operation.Destroy'(<<>>, 0, 0,
					     F1) ->
    #'Offer.Operation.Destroy'{volumes = lists_reverse(F1)};
'dfp_read_field_def_Offer.Operation.Destroy'(Other, Z1,
					     Z2, F1) ->
    'dg_read_field_def_Offer.Operation.Destroy'(Other, Z1,
						Z2, F1).

'dg_read_field_def_Offer.Operation.Destroy'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Offer.Operation.Destroy'(Rest, N + 7,
						X bsl N + Acc, F1);
'dg_read_field_def_Offer.Operation.Destroy'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Offer.Operation.Destroy_volumes'(Rest, 0, 0,
						    F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Offer.Operation.Destroy'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Offer.Operation.Destroy'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Offer.Operation.Destroy'(Rest, 0,
								0, F1);
	    5 -> 'skip_32_Offer.Operation.Destroy'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Offer.Operation.Destroy'(<<>>, 0, 0,
					    F1) ->
    #'Offer.Operation.Destroy'{volumes = lists_reverse(F1)}.

'd_field_Offer.Operation.Destroy_volumes'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 57 ->
    'd_field_Offer.Operation.Destroy_volumes'(Rest, N + 7,
					      X bsl N + Acc, F1);
'd_field_Offer.Operation.Destroy_volumes'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    'dfp_read_field_def_Offer.Operation.Destroy'(Rest2, 0,
						 0, cons(NewFValue, F1)).


'skip_varint_Offer.Operation.Destroy'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'skip_varint_Offer.Operation.Destroy'(Rest, Z1, Z2, F1);
'skip_varint_Offer.Operation.Destroy'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Destroy'(Rest, Z1,
						 Z2, F1).


'skip_length_delimited_Offer.Operation.Destroy'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Offer.Operation.Destroy'(Rest,
						    N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Offer.Operation.Destroy'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Offer.Operation.Destroy'(Rest2, 0,
						 0, F1).


'skip_32_Offer.Operation.Destroy'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Destroy'(Rest, Z1,
						 Z2, F1).


'skip_64_Offer.Operation.Destroy'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Destroy'(Rest, Z1,
						 Z2, F1).


'd_msg_Offer.Operation.Create'(Bin) ->
    'dfp_read_field_def_Offer.Operation.Create'(Bin, 0, 0,
						id([])).

'dfp_read_field_def_Offer.Operation.Create'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'd_field_Offer.Operation.Create_volumes'(Rest, Z1, Z2,
					     F1);
'dfp_read_field_def_Offer.Operation.Create'(<<>>, 0, 0,
					    F1) ->
    #'Offer.Operation.Create'{volumes = lists_reverse(F1)};
'dfp_read_field_def_Offer.Operation.Create'(Other, Z1,
					    Z2, F1) ->
    'dg_read_field_def_Offer.Operation.Create'(Other, Z1,
					       Z2, F1).

'dg_read_field_def_Offer.Operation.Create'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Offer.Operation.Create'(Rest, N + 7,
					       X bsl N + Acc, F1);
'dg_read_field_def_Offer.Operation.Create'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Offer.Operation.Create_volumes'(Rest, 0, 0,
						   F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Offer.Operation.Create'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Offer.Operation.Create'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Offer.Operation.Create'(Rest, 0,
							       0, F1);
	    5 -> 'skip_32_Offer.Operation.Create'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Offer.Operation.Create'(<<>>, 0, 0,
					   F1) ->
    #'Offer.Operation.Create'{volumes = lists_reverse(F1)}.

'd_field_Offer.Operation.Create_volumes'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    'd_field_Offer.Operation.Create_volumes'(Rest, N + 7,
					     X bsl N + Acc, F1);
'd_field_Offer.Operation.Create_volumes'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    'dfp_read_field_def_Offer.Operation.Create'(Rest2, 0, 0,
						cons(NewFValue, F1)).


'skip_varint_Offer.Operation.Create'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'skip_varint_Offer.Operation.Create'(Rest, Z1, Z2, F1);
'skip_varint_Offer.Operation.Create'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Create'(Rest, Z1,
						Z2, F1).


'skip_length_delimited_Offer.Operation.Create'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Offer.Operation.Create'(Rest,
						   N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Offer.Operation.Create'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Offer.Operation.Create'(Rest2, 0, 0,
						F1).


'skip_32_Offer.Operation.Create'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Create'(Rest, Z1,
						Z2, F1).


'skip_64_Offer.Operation.Create'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Create'(Rest, Z1,
						Z2, F1).


'd_msg_Offer.Operation.Unreserve'(Bin) ->
    'dfp_read_field_def_Offer.Operation.Unreserve'(Bin, 0,
						   0, id([])).

'dfp_read_field_def_Offer.Operation.Unreserve'(<<10,
						 Rest/binary>>,
					       Z1, Z2, F1) ->
    'd_field_Offer.Operation.Unreserve_resources'(Rest, Z1,
						  Z2, F1);
'dfp_read_field_def_Offer.Operation.Unreserve'(<<>>, 0,
					       0, F1) ->
    #'Offer.Operation.Unreserve'{resources =
				     lists_reverse(F1)};
'dfp_read_field_def_Offer.Operation.Unreserve'(Other,
					       Z1, Z2, F1) ->
    'dg_read_field_def_Offer.Operation.Unreserve'(Other, Z1,
						  Z2, F1).

'dg_read_field_def_Offer.Operation.Unreserve'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Offer.Operation.Unreserve'(Rest,
						  N + 7, X bsl N + Acc, F1);
'dg_read_field_def_Offer.Operation.Unreserve'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Offer.Operation.Unreserve_resources'(Rest, 0,
							0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Offer.Operation.Unreserve'(Rest, 0, 0, F1);
	    1 ->
		'skip_64_Offer.Operation.Unreserve'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Offer.Operation.Unreserve'(Rest,
								  0, 0, F1);
	    5 -> 'skip_32_Offer.Operation.Unreserve'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Offer.Operation.Unreserve'(<<>>, 0,
					      0, F1) ->
    #'Offer.Operation.Unreserve'{resources =
				     lists_reverse(F1)}.

'd_field_Offer.Operation.Unreserve_resources'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1)
    when N < 57 ->
    'd_field_Offer.Operation.Unreserve_resources'(Rest,
						  N + 7, X bsl N + Acc, F1);
'd_field_Offer.Operation.Unreserve_resources'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    'dfp_read_field_def_Offer.Operation.Unreserve'(Rest2, 0,
						   0, cons(NewFValue, F1)).


'skip_varint_Offer.Operation.Unreserve'(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'skip_varint_Offer.Operation.Unreserve'(Rest, Z1, Z2,
					    F1);
'skip_varint_Offer.Operation.Unreserve'(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Unreserve'(Rest, Z1,
						   Z2, F1).


'skip_length_delimited_Offer.Operation.Unreserve'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Offer.Operation.Unreserve'(Rest,
						      N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Offer.Operation.Unreserve'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Offer.Operation.Unreserve'(Rest2, 0,
						   0, F1).


'skip_32_Offer.Operation.Unreserve'(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Unreserve'(Rest, Z1,
						   Z2, F1).


'skip_64_Offer.Operation.Unreserve'(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Unreserve'(Rest, Z1,
						   Z2, F1).


'd_msg_Offer.Operation.Reserve'(Bin) ->
    'dfp_read_field_def_Offer.Operation.Reserve'(Bin, 0, 0,
						 id([])).

'dfp_read_field_def_Offer.Operation.Reserve'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'd_field_Offer.Operation.Reserve_resources'(Rest, Z1,
						Z2, F1);
'dfp_read_field_def_Offer.Operation.Reserve'(<<>>, 0, 0,
					     F1) ->
    #'Offer.Operation.Reserve'{resources =
				   lists_reverse(F1)};
'dfp_read_field_def_Offer.Operation.Reserve'(Other, Z1,
					     Z2, F1) ->
    'dg_read_field_def_Offer.Operation.Reserve'(Other, Z1,
						Z2, F1).

'dg_read_field_def_Offer.Operation.Reserve'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Offer.Operation.Reserve'(Rest, N + 7,
						X bsl N + Acc, F1);
'dg_read_field_def_Offer.Operation.Reserve'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Offer.Operation.Reserve_resources'(Rest, 0, 0,
						      F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Offer.Operation.Reserve'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Offer.Operation.Reserve'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Offer.Operation.Reserve'(Rest, 0,
								0, F1);
	    5 -> 'skip_32_Offer.Operation.Reserve'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Offer.Operation.Reserve'(<<>>, 0, 0,
					    F1) ->
    #'Offer.Operation.Reserve'{resources =
				   lists_reverse(F1)}.

'd_field_Offer.Operation.Reserve_resources'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'd_field_Offer.Operation.Reserve_resources'(Rest, N + 7,
						X bsl N + Acc, F1);
'd_field_Offer.Operation.Reserve_resources'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    'dfp_read_field_def_Offer.Operation.Reserve'(Rest2, 0,
						 0, cons(NewFValue, F1)).


'skip_varint_Offer.Operation.Reserve'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'skip_varint_Offer.Operation.Reserve'(Rest, Z1, Z2, F1);
'skip_varint_Offer.Operation.Reserve'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Reserve'(Rest, Z1,
						 Z2, F1).


'skip_length_delimited_Offer.Operation.Reserve'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Offer.Operation.Reserve'(Rest,
						    N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Offer.Operation.Reserve'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Offer.Operation.Reserve'(Rest2, 0,
						 0, F1).


'skip_32_Offer.Operation.Reserve'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Reserve'(Rest, Z1,
						 Z2, F1).


'skip_64_Offer.Operation.Reserve'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Reserve'(Rest, Z1,
						 Z2, F1).


d_msg_Port(Bin) ->
    dfp_read_field_def_Port(Bin, 0, 0, id(undefined),
			    id(undefined), id(undefined), id(undefined),
			    id(undefined)).

dfp_read_field_def_Port(<<8, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Port_number(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Port(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Port_name(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Port(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Port_protocol(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Port(<<32, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Port_visibility(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5);
dfp_read_field_def_Port(<<42, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Port_labels(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Port(<<>>, 0, 0, F1, F2, F3, F4,
			F5) ->
    #'Port'{number = F1, name = F2, protocol = F3,
	    visibility = F4, labels = F5};
dfp_read_field_def_Port(Other, Z1, Z2, F1, F2, F3, F4,
			F5) ->
    dg_read_field_def_Port(Other, Z1, Z2, F1, F2, F3, F4,
			   F5).

dg_read_field_def_Port(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_Port(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5);
dg_read_field_def_Port(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Port_number(Rest, 0, 0, F1, F2, F3, F4, F5);
      18 -> d_field_Port_name(Rest, 0, 0, F1, F2, F3, F4, F5);
      26 ->
	  d_field_Port_protocol(Rest, 0, 0, F1, F2, F3, F4, F5);
      32 ->
	  d_field_Port_visibility(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_Port_labels(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Port(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_Port(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_Port(Rest, 0, 0, F1, F2, F3, F4,
					   F5);
	    5 -> skip_32_Port(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_Port(<<>>, 0, 0, F1, F2, F3, F4,
		       F5) ->
    #'Port'{number = F1, name = F2, protocol = F3,
	    visibility = F4, labels = F5}.

d_field_Port_number(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Port_number(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5);
d_field_Port_number(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, F3, F4, F5) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_Port(Rest, 0, 0, NewFValue, F2, F3,
			    F4, F5).


d_field_Port_name(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5)
    when N < 57 ->
    d_field_Port_name(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5);
d_field_Port_name(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  _, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Port(Rest2, 0, 0, F1, NewFValue, F3,
			    F4, F5).


d_field_Port_protocol(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Port_protocol(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5);
d_field_Port_protocol(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Port(Rest2, 0, 0, F1, F2, NewFValue,
			    F4, F5).


d_field_Port_visibility(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Port_visibility(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5);
d_field_Port_visibility(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, _, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_DiscoveryInfo.Visibility'(Tmp),
    dfp_read_field_def_Port(Rest, 0, 0, F1, F2, F3,
			    NewFValue, F5).


d_field_Port_labels(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Port_labels(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5);
d_field_Port_labels(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_Port(Rest2, 0, 0, F1, F2, F3, F4,
			    if F5 == undefined -> NewFValue;
			       true -> merge_msg_Labels(F5, NewFValue)
			    end).


skip_varint_Port(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5) ->
    skip_varint_Port(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_Port(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5) ->
    dfp_read_field_def_Port(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5).


skip_length_delimited_Port(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_Port(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
skip_length_delimited_Port(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Port(Rest2, 0, 0, F1, F2, F3, F4,
			    F5).


skip_32_Port(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5) ->
    dfp_read_field_def_Port(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5).


skip_64_Port(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5) ->
    dfp_read_field_def_Port(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5).


d_msg_Ports(Bin) ->
    dfp_read_field_def_Ports(Bin, 0, 0, id([])).

dfp_read_field_def_Ports(<<10, Rest/binary>>, Z1, Z2,
			 F1) ->
    d_field_Ports_ports(Rest, Z1, Z2, F1);
dfp_read_field_def_Ports(<<>>, 0, 0, F1) ->
    #'Ports'{ports = lists_reverse(F1)};
dfp_read_field_def_Ports(Other, Z1, Z2, F1) ->
    dg_read_field_def_Ports(Other, Z1, Z2, F1).

dg_read_field_def_Ports(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Ports(Rest, N + 7, X bsl N + Acc, F1);
dg_read_field_def_Ports(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Ports_ports(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Ports(Rest, 0, 0, F1);
	    1 -> skip_64_Ports(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Ports(Rest, 0, 0, F1);
	    5 -> skip_32_Ports(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Ports(<<>>, 0, 0, F1) ->
    #'Ports'{ports = lists_reverse(F1)}.

d_field_Ports_ports(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1)
    when N < 57 ->
    d_field_Ports_ports(Rest, N + 7, X bsl N + Acc, F1);
d_field_Ports_ports(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Port(Bs),
    dfp_read_field_def_Ports(Rest2, 0, 0,
			     cons(NewFValue, F1)).


skip_varint_Ports(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F1) ->
    skip_varint_Ports(Rest, Z1, Z2, F1);
skip_varint_Ports(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F1) ->
    dfp_read_field_def_Ports(Rest, Z1, Z2, F1).


skip_length_delimited_Ports(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Ports(Rest, N + 7, X bsl N + Acc,
				F1);
skip_length_delimited_Ports(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Ports(Rest2, 0, 0, F1).


skip_32_Ports(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Ports(Rest, Z1, Z2, F1).


skip_64_Ports(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Ports(Rest, Z1, Z2, F1).


d_msg_DiscoveryInfo(Bin) ->
    dfp_read_field_def_DiscoveryInfo(Bin, 0, 0,
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined)).

dfp_read_field_def_DiscoveryInfo(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_visibility(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_name(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_environment(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_location(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<42, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_version(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<50, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_ports(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<58, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_DiscoveryInfo_labels(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7);
dfp_read_field_def_DiscoveryInfo(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7) ->
    #'DiscoveryInfo'{visibility = F1, name = F2,
		     environment = F3, location = F4, version = F5,
		     ports = F6, labels = F7};
dfp_read_field_def_DiscoveryInfo(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7) ->
    dg_read_field_def_DiscoveryInfo(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7).

dg_read_field_def_DiscoveryInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_DiscoveryInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_DiscoveryInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_DiscoveryInfo_visibility(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7);
      18 ->
	  d_field_DiscoveryInfo_name(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      26 ->
	  d_field_DiscoveryInfo_environment(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7);
      34 ->
	  d_field_DiscoveryInfo_location(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      42 ->
	  d_field_DiscoveryInfo_version(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7);
      50 ->
	  d_field_DiscoveryInfo_ports(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      58 ->
	  d_field_DiscoveryInfo_labels(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DiscoveryInfo(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7);
	    1 ->
		skip_64_DiscoveryInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7);
	    2 ->
		skip_length_delimited_DiscoveryInfo(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7);
	    5 ->
		skip_32_DiscoveryInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7)
	  end
    end;
dg_read_field_def_DiscoveryInfo(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7) ->
    #'DiscoveryInfo'{visibility = F1, name = F2,
		     environment = F3, location = F4, version = F5,
		     ports = F6, labels = F7}.

d_field_DiscoveryInfo_visibility(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_visibility(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_DiscoveryInfo_visibility(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_DiscoveryInfo.Visibility'(Tmp),
    dfp_read_field_def_DiscoveryInfo(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7).


d_field_DiscoveryInfo_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_name(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_DiscoveryInfo_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7).


d_field_DiscoveryInfo_environment(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_environment(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
d_field_DiscoveryInfo_environment(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, _, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7).


d_field_DiscoveryInfo_location(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_location(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_DiscoveryInfo_location(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1, F2,
				     F3, NewFValue, F5, F6, F7).


d_field_DiscoveryInfo_version(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_version(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_DiscoveryInfo_version(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, NewFValue, F6, F7).


d_field_DiscoveryInfo_ports(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_ports(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_DiscoveryInfo_ports(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Ports(Bs),
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5,
				     if F6 == undefined -> NewFValue;
					true -> merge_msg_Ports(F6, NewFValue)
				     end,
				     F7).


d_field_DiscoveryInfo_labels(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_DiscoveryInfo_labels(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7);
d_field_DiscoveryInfo_labels(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6,
				     if F7 == undefined -> NewFValue;
					true -> merge_msg_Labels(F7, NewFValue)
				     end).


skip_varint_DiscoveryInfo(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_DiscoveryInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7);
skip_varint_DiscoveryInfo(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_DiscoveryInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


skip_length_delimited_DiscoveryInfo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_DiscoveryInfo(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7);
skip_length_delimited_DiscoveryInfo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DiscoveryInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7).


skip_32_DiscoveryInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_DiscoveryInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


skip_64_DiscoveryInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_DiscoveryInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7).


d_msg_KillPolicy(Bin) ->
    dfp_read_field_def_KillPolicy(Bin, 0, 0, id(undefined)).

dfp_read_field_def_KillPolicy(<<10, Rest/binary>>, Z1,
			      Z2, F1) ->
    d_field_KillPolicy_grace_period(Rest, Z1, Z2, F1);
dfp_read_field_def_KillPolicy(<<>>, 0, 0, F1) ->
    #'KillPolicy'{grace_period = F1};
dfp_read_field_def_KillPolicy(Other, Z1, Z2, F1) ->
    dg_read_field_def_KillPolicy(Other, Z1, Z2, F1).

dg_read_field_def_KillPolicy(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_KillPolicy(Rest, N + 7, X bsl N + Acc,
				 F1);
dg_read_field_def_KillPolicy(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_KillPolicy_grace_period(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_KillPolicy(Rest, 0, 0, F1);
	    1 -> skip_64_KillPolicy(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_KillPolicy(Rest, 0, 0, F1);
	    5 -> skip_32_KillPolicy(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_KillPolicy(<<>>, 0, 0, F1) ->
    #'KillPolicy'{grace_period = F1}.

d_field_KillPolicy_grace_period(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1)
    when N < 57 ->
    d_field_KillPolicy_grace_period(Rest, N + 7,
				    X bsl N + Acc, F1);
d_field_KillPolicy_grace_period(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DurationInfo(Bs),
    dfp_read_field_def_KillPolicy(Rest2, 0, 0,
				  if F1 == undefined -> NewFValue;
				     true ->
					 merge_msg_DurationInfo(F1, NewFValue)
				  end).


skip_varint_KillPolicy(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    skip_varint_KillPolicy(Rest, Z1, Z2, F1);
skip_varint_KillPolicy(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    dfp_read_field_def_KillPolicy(Rest, Z1, Z2, F1).


skip_length_delimited_KillPolicy(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_KillPolicy(Rest, N + 7,
				     X bsl N + Acc, F1);
skip_length_delimited_KillPolicy(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_KillPolicy(Rest2, 0, 0, F1).


skip_32_KillPolicy(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_KillPolicy(Rest, Z1, Z2, F1).


skip_64_KillPolicy(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_KillPolicy(Rest, Z1, Z2, F1).


'd_msg_HealthCheck.HTTP'(Bin) ->
    'dfp_read_field_def_HealthCheck.HTTP'(Bin, 0, 0,
					  id(undefined), id(undefined), id([])).

'dfp_read_field_def_HealthCheck.HTTP'(<<8,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    'd_field_HealthCheck.HTTP_port'(Rest, Z1, Z2, F1, F2,
				    F3);
'dfp_read_field_def_HealthCheck.HTTP'(<<18,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    'd_field_HealthCheck.HTTP_path'(Rest, Z1, Z2, F1, F2,
				    F3);
'dfp_read_field_def_HealthCheck.HTTP'(<<32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3) ->
    'd_field_HealthCheck.HTTP_statuses'(Rest, Z1, Z2, F1,
					F2, F3);
'dfp_read_field_def_HealthCheck.HTTP'(<<>>, 0, 0, F1,
				      F2, F3) ->
    #'HealthCheck.HTTP'{port = F1, path = F2,
			statuses = lists_reverse(F3)};
'dfp_read_field_def_HealthCheck.HTTP'(Other, Z1, Z2, F1,
				      F2, F3) ->
    'dg_read_field_def_HealthCheck.HTTP'(Other, Z1, Z2, F1,
					 F2, F3).

'dg_read_field_def_HealthCheck.HTTP'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_HealthCheck.HTTP'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_HealthCheck.HTTP'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_HealthCheck.HTTP_port'(Rest, 0, 0, F1, F2, F3);
      18 ->
	  'd_field_HealthCheck.HTTP_path'(Rest, 0, 0, F1, F2, F3);
      32 ->
	  'd_field_HealthCheck.HTTP_statuses'(Rest, 0, 0, F1, F2,
					      F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_HealthCheck.HTTP'(Rest, 0, 0, F1, F2, F3);
	    1 -> 'skip_64_HealthCheck.HTTP'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_HealthCheck.HTTP'(Rest, 0, 0, F1,
							 F2, F3);
	    5 -> 'skip_32_HealthCheck.HTTP'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_HealthCheck.HTTP'(<<>>, 0, 0, F1, F2,
				     F3) ->
    #'HealthCheck.HTTP'{port = F1, path = F2,
			statuses = lists_reverse(F3)}.

'd_field_HealthCheck.HTTP_port'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_HealthCheck.HTTP_port'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
'd_field_HealthCheck.HTTP_port'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_HealthCheck.HTTP'(Rest, 0, 0,
					  NewFValue, F2, F3).


'd_field_HealthCheck.HTTP_path'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_HealthCheck.HTTP_path'(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
'd_field_HealthCheck.HTTP_path'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_HealthCheck.HTTP'(Rest2, 0, 0, F1,
					  NewFValue, F3).


'd_field_HealthCheck.HTTP_statuses'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_HealthCheck.HTTP_statuses'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
'd_field_HealthCheck.HTTP_statuses'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_HealthCheck.HTTP'(Rest, 0, 0, F1,
					  F2, cons(NewFValue, F3)).


'skip_varint_HealthCheck.HTTP'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    'skip_varint_HealthCheck.HTTP'(Rest, Z1, Z2, F1, F2,
				   F3);
'skip_varint_HealthCheck.HTTP'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_HealthCheck.HTTP'(Rest, Z1, Z2, F1,
					  F2, F3).


'skip_length_delimited_HealthCheck.HTTP'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_HealthCheck.HTTP'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_HealthCheck.HTTP'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_HealthCheck.HTTP'(Rest2, 0, 0, F1,
					  F2, F3).


'skip_32_HealthCheck.HTTP'(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    'dfp_read_field_def_HealthCheck.HTTP'(Rest, Z1, Z2, F1,
					  F2, F3).


'skip_64_HealthCheck.HTTP'(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3) ->
    'dfp_read_field_def_HealthCheck.HTTP'(Rest, Z1, Z2, F1,
					  F2, F3).


d_msg_HealthCheck(Bin) ->
    dfp_read_field_def_HealthCheck(Bin, 0, 0, id(undefined),
				   id(undefined), id(undefined), id(undefined),
				   id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_HealthCheck(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_http(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7);
dfp_read_field_def_HealthCheck(<<17, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_delay_seconds(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7);
dfp_read_field_def_HealthCheck(<<25, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_interval_seconds(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7);
dfp_read_field_def_HealthCheck(<<33, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_timeout_seconds(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7);
dfp_read_field_def_HealthCheck(<<40, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_consecutive_failures(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
dfp_read_field_def_HealthCheck(<<49, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_grace_period_seconds(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7);
dfp_read_field_def_HealthCheck(<<58, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_HealthCheck_command(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_HealthCheck(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7) ->
    #'HealthCheck'{http = F1, delay_seconds = F2,
		   interval_seconds = F3, timeout_seconds = F4,
		   consecutive_failures = F5, grace_period_seconds = F6,
		   command = F7};
dfp_read_field_def_HealthCheck(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7) ->
    dg_read_field_def_HealthCheck(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7).

dg_read_field_def_HealthCheck(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_HealthCheck(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_HealthCheck(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_HealthCheck_http(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7);
      17 ->
	  d_field_HealthCheck_delay_seconds(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7);
      25 ->
	  d_field_HealthCheck_interval_seconds(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7);
      33 ->
	  d_field_HealthCheck_timeout_seconds(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7);
      40 ->
	  d_field_HealthCheck_consecutive_failures(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      49 ->
	  d_field_HealthCheck_grace_period_seconds(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7);
      58 ->
	  d_field_HealthCheck_command(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_HealthCheck(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7);
	    1 ->
		skip_64_HealthCheck(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7);
	    2 ->
		skip_length_delimited_HealthCheck(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7);
	    5 ->
		skip_32_HealthCheck(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7)
	  end
    end;
dg_read_field_def_HealthCheck(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7) ->
    #'HealthCheck'{http = F1, delay_seconds = F2,
		   interval_seconds = F3, timeout_seconds = F4,
		   consecutive_failures = F5, grace_period_seconds = F6,
		   command = F7}.

d_field_HealthCheck_http(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_HealthCheck_http(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7);
d_field_HealthCheck_http(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_HealthCheck.HTTP'(Bs),
    dfp_read_field_def_HealthCheck(Rest2, 0, 0,
				   if F1 == undefined -> NewFValue;
				      true ->
					  'merge_msg_HealthCheck.HTTP'(F1,
								       NewFValue)
				   end,
				   F2, F3, F4, F5, F6, F7).


d_field_HealthCheck_delay_seconds(<<Value:64/little-float,
				    Rest/binary>>,
				  Z1, Z2, F1, _, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, Value,
				   F3, F4, F5, F6, F7).


d_field_HealthCheck_interval_seconds(<<Value:64/little-float,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, _, F4, F5, F6, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, F2,
				   Value, F4, F5, F6, F7).


d_field_HealthCheck_timeout_seconds(<<Value:64/little-float,
				      Rest/binary>>,
				    Z1, Z2, F1, F2, F3, _, F5, F6, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, F2, F3,
				   Value, F5, F6, F7).


d_field_HealthCheck_consecutive_failures(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_HealthCheck_consecutive_failures(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7);
d_field_HealthCheck_consecutive_failures(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_HealthCheck(Rest, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7).


d_field_HealthCheck_grace_period_seconds(<<Value:64/little-float,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, F3, F4, F5, _, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, Value, F7).


d_field_HealthCheck_command(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_HealthCheck_command(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_HealthCheck_command(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_CommandInfo(Bs),
    dfp_read_field_def_HealthCheck(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6,
				   if F7 == undefined -> NewFValue;
				      true ->
					  merge_msg_CommandInfo(F7, NewFValue)
				   end).


skip_varint_HealthCheck(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_HealthCheck(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7);
skip_varint_HealthCheck(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7).


skip_length_delimited_HealthCheck(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_HealthCheck(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
skip_length_delimited_HealthCheck(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HealthCheck(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7).


skip_32_HealthCheck(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7).


skip_64_HealthCheck(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_HealthCheck(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7).


'd_msg_NetworkInfo.IPAddress'(Bin) ->
    'dfp_read_field_def_NetworkInfo.IPAddress'(Bin, 0, 0,
					       id(undefined), id(undefined)).

'dfp_read_field_def_NetworkInfo.IPAddress'(<<8,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'd_field_NetworkInfo.IPAddress_protocol'(Rest, Z1, Z2,
					     F1, F2);
'dfp_read_field_def_NetworkInfo.IPAddress'(<<18,
					     Rest/binary>>,
					   Z1, Z2, F1, F2) ->
    'd_field_NetworkInfo.IPAddress_ip_address'(Rest, Z1, Z2,
					       F1, F2);
'dfp_read_field_def_NetworkInfo.IPAddress'(<<>>, 0, 0,
					   F1, F2) ->
    #'NetworkInfo.IPAddress'{protocol = F1,
			     ip_address = F2};
'dfp_read_field_def_NetworkInfo.IPAddress'(Other, Z1,
					   Z2, F1, F2) ->
    'dg_read_field_def_NetworkInfo.IPAddress'(Other, Z1, Z2,
					      F1, F2).

'dg_read_field_def_NetworkInfo.IPAddress'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_NetworkInfo.IPAddress'(Rest, N + 7,
					      X bsl N + Acc, F1, F2);
'dg_read_field_def_NetworkInfo.IPAddress'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_NetworkInfo.IPAddress_protocol'(Rest, 0, 0, F1,
						   F2);
      18 ->
	  'd_field_NetworkInfo.IPAddress_ip_address'(Rest, 0, 0,
						     F1, F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_NetworkInfo.IPAddress'(Rest, 0, 0, F1, F2);
	    1 ->
		'skip_64_NetworkInfo.IPAddress'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_NetworkInfo.IPAddress'(Rest, 0,
							      0, F1, F2);
	    5 -> 'skip_32_NetworkInfo.IPAddress'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_NetworkInfo.IPAddress'(<<>>, 0, 0,
					  F1, F2) ->
    #'NetworkInfo.IPAddress'{protocol = F1,
			     ip_address = F2}.

'd_field_NetworkInfo.IPAddress_protocol'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 57 ->
    'd_field_NetworkInfo.IPAddress_protocol'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'd_field_NetworkInfo.IPAddress_protocol'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F2) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_NetworkInfo.Protocol'(Tmp),
    'dfp_read_field_def_NetworkInfo.IPAddress'(Rest, 0, 0,
					       NewFValue, F2).


'd_field_NetworkInfo.IPAddress_ip_address'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2)
    when N < 57 ->
    'd_field_NetworkInfo.IPAddress_ip_address'(Rest, N + 7,
					       X bsl N + Acc, F1, F2);
'd_field_NetworkInfo.IPAddress_ip_address'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_NetworkInfo.IPAddress'(Rest2, 0, 0,
					       F1, NewFValue).


'skip_varint_NetworkInfo.IPAddress'(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    'skip_varint_NetworkInfo.IPAddress'(Rest, Z1, Z2, F1,
					F2);
'skip_varint_NetworkInfo.IPAddress'(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F1, F2) ->
    'dfp_read_field_def_NetworkInfo.IPAddress'(Rest, Z1, Z2,
					       F1, F2).


'skip_length_delimited_NetworkInfo.IPAddress'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_NetworkInfo.IPAddress'(Rest,
						  N + 7, X bsl N + Acc, F1, F2);
'skip_length_delimited_NetworkInfo.IPAddress'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_NetworkInfo.IPAddress'(Rest2, 0, 0,
					       F1, F2).


'skip_32_NetworkInfo.IPAddress'(<<_:32, Rest/binary>>,
				Z1, Z2, F1, F2) ->
    'dfp_read_field_def_NetworkInfo.IPAddress'(Rest, Z1, Z2,
					       F1, F2).


'skip_64_NetworkInfo.IPAddress'(<<_:64, Rest/binary>>,
				Z1, Z2, F1, F2) ->
    'dfp_read_field_def_NetworkInfo.IPAddress'(Rest, Z1, Z2,
					       F1, F2).


d_msg_NetworkInfo(Bin) ->
    dfp_read_field_def_NetworkInfo(Bin, 0, 0, id([]),
				   id(undefined), id([]), id(undefined)).

dfp_read_field_def_NetworkInfo(<<42, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4) ->
    d_field_NetworkInfo_ip_addresses(Rest, Z1, Z2, F1, F2,
				     F3, F4);
dfp_read_field_def_NetworkInfo(<<50, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4) ->
    d_field_NetworkInfo_name(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_NetworkInfo(<<26, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4) ->
    d_field_NetworkInfo_groups(Rest, Z1, Z2, F1, F2, F3,
			       F4);
dfp_read_field_def_NetworkInfo(<<34, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4) ->
    d_field_NetworkInfo_labels(Rest, Z1, Z2, F1, F2, F3,
			       F4);
dfp_read_field_def_NetworkInfo(<<>>, 0, 0, F1, F2, F3,
			       F4) ->
    #'NetworkInfo'{ip_addresses = lists_reverse(F1),
		   name = F2, groups = lists_reverse(F3), labels = F4};
dfp_read_field_def_NetworkInfo(Other, Z1, Z2, F1, F2,
			       F3, F4) ->
    dg_read_field_def_NetworkInfo(Other, Z1, Z2, F1, F2, F3,
				  F4).

dg_read_field_def_NetworkInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_NetworkInfo(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_NetworkInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      42 ->
	  d_field_NetworkInfo_ip_addresses(Rest, 0, 0, F1, F2, F3,
					   F4);
      50 ->
	  d_field_NetworkInfo_name(Rest, 0, 0, F1, F2, F3, F4);
      26 ->
	  d_field_NetworkInfo_groups(Rest, 0, 0, F1, F2, F3, F4);
      34 ->
	  d_field_NetworkInfo_labels(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NetworkInfo(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_NetworkInfo(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_NetworkInfo(Rest, 0, 0, F1, F2,
						  F3, F4);
	    5 -> skip_32_NetworkInfo(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_NetworkInfo(<<>>, 0, 0, F1, F2, F3,
			      F4) ->
    #'NetworkInfo'{ip_addresses = lists_reverse(F1),
		   name = F2, groups = lists_reverse(F3), labels = F4}.

d_field_NetworkInfo_ip_addresses(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_NetworkInfo_ip_addresses(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4);
d_field_NetworkInfo_ip_addresses(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_NetworkInfo.IPAddress'(Bs),
    dfp_read_field_def_NetworkInfo(Rest2, 0, 0,
				   cons(NewFValue, F1), F2, F3, F4).


d_field_NetworkInfo_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_NetworkInfo_name(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4);
d_field_NetworkInfo_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_NetworkInfo(Rest2, 0, 0, F1,
				   NewFValue, F3, F4).


d_field_NetworkInfo_groups(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_NetworkInfo_groups(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4);
d_field_NetworkInfo_groups(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_NetworkInfo(Rest2, 0, 0, F1, F2,
				   cons(NewFValue, F3), F4).


d_field_NetworkInfo_labels(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_NetworkInfo_labels(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4);
d_field_NetworkInfo_labels(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_NetworkInfo(Rest2, 0, 0, F1, F2, F3,
				   if F4 == undefined -> NewFValue;
				      true -> merge_msg_Labels(F4, NewFValue)
				   end).


skip_varint_NetworkInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4) ->
    skip_varint_NetworkInfo(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_NetworkInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_NetworkInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4).


skip_length_delimited_NetworkInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_NetworkInfo(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_NetworkInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NetworkInfo(Rest2, 0, 0, F1, F2, F3,
				   F4).


skip_32_NetworkInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4) ->
    dfp_read_field_def_NetworkInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4).


skip_64_NetworkInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4) ->
    dfp_read_field_def_NetworkInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4).


'd_msg_ContainerInfo.MesosInfo'(Bin) ->
    'dfp_read_field_def_ContainerInfo.MesosInfo'(Bin, 0, 0,
						 id(undefined)).

'dfp_read_field_def_ContainerInfo.MesosInfo'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F1) ->
    'd_field_ContainerInfo.MesosInfo_image'(Rest, Z1, Z2,
					    F1);
'dfp_read_field_def_ContainerInfo.MesosInfo'(<<>>, 0, 0,
					     F1) ->
    #'ContainerInfo.MesosInfo'{image = F1};
'dfp_read_field_def_ContainerInfo.MesosInfo'(Other, Z1,
					     Z2, F1) ->
    'dg_read_field_def_ContainerInfo.MesosInfo'(Other, Z1,
						Z2, F1).

'dg_read_field_def_ContainerInfo.MesosInfo'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_ContainerInfo.MesosInfo'(Rest, N + 7,
						X bsl N + Acc, F1);
'dg_read_field_def_ContainerInfo.MesosInfo'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ContainerInfo.MesosInfo_image'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ContainerInfo.MesosInfo'(Rest, 0, 0, F1);
	    1 -> 'skip_64_ContainerInfo.MesosInfo'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_ContainerInfo.MesosInfo'(Rest, 0,
								0, F1);
	    5 -> 'skip_32_ContainerInfo.MesosInfo'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_ContainerInfo.MesosInfo'(<<>>, 0, 0,
					    F1) ->
    #'ContainerInfo.MesosInfo'{image = F1}.

'd_field_ContainerInfo.MesosInfo_image'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'd_field_ContainerInfo.MesosInfo_image'(Rest, N + 7,
					    X bsl N + Acc, F1);
'd_field_ContainerInfo.MesosInfo_image'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Image(Bs),
    'dfp_read_field_def_ContainerInfo.MesosInfo'(Rest2, 0,
						 0,
						 if F1 == undefined ->
							NewFValue;
						    true ->
							merge_msg_Image(F1,
									NewFValue)
						 end).


'skip_varint_ContainerInfo.MesosInfo'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'skip_varint_ContainerInfo.MesosInfo'(Rest, Z1, Z2, F1);
'skip_varint_ContainerInfo.MesosInfo'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F1) ->
    'dfp_read_field_def_ContainerInfo.MesosInfo'(Rest, Z1,
						 Z2, F1).


'skip_length_delimited_ContainerInfo.MesosInfo'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_ContainerInfo.MesosInfo'(Rest,
						    N + 7, X bsl N + Acc, F1);
'skip_length_delimited_ContainerInfo.MesosInfo'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ContainerInfo.MesosInfo'(Rest2, 0,
						 0, F1).


'skip_32_ContainerInfo.MesosInfo'(<<_:32, Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_ContainerInfo.MesosInfo'(Rest, Z1,
						 Z2, F1).


'skip_64_ContainerInfo.MesosInfo'(<<_:64, Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_ContainerInfo.MesosInfo'(Rest, Z1,
						 Z2, F1).


d_msg_ContainerInfo(Bin) ->
    dfp_read_field_def_ContainerInfo(Bin, 0, 0,
				     id(undefined), id([]), id(undefined),
				     id(undefined), id(undefined), id([])).

dfp_read_field_def_ContainerInfo(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ContainerInfo_type(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6);
dfp_read_field_def_ContainerInfo(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ContainerInfo_volumes(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6);
dfp_read_field_def_ContainerInfo(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ContainerInfo_hostname(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6);
dfp_read_field_def_ContainerInfo(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ContainerInfo_docker(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6);
dfp_read_field_def_ContainerInfo(<<42, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ContainerInfo_mesos(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6);
dfp_read_field_def_ContainerInfo(<<58, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_ContainerInfo_network_infos(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
dfp_read_field_def_ContainerInfo(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6) ->
    #'ContainerInfo'{type = F1, volumes = lists_reverse(F2),
		     hostname = F3, docker = F4, mesos = F5,
		     network_infos = lists_reverse(F6)};
dfp_read_field_def_ContainerInfo(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6) ->
    dg_read_field_def_ContainerInfo(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).

dg_read_field_def_ContainerInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_ContainerInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_ContainerInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ContainerInfo_type(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6);
      18 ->
	  d_field_ContainerInfo_volumes(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6);
      34 ->
	  d_field_ContainerInfo_hostname(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6);
      26 ->
	  d_field_ContainerInfo_docker(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6);
      42 ->
	  d_field_ContainerInfo_mesos(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6);
      58 ->
	  d_field_ContainerInfo_network_infos(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ContainerInfo(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6);
	    1 ->
		skip_64_ContainerInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6);
	    2 ->
		skip_length_delimited_ContainerInfo(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6);
	    5 ->
		skip_32_ContainerInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6)
	  end
    end;
dg_read_field_def_ContainerInfo(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6) ->
    #'ContainerInfo'{type = F1, volumes = lists_reverse(F2),
		     hostname = F3, docker = F4, mesos = F5,
		     network_infos = lists_reverse(F6)}.

d_field_ContainerInfo_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ContainerInfo_type(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6);
d_field_ContainerInfo_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_ContainerInfo.Type'(Tmp),
    dfp_read_field_def_ContainerInfo(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6).


d_field_ContainerInfo_volumes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ContainerInfo_volumes(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ContainerInfo_volumes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Volume(Bs),
    dfp_read_field_def_ContainerInfo(Rest2, 0, 0, F1,
				     cons(NewFValue, F2), F3, F4, F5, F6).


d_field_ContainerInfo_hostname(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ContainerInfo_hostname(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ContainerInfo_hostname(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ContainerInfo(Rest2, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6).


d_field_ContainerInfo_docker(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ContainerInfo_docker(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6);
d_field_ContainerInfo_docker(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_ContainerInfo.DockerInfo'(Bs),
    dfp_read_field_def_ContainerInfo(Rest2, 0, 0, F1, F2,
				     F3,
				     if F4 == undefined -> NewFValue;
					true ->
					    'merge_msg_ContainerInfo.DockerInfo'(F4,
										 NewFValue)
				     end,
				     F5, F6).


d_field_ContainerInfo_mesos(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ContainerInfo_mesos(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6);
d_field_ContainerInfo_mesos(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_ContainerInfo.MesosInfo'(Bs),
    dfp_read_field_def_ContainerInfo(Rest2, 0, 0, F1, F2,
				     F3, F4,
				     if F5 == undefined -> NewFValue;
					true ->
					    'merge_msg_ContainerInfo.MesosInfo'(F5,
										NewFValue)
				     end,
				     F6).


d_field_ContainerInfo_network_infos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_ContainerInfo_network_infos(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_ContainerInfo_network_infos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_NetworkInfo(Bs),
    dfp_read_field_def_ContainerInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, cons(NewFValue, F6)).


skip_varint_ContainerInfo(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_ContainerInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6);
skip_varint_ContainerInfo(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_ContainerInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


skip_length_delimited_ContainerInfo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_ContainerInfo(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_ContainerInfo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ContainerInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6).


skip_32_ContainerInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6) ->
    dfp_read_field_def_ContainerInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


skip_64_ContainerInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6) ->
    dfp_read_field_def_ContainerInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6).


d_msg_FrameworkID(Bin) ->
    dfp_read_field_def_FrameworkID(Bin, 0, 0,
				   id(undefined)).

dfp_read_field_def_FrameworkID(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    d_field_FrameworkID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_FrameworkID(<<>>, 0, 0, F1) ->
    #'FrameworkID'{value = F1};
dfp_read_field_def_FrameworkID(Other, Z1, Z2, F1) ->
    dg_read_field_def_FrameworkID(Other, Z1, Z2, F1).

dg_read_field_def_FrameworkID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_FrameworkID(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_FrameworkID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_FrameworkID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_FrameworkID(Rest, 0, 0, F1);
	    1 -> skip_64_FrameworkID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_FrameworkID(Rest, 0, 0, F1);
	    5 -> skip_32_FrameworkID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_FrameworkID(<<>>, 0, 0, F1) ->
    #'FrameworkID'{value = F1}.

d_field_FrameworkID_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 57 ->
    d_field_FrameworkID_value(Rest, N + 7, X bsl N + Acc,
			      F1);
d_field_FrameworkID_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkID(Rest2, 0, 0, NewFValue).


skip_varint_FrameworkID(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_FrameworkID(Rest, Z1, Z2, F1);
skip_varint_FrameworkID(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_FrameworkID(Rest, Z1, Z2, F1).


skip_length_delimited_FrameworkID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_FrameworkID(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_FrameworkID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FrameworkID(Rest2, 0, 0, F1).


skip_32_FrameworkID(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_FrameworkID(Rest, Z1, Z2, F1).


skip_64_FrameworkID(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_FrameworkID(Rest, Z1, Z2, F1).


d_msg_ExecutorID(Bin) ->
    dfp_read_field_def_ExecutorID(Bin, 0, 0, id(undefined)).

dfp_read_field_def_ExecutorID(<<10, Rest/binary>>, Z1,
			      Z2, F1) ->
    d_field_ExecutorID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_ExecutorID(<<>>, 0, 0, F1) ->
    #'ExecutorID'{value = F1};
dfp_read_field_def_ExecutorID(Other, Z1, Z2, F1) ->
    dg_read_field_def_ExecutorID(Other, Z1, Z2, F1).

dg_read_field_def_ExecutorID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ExecutorID(Rest, N + 7, X bsl N + Acc,
				 F1);
dg_read_field_def_ExecutorID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ExecutorID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ExecutorID(Rest, 0, 0, F1);
	    1 -> skip_64_ExecutorID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_ExecutorID(Rest, 0, 0, F1);
	    5 -> skip_32_ExecutorID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ExecutorID(<<>>, 0, 0, F1) ->
    #'ExecutorID'{value = F1}.

d_field_ExecutorID_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 57 ->
    d_field_ExecutorID_value(Rest, N + 7, X bsl N + Acc,
			     F1);
d_field_ExecutorID_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ExecutorID(Rest2, 0, 0, NewFValue).


skip_varint_ExecutorID(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    skip_varint_ExecutorID(Rest, Z1, Z2, F1);
skip_varint_ExecutorID(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    dfp_read_field_def_ExecutorID(Rest, Z1, Z2, F1).


skip_length_delimited_ExecutorID(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ExecutorID(Rest, N + 7,
				     X bsl N + Acc, F1);
skip_length_delimited_ExecutorID(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ExecutorID(Rest2, 0, 0, F1).


skip_32_ExecutorID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_ExecutorID(Rest, Z1, Z2, F1).


skip_64_ExecutorID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_ExecutorID(Rest, Z1, Z2, F1).


d_msg_ExecutorInfo(Bin) ->
    dfp_read_field_def_ExecutorInfo(Bin, 0, 0,
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id([]), id(undefined),
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined)).

dfp_read_field_def_ExecutorInfo(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_executor_id(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<66, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_framework_id(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<58, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_command(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<90, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_container(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_resources(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<74, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_name(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<82, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_source(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_data(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<98, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_discovery(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<106, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_shutdown_grace_period(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<114, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    d_field_ExecutorInfo_labels(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_ExecutorInfo(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11) ->
    #'ExecutorInfo'{executor_id = F1, framework_id = F2,
		    command = F3, container = F4,
		    resources = lists_reverse(F5), name = F6, source = F7,
		    data = F8, discovery = F9, shutdown_grace_period = F10,
		    labels = F11};
dfp_read_field_def_ExecutorInfo(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dg_read_field_def_ExecutorInfo(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10, F11).

dg_read_field_def_ExecutorInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11)
    when N < 32 - 7 ->
    dg_read_field_def_ExecutorInfo(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11);
dg_read_field_def_ExecutorInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ExecutorInfo_executor_id(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11);
      66 ->
	  d_field_ExecutorInfo_framework_id(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11);
      58 ->
	  d_field_ExecutorInfo_command(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11);
      90 ->
	  d_field_ExecutorInfo_container(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11);
      42 ->
	  d_field_ExecutorInfo_resources(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11);
      74 ->
	  d_field_ExecutorInfo_name(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11);
      82 ->
	  d_field_ExecutorInfo_source(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11);
      34 ->
	  d_field_ExecutorInfo_data(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11);
      98 ->
	  d_field_ExecutorInfo_discovery(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11);
      106 ->
	  d_field_ExecutorInfo_shutdown_grace_period(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11);
      114 ->
	  d_field_ExecutorInfo_labels(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ExecutorInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8, F9, F10, F11);
	    1 ->
		skip_64_ExecutorInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11);
	    2 ->
		skip_length_delimited_ExecutorInfo(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11);
	    5 ->
		skip_32_ExecutorInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11)
	  end
    end;
dg_read_field_def_ExecutorInfo(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11) ->
    #'ExecutorInfo'{executor_id = F1, framework_id = F2,
		    command = F3, container = F4,
		    resources = lists_reverse(F5), name = F6, source = F7,
		    data = F8, discovery = F9, shutdown_grace_period = F10,
		    labels = F11}.

d_field_ExecutorInfo_executor_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11)
    when N < 57 ->
    d_field_ExecutorInfo_executor_id(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11);
d_field_ExecutorInfo_executor_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorID(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0,
				    if F1 == undefined -> NewFValue;
				       true ->
					   merge_msg_ExecutorID(F1, NewFValue)
				    end,
				    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11).


d_field_ExecutorInfo_framework_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11)
    when N < 57 ->
    d_field_ExecutorInfo_framework_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11);
d_field_ExecutorInfo_framework_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true ->
					   merge_msg_FrameworkID(F2, NewFValue)
				    end,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11).


d_field_ExecutorInfo_command(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11)
    when N < 57 ->
    d_field_ExecutorInfo_command(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_ExecutorInfo_command(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_CommandInfo(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2,
				    if F3 == undefined -> NewFValue;
				       true ->
					   merge_msg_CommandInfo(F3, NewFValue)
				    end,
				    F4, F5, F6, F7, F8, F9, F10, F11).


d_field_ExecutorInfo_container(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11)
    when N < 57 ->
    d_field_ExecutorInfo_container(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11);
d_field_ExecutorInfo_container(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerInfo(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    if F4 == undefined -> NewFValue;
				       true ->
					   merge_msg_ContainerInfo(F4,
								   NewFValue)
				    end,
				    F5, F6, F7, F8, F9, F10, F11).


d_field_ExecutorInfo_resources(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11)
    when N < 57 ->
    d_field_ExecutorInfo_resources(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11);
d_field_ExecutorInfo_resources(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, cons(NewFValue, F5), F6, F7, F8, F9,
				    F10, F11).


d_field_ExecutorInfo_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_ExecutorInfo_name(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_ExecutorInfo_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, F8, F9, F10, F11).


d_field_ExecutorInfo_source(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11)
    when N < 57 ->
    d_field_ExecutorInfo_source(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_ExecutorInfo_source(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			    F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue, F8, F9, F10, F11).


d_field_ExecutorInfo_data(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_ExecutorInfo_data(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_ExecutorInfo_data(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, NewFValue, F9, F10, F11).


d_field_ExecutorInfo_discovery(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11)
    when N < 57 ->
    d_field_ExecutorInfo_discovery(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11);
d_field_ExecutorInfo_discovery(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DiscoveryInfo(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8,
				    if F9 == undefined -> NewFValue;
				       true ->
					   merge_msg_DiscoveryInfo(F9,
								   NewFValue)
				    end,
				    F10, F11).


d_field_ExecutorInfo_shutdown_grace_period(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11)
    when N < 57 ->
    d_field_ExecutorInfo_shutdown_grace_period(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11);
d_field_ExecutorInfo_shutdown_grace_period(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DurationInfo(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9,
				    if F10 == undefined -> NewFValue;
				       true ->
					   merge_msg_DurationInfo(F10,
								  NewFValue)
				    end,
				    F11).


d_field_ExecutorInfo_labels(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11)
    when N < 57 ->
    d_field_ExecutorInfo_labels(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_ExecutorInfo_labels(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10,
				    if F11 == undefined -> NewFValue;
				       true -> merge_msg_Labels(F11, NewFValue)
				    end).


skip_varint_ExecutorInfo(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    skip_varint_ExecutorInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11);
skip_varint_ExecutorInfo(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_ExecutorInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11).


skip_length_delimited_ExecutorInfo(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11)
    when N < 57 ->
    skip_length_delimited_ExecutorInfo(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11);
skip_length_delimited_ExecutorInfo(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ExecutorInfo(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11).


skip_32_ExecutorInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_ExecutorInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11).


skip_64_ExecutorInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_ExecutorInfo(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11).


d_msg_AgentID(Bin) ->
    dfp_read_field_def_AgentID(Bin, 0, 0, id(undefined)).

dfp_read_field_def_AgentID(<<10, Rest/binary>>, Z1, Z2,
			   F1) ->
    d_field_AgentID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_AgentID(<<>>, 0, 0, F1) ->
    #'AgentID'{value = F1};
dfp_read_field_def_AgentID(Other, Z1, Z2, F1) ->
    dg_read_field_def_AgentID(Other, Z1, Z2, F1).

dg_read_field_def_AgentID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_AgentID(Rest, N + 7, X bsl N + Acc,
			      F1);
dg_read_field_def_AgentID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_AgentID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_AgentID(Rest, 0, 0, F1);
	    1 -> skip_64_AgentID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_AgentID(Rest, 0, 0, F1);
	    5 -> skip_32_AgentID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_AgentID(<<>>, 0, 0, F1) ->
    #'AgentID'{value = F1}.

d_field_AgentID_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1)
    when N < 57 ->
    d_field_AgentID_value(Rest, N + 7, X bsl N + Acc, F1);
d_field_AgentID_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_AgentID(Rest2, 0, 0, NewFValue).


skip_varint_AgentID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    skip_varint_AgentID(Rest, Z1, Z2, F1);
skip_varint_AgentID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_AgentID(Rest, Z1, Z2, F1).


skip_length_delimited_AgentID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_AgentID(Rest, N + 7,
				  X bsl N + Acc, F1);
skip_length_delimited_AgentID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AgentID(Rest2, 0, 0, F1).


skip_32_AgentID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_AgentID(Rest, Z1, Z2, F1).


skip_64_AgentID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_AgentID(Rest, Z1, Z2, F1).


d_msg_TaskID(Bin) ->
    dfp_read_field_def_TaskID(Bin, 0, 0, id(undefined)).

dfp_read_field_def_TaskID(<<10, Rest/binary>>, Z1, Z2,
			  F1) ->
    d_field_TaskID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_TaskID(<<>>, 0, 0, F1) ->
    #'TaskID'{value = F1};
dfp_read_field_def_TaskID(Other, Z1, Z2, F1) ->
    dg_read_field_def_TaskID(Other, Z1, Z2, F1).

dg_read_field_def_TaskID(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_TaskID(Rest, N + 7, X bsl N + Acc,
			     F1);
dg_read_field_def_TaskID(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_TaskID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_TaskID(Rest, 0, 0, F1);
	    1 -> skip_64_TaskID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_TaskID(Rest, 0, 0, F1);
	    5 -> skip_32_TaskID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_TaskID(<<>>, 0, 0, F1) ->
    #'TaskID'{value = F1}.

d_field_TaskID_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1)
    when N < 57 ->
    d_field_TaskID_value(Rest, N + 7, X bsl N + Acc, F1);
d_field_TaskID_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TaskID(Rest2, 0, 0, NewFValue).


skip_varint_TaskID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1) ->
    skip_varint_TaskID(Rest, Z1, Z2, F1);
skip_varint_TaskID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1) ->
    dfp_read_field_def_TaskID(Rest, Z1, Z2, F1).


skip_length_delimited_TaskID(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_TaskID(Rest, N + 7, X bsl N + Acc,
				 F1);
skip_length_delimited_TaskID(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TaskID(Rest2, 0, 0, F1).


skip_32_TaskID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_TaskID(Rest, Z1, Z2, F1).


skip_64_TaskID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_TaskID(Rest, Z1, Z2, F1).


d_msg_TaskInfo(Bin) ->
    dfp_read_field_def_TaskInfo(Bin, 0, 0, id(undefined),
				id(undefined), id(undefined), id([]),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined)).

dfp_read_field_def_TaskInfo(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_task_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_agent_id(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_resources(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<42, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_executor(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<58, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_command(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<74, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_container(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<66, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_health_check(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<98, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_kill_policy(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_data(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<82, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_labels(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<90, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    F12) ->
    d_field_TaskInfo_discovery(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12);
dfp_read_field_def_TaskInfo(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12) ->
    #'TaskInfo'{name = F1, task_id = F2, agent_id = F3,
		resources = lists_reverse(F4), executor = F5,
		command = F6, container = F7, health_check = F8,
		kill_policy = F9, data = F10, labels = F11,
		discovery = F12};
dfp_read_field_def_TaskInfo(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dg_read_field_def_TaskInfo(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12).

dg_read_field_def_TaskInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12)
    when N < 32 - 7 ->
    dg_read_field_def_TaskInfo(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12);
dg_read_field_def_TaskInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TaskInfo_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12);
      18 ->
	  d_field_TaskInfo_task_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12);
      26 ->
	  d_field_TaskInfo_agent_id(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12);
      34 ->
	  d_field_TaskInfo_resources(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12);
      42 ->
	  d_field_TaskInfo_executor(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12);
      58 ->
	  d_field_TaskInfo_command(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12);
      74 ->
	  d_field_TaskInfo_container(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12);
      66 ->
	  d_field_TaskInfo_health_check(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12);
      98 ->
	  d_field_TaskInfo_kill_policy(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12);
      50 ->
	  d_field_TaskInfo_data(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12);
      82 ->
	  d_field_TaskInfo_labels(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12);
      90 ->
	  d_field_TaskInfo_discovery(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TaskInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12);
	    1 ->
		skip_64_TaskInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12);
	    2 ->
		skip_length_delimited_TaskInfo(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, F8, F9, F10, F11,
					       F12);
	    5 ->
		skip_32_TaskInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12)
	  end
    end;
dg_read_field_def_TaskInfo(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, F10, F11, F12) ->
    #'TaskInfo'{name = F1, task_id = F2, agent_id = F3,
		resources = lists_reverse(F4), executor = F5,
		command = F6, container = F7, health_check = F8,
		kill_policy = F9, data = F10, labels = F11,
		discovery = F12}.

d_field_TaskInfo_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_TaskInfo_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
d_field_TaskInfo_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12).


d_field_TaskInfo_task_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_TaskInfo_task_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
d_field_TaskInfo_task_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			 F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TaskID(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1,
				if F2 == undefined -> NewFValue;
				   true -> merge_msg_TaskID(F2, NewFValue)
				end,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12).


d_field_TaskInfo_agent_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12)
    when N < 57 ->
    d_field_TaskInfo_agent_id(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12);
d_field_TaskInfo_agent_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2,
				if F3 == undefined -> NewFValue;
				   true -> merge_msg_AgentID(F3, NewFValue)
				end,
				F4, F5, F6, F7, F8, F9, F10, F11, F12).


d_field_TaskInfo_resources(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12)
    when N < 57 ->
    d_field_TaskInfo_resources(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12);
d_field_TaskInfo_resources(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3,
				cons(NewFValue, F4), F5, F6, F7, F8, F9, F10,
				F11, F12).


d_field_TaskInfo_executor(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12)
    when N < 57 ->
    d_field_TaskInfo_executor(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12);
d_field_TaskInfo_executor(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorInfo(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				if F5 == undefined -> NewFValue;
				   true -> merge_msg_ExecutorInfo(F5, NewFValue)
				end,
				F6, F7, F8, F9, F10, F11, F12).


d_field_TaskInfo_command(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_TaskInfo_command(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
d_field_TaskInfo_command(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			 F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_CommandInfo(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5,
				if F6 == undefined -> NewFValue;
				   true -> merge_msg_CommandInfo(F6, NewFValue)
				end,
				F7, F8, F9, F10, F11, F12).


d_field_TaskInfo_container(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12)
    when N < 57 ->
    d_field_TaskInfo_container(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12);
d_field_TaskInfo_container(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerInfo(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6,
				if F7 == undefined -> NewFValue;
				   true ->
				       merge_msg_ContainerInfo(F7, NewFValue)
				end,
				F8, F9, F10, F11, F12).


d_field_TaskInfo_health_check(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12)
    when N < 57 ->
    d_field_TaskInfo_health_check(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12);
d_field_TaskInfo_health_check(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_HealthCheck(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7,
				if F8 == undefined -> NewFValue;
				   true -> merge_msg_HealthCheck(F8, NewFValue)
				end,
				F9, F10, F11, F12).


d_field_TaskInfo_kill_policy(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12)
    when N < 57 ->
    d_field_TaskInfo_kill_policy(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12);
d_field_TaskInfo_kill_policy(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_KillPolicy(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8,
				if F9 == undefined -> NewFValue;
				   true -> merge_msg_KillPolicy(F9, NewFValue)
				end,
				F10, F11, F12).


d_field_TaskInfo_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_TaskInfo_data(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
d_field_TaskInfo_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11, F12) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, NewFValue, F11, F12).


d_field_TaskInfo_labels(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12)
    when N < 57 ->
    d_field_TaskInfo_labels(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12);
d_field_TaskInfo_labels(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10,
				if F11 == undefined -> NewFValue;
				   true -> merge_msg_Labels(F11, NewFValue)
				end,
				F12).


d_field_TaskInfo_discovery(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12)
    when N < 57 ->
    d_field_TaskInfo_discovery(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12);
d_field_TaskInfo_discovery(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DiscoveryInfo(Bs),
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11,
				if F12 == undefined -> NewFValue;
				   true ->
				       merge_msg_DiscoveryInfo(F12, NewFValue)
				end).


skip_varint_TaskInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    skip_varint_TaskInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12);
skip_varint_TaskInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_TaskInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12).


skip_length_delimited_TaskInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12)
    when N < 57 ->
    skip_length_delimited_TaskInfo(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12);
skip_length_delimited_TaskInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TaskInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10, F11, F12).


skip_32_TaskInfo(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_TaskInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12).


skip_64_TaskInfo(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12) ->
    dfp_read_field_def_TaskInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12).


'd_msg_Offer.Operation.Launch'(Bin) ->
    'dfp_read_field_def_Offer.Operation.Launch'(Bin, 0, 0,
						id([])).

'dfp_read_field_def_Offer.Operation.Launch'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'd_field_Offer.Operation.Launch_task_infos'(Rest, Z1,
						Z2, F1);
'dfp_read_field_def_Offer.Operation.Launch'(<<>>, 0, 0,
					    F1) ->
    #'Offer.Operation.Launch'{task_infos =
				  lists_reverse(F1)};
'dfp_read_field_def_Offer.Operation.Launch'(Other, Z1,
					    Z2, F1) ->
    'dg_read_field_def_Offer.Operation.Launch'(Other, Z1,
					       Z2, F1).

'dg_read_field_def_Offer.Operation.Launch'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Offer.Operation.Launch'(Rest, N + 7,
					       X bsl N + Acc, F1);
'dg_read_field_def_Offer.Operation.Launch'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Offer.Operation.Launch_task_infos'(Rest, 0, 0,
						      F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Offer.Operation.Launch'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Offer.Operation.Launch'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Offer.Operation.Launch'(Rest, 0,
							       0, F1);
	    5 -> 'skip_32_Offer.Operation.Launch'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Offer.Operation.Launch'(<<>>, 0, 0,
					   F1) ->
    #'Offer.Operation.Launch'{task_infos =
				  lists_reverse(F1)}.

'd_field_Offer.Operation.Launch_task_infos'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'd_field_Offer.Operation.Launch_task_infos'(Rest, N + 7,
						X bsl N + Acc, F1);
'd_field_Offer.Operation.Launch_task_infos'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TaskInfo(Bs),
    'dfp_read_field_def_Offer.Operation.Launch'(Rest2, 0, 0,
						cons(NewFValue, F1)).


'skip_varint_Offer.Operation.Launch'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'skip_varint_Offer.Operation.Launch'(Rest, Z1, Z2, F1);
'skip_varint_Offer.Operation.Launch'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Launch'(Rest, Z1,
						Z2, F1).


'skip_length_delimited_Offer.Operation.Launch'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Offer.Operation.Launch'(Rest,
						   N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Offer.Operation.Launch'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Offer.Operation.Launch'(Rest2, 0, 0,
						F1).


'skip_32_Offer.Operation.Launch'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Launch'(Rest, Z1,
						Z2, F1).


'skip_64_Offer.Operation.Launch'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Offer.Operation.Launch'(Rest, Z1,
						Z2, F1).


'd_msg_Offer.Operation'(Bin) ->
    'dfp_read_field_def_Offer.Operation'(Bin, 0, 0,
					 id(undefined), id(undefined),
					 id(undefined), id(undefined),
					 id(undefined), id(undefined)).

'dfp_read_field_def_Offer.Operation'(<<8, Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_Offer.Operation_type'(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6);
'dfp_read_field_def_Offer.Operation'(<<18,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_Offer.Operation_launch'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6);
'dfp_read_field_def_Offer.Operation'(<<26,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_Offer.Operation_reserve'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
'dfp_read_field_def_Offer.Operation'(<<34,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_Offer.Operation_unreserve'(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
'dfp_read_field_def_Offer.Operation'(<<42,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_Offer.Operation_create'(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6);
'dfp_read_field_def_Offer.Operation'(<<50,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'd_field_Offer.Operation_destroy'(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
'dfp_read_field_def_Offer.Operation'(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, F6) ->
    #'Offer.Operation'{type = F1, launch = F2, reserve = F3,
		       unreserve = F4, create = F5, destroy = F6};
'dfp_read_field_def_Offer.Operation'(Other, Z1, Z2, F1,
				     F2, F3, F4, F5, F6) ->
    'dg_read_field_def_Offer.Operation'(Other, Z1, Z2, F1,
					F2, F3, F4, F5, F6).

'dg_read_field_def_Offer.Operation'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    'dg_read_field_def_Offer.Operation'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'dg_read_field_def_Offer.Operation'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_Offer.Operation_type'(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6);
      18 ->
	  'd_field_Offer.Operation_launch'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6);
      26 ->
	  'd_field_Offer.Operation_reserve'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      34 ->
	  'd_field_Offer.Operation_unreserve'(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      42 ->
	  'd_field_Offer.Operation_create'(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6);
      50 ->
	  'd_field_Offer.Operation_destroy'(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Offer.Operation'(Rest, 0, 0, F1, F2, F3,
					      F4, F5, F6);
	    1 ->
		'skip_64_Offer.Operation'(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6);
	    2 ->
		'skip_length_delimited_Offer.Operation'(Rest, 0, 0, F1,
							F2, F3, F4, F5, F6);
	    5 ->
		'skip_32_Offer.Operation'(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6)
	  end
    end;
'dg_read_field_def_Offer.Operation'(<<>>, 0, 0, F1, F2,
				    F3, F4, F5, F6) ->
    #'Offer.Operation'{type = F1, launch = F2, reserve = F3,
		       unreserve = F4, create = F5, destroy = F6}.

'd_field_Offer.Operation_type'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Offer.Operation_type'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_Offer.Operation_type'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F2, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Offer.Operation.Type'(Tmp),
    'dfp_read_field_def_Offer.Operation'(Rest, 0, 0,
					 NewFValue, F2, F3, F4, F5, F6).


'd_field_Offer.Operation_launch'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Offer.Operation_launch'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_Offer.Operation_launch'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Offer.Operation.Launch'(Bs),
    'dfp_read_field_def_Offer.Operation'(Rest2, 0, 0, F1,
					 if F2 == undefined -> NewFValue;
					    true ->
						'merge_msg_Offer.Operation.Launch'(F2,
										   NewFValue)
					 end,
					 F3, F4, F5, F6).


'd_field_Offer.Operation_reserve'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Offer.Operation_reserve'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_Offer.Operation_reserve'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Offer.Operation.Reserve'(Bs),
    'dfp_read_field_def_Offer.Operation'(Rest2, 0, 0, F1,
					 F2,
					 if F3 == undefined -> NewFValue;
					    true ->
						'merge_msg_Offer.Operation.Reserve'(F3,
										    NewFValue)
					 end,
					 F4, F5, F6).


'd_field_Offer.Operation_unreserve'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Offer.Operation_unreserve'(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_Offer.Operation_unreserve'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Offer.Operation.Unreserve'(Bs),
    'dfp_read_field_def_Offer.Operation'(Rest2, 0, 0, F1,
					 F2, F3,
					 if F4 == undefined -> NewFValue;
					    true ->
						'merge_msg_Offer.Operation.Unreserve'(F4,
										      NewFValue)
					 end,
					 F5, F6).


'd_field_Offer.Operation_create'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Offer.Operation_create'(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_Offer.Operation_create'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Offer.Operation.Create'(Bs),
    'dfp_read_field_def_Offer.Operation'(Rest2, 0, 0, F1,
					 F2, F3, F4,
					 if F5 == undefined -> NewFValue;
					    true ->
						'merge_msg_Offer.Operation.Create'(F5,
										   NewFValue)
					 end,
					 F6).


'd_field_Offer.Operation_destroy'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Offer.Operation_destroy'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
'd_field_Offer.Operation_destroy'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Offer.Operation.Destroy'(Bs),
    'dfp_read_field_def_Offer.Operation'(Rest2, 0, 0, F1,
					 F2, F3, F4, F5,
					 if F6 == undefined -> NewFValue;
					    true ->
						'merge_msg_Offer.Operation.Destroy'(F6,
										    NewFValue)
					 end).


'skip_varint_Offer.Operation'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'skip_varint_Offer.Operation'(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6);
'skip_varint_Offer.Operation'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_Offer.Operation'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6).


'skip_length_delimited_Offer.Operation'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    'skip_length_delimited_Offer.Operation'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6);
'skip_length_delimited_Offer.Operation'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Offer.Operation'(Rest2, 0, 0, F1,
					 F2, F3, F4, F5, F6).


'skip_32_Offer.Operation'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_Offer.Operation'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6).


'skip_64_Offer.Operation'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_Offer.Operation'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6).


d_msg_Flag(Bin) ->
    dfp_read_field_def_Flag(Bin, 0, 0, id(undefined),
			    id(undefined)).

dfp_read_field_def_Flag(<<10, Rest/binary>>, Z1, Z2, F1,
			F2) ->
    d_field_Flag_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Flag(<<18, Rest/binary>>, Z1, Z2, F1,
			F2) ->
    d_field_Flag_value(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Flag(<<>>, 0, 0, F1, F2) ->
    #'Flag'{name = F1, value = F2};
dfp_read_field_def_Flag(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Flag(Other, Z1, Z2, F1, F2).

dg_read_field_def_Flag(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Flag(Rest, N + 7, X bsl N + Acc, F1,
			   F2);
dg_read_field_def_Flag(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Flag_name(Rest, 0, 0, F1, F2);
      18 -> d_field_Flag_value(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Flag(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Flag(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_Flag(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Flag(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Flag(<<>>, 0, 0, F1, F2) ->
    #'Flag'{name = F1, value = F2}.

d_field_Flag_name(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2)
    when N < 57 ->
    d_field_Flag_name(Rest, N + 7, X bsl N + Acc, F1, F2);
d_field_Flag_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Flag(Rest2, 0, 0, NewFValue, F2).


d_field_Flag_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2)
    when N < 57 ->
    d_field_Flag_value(Rest, N + 7, X bsl N + Acc, F1, F2);
d_field_Flag_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Flag(Rest2, 0, 0, F1, NewFValue).


skip_varint_Flag(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2) ->
    skip_varint_Flag(Rest, Z1, Z2, F1, F2);
skip_varint_Flag(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2) ->
    dfp_read_field_def_Flag(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Flag(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Flag(Rest, N + 7, X bsl N + Acc,
			       F1, F2);
skip_length_delimited_Flag(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Flag(Rest2, 0, 0, F1, F2).


skip_32_Flag(<<_:32, Rest/binary>>, Z1, Z2, F1, F2) ->
    dfp_read_field_def_Flag(Rest, Z1, Z2, F1, F2).


skip_64_Flag(<<_:64, Rest/binary>>, Z1, Z2, F1, F2) ->
    dfp_read_field_def_Flag(Rest, Z1, Z2, F1, F2).


'd_msg_Value.Text'(Bin) ->
    'dfp_read_field_def_Value.Text'(Bin, 0, 0,
				    id(undefined)).

'dfp_read_field_def_Value.Text'(<<10, Rest/binary>>, Z1,
				Z2, F1) ->
    'd_field_Value.Text_value'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Value.Text'(<<>>, 0, 0, F1) ->
    #'Value.Text'{value = F1};
'dfp_read_field_def_Value.Text'(Other, Z1, Z2, F1) ->
    'dg_read_field_def_Value.Text'(Other, Z1, Z2, F1).

'dg_read_field_def_Value.Text'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Value.Text'(Rest, N + 7,
				   X bsl N + Acc, F1);
'dg_read_field_def_Value.Text'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Value.Text_value'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Value.Text'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Value.Text'(Rest, 0, 0, F1);
	    2 -> 'skip_length_delimited_Value.Text'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Value.Text'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Value.Text'(<<>>, 0, 0, F1) ->
    #'Value.Text'{value = F1}.

'd_field_Value.Text_value'(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1)
    when N < 57 ->
    'd_field_Value.Text_value'(Rest, N + 7, X bsl N + Acc,
			       F1);
'd_field_Value.Text_value'(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Value.Text'(Rest2, 0, 0, NewFValue).


'skip_varint_Value.Text'(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    'skip_varint_Value.Text'(Rest, Z1, Z2, F1);
'skip_varint_Value.Text'(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1) ->
    'dfp_read_field_def_Value.Text'(Rest, Z1, Z2, F1).


'skip_length_delimited_Value.Text'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Value.Text'(Rest, N + 7,
				       X bsl N + Acc, F1);
'skip_length_delimited_Value.Text'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Value.Text'(Rest2, 0, 0, F1).


'skip_32_Value.Text'(<<_:32, Rest/binary>>, Z1, Z2,
		     F1) ->
    'dfp_read_field_def_Value.Text'(Rest, Z1, Z2, F1).


'skip_64_Value.Text'(<<_:64, Rest/binary>>, Z1, Z2,
		     F1) ->
    'dfp_read_field_def_Value.Text'(Rest, Z1, Z2, F1).


d_msg_Value(Bin) ->
    dfp_read_field_def_Value(Bin, 0, 0, id(undefined),
			     id(undefined), id(undefined), id(undefined),
			     id(undefined)).

dfp_read_field_def_Value(<<8, Rest/binary>>, Z1, Z2, F1,
			 F2, F3, F4, F5) ->
    d_field_Value_type(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_scalar(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<26, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_ranges(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<34, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_set(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<42, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5) ->
    d_field_Value_text(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Value(<<>>, 0, 0, F1, F2, F3, F4,
			 F5) ->
    #'Value'{type = F1, scalar = F2, ranges = F3, set = F4,
	     text = F5};
dfp_read_field_def_Value(Other, Z1, Z2, F1, F2, F3, F4,
			 F5) ->
    dg_read_field_def_Value(Other, Z1, Z2, F1, F2, F3, F4,
			    F5).

dg_read_field_def_Value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_Value(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5);
dg_read_field_def_Value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Value_type(Rest, 0, 0, F1, F2, F3, F4, F5);
      18 ->
	  d_field_Value_scalar(Rest, 0, 0, F1, F2, F3, F4, F5);
      26 ->
	  d_field_Value_ranges(Rest, 0, 0, F1, F2, F3, F4, F5);
      34 -> d_field_Value_set(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_Value_text(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Value(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_Value(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_Value(Rest, 0, 0, F1, F2, F3, F4,
					    F5);
	    5 -> skip_32_Value(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_Value(<<>>, 0, 0, F1, F2, F3, F4,
			F5) ->
    #'Value'{type = F1, scalar = F2, ranges = F3, set = F4,
	     text = F5}.

d_field_Value_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5);
d_field_Value_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Value.Type'(Tmp),
    dfp_read_field_def_Value(Rest, 0, 0, NewFValue, F2, F3,
			     F4, F5).


d_field_Value_scalar(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_scalar(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_Value_scalar(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Scalar'(Bs),
    dfp_read_field_def_Value(Rest2, 0, 0, F1,
			     if F2 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Scalar'(F2, NewFValue)
			     end,
			     F3, F4, F5).


d_field_Value_ranges(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_ranges(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_Value_ranges(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Ranges'(Bs),
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2,
			     if F3 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Ranges'(F3, NewFValue)
			     end,
			     F4, F5).


d_field_Value_set(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_set(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5);
d_field_Value_set(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Set'(Bs),
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2, F3,
			     if F4 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Set'(F4, NewFValue)
			     end,
			     F5).


d_field_Value_text(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Value_text(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5);
d_field_Value_text(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Text'(Bs),
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2, F3, F4,
			     if F5 == undefined -> NewFValue;
				true -> 'merge_msg_Value.Text'(F5, NewFValue)
			     end).


skip_varint_Value(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5) ->
    skip_varint_Value(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_Value(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5).


skip_length_delimited_Value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_Value(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
skip_length_delimited_Value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Value(Rest2, 0, 0, F1, F2, F3, F4,
			     F5).


skip_32_Value(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5).


skip_64_Value(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5) ->
    dfp_read_field_def_Value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5).


d_msg_Request(Bin) ->
    dfp_read_field_def_Request(Bin, 0, 0, id(undefined),
			       id([])).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_Request_agent_id(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2) ->
    d_field_Request_resources(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Request(<<>>, 0, 0, F1, F2) ->
    #'Request'{agent_id = F1,
	       resources = lists_reverse(F2)};
dfp_read_field_def_Request(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Request(Other, Z1, Z2, F1, F2).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Request_agent_id(Rest, 0, 0, F1, F2);
      18 -> d_field_Request_resources(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Request(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Request(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_Request(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Request(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F1, F2) ->
    #'Request'{agent_id = F1,
	       resources = lists_reverse(F2)}.

d_field_Request_agent_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2)
    when N < 57 ->
    d_field_Request_agent_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2);
d_field_Request_agent_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_Request(Rest2, 0, 0,
			       if F1 == undefined -> NewFValue;
				  true -> merge_msg_AgentID(F1, NewFValue)
			       end,
			       F2).


d_field_Request_resources(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2)
    when N < 57 ->
    d_field_Request_resources(Rest, N + 7, X bsl N + Acc,
			      F1, F2);
d_field_Request_resources(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_Request(Rest2, 0, 0, F1,
			       cons(NewFValue, F2)).


skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    skip_varint_Request(Rest, Z1, Z2, F1, F2);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F1, F2);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F1, F2).


skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1, F2).


skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F1,
		F2) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F1, F2).


d_msg_ContainerID(Bin) ->
    dfp_read_field_def_ContainerID(Bin, 0, 0,
				   id(undefined)).

dfp_read_field_def_ContainerID(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    d_field_ContainerID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_ContainerID(<<>>, 0, 0, F1) ->
    #'ContainerID'{value = F1};
dfp_read_field_def_ContainerID(Other, Z1, Z2, F1) ->
    dg_read_field_def_ContainerID(Other, Z1, Z2, F1).

dg_read_field_def_ContainerID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_ContainerID(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_ContainerID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_ContainerID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ContainerID(Rest, 0, 0, F1);
	    1 -> skip_64_ContainerID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_ContainerID(Rest, 0, 0, F1);
	    5 -> skip_32_ContainerID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_ContainerID(<<>>, 0, 0, F1) ->
    #'ContainerID'{value = F1}.

d_field_ContainerID_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 57 ->
    d_field_ContainerID_value(Rest, N + 7, X bsl N + Acc,
			      F1);
d_field_ContainerID_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ContainerID(Rest2, 0, 0, NewFValue).


skip_varint_ContainerID(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_ContainerID(Rest, Z1, Z2, F1);
skip_varint_ContainerID(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_ContainerID(Rest, Z1, Z2, F1).


skip_length_delimited_ContainerID(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_ContainerID(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_ContainerID(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ContainerID(Rest2, 0, 0, F1).


skip_32_ContainerID(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_ContainerID(Rest, Z1, Z2, F1).


skip_64_ContainerID(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_ContainerID(Rest, Z1, Z2, F1).


d_msg_Metric(Bin) ->
    dfp_read_field_def_Metric(Bin, 0, 0, id(undefined),
			      id(undefined)).

dfp_read_field_def_Metric(<<10, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    d_field_Metric_name(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Metric(<<17, Rest/binary>>, Z1, Z2,
			  F1, F2) ->
    d_field_Metric_value(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_Metric(<<>>, 0, 0, F1, F2) ->
    #'Metric'{name = F1, value = F2};
dfp_read_field_def_Metric(Other, Z1, Z2, F1, F2) ->
    dg_read_field_def_Metric(Other, Z1, Z2, F1, F2).

dg_read_field_def_Metric(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_Metric(Rest, N + 7, X bsl N + Acc, F1,
			     F2);
dg_read_field_def_Metric(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Metric_name(Rest, 0, 0, F1, F2);
      17 -> d_field_Metric_value(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Metric(Rest, 0, 0, F1, F2);
	    1 -> skip_64_Metric(Rest, 0, 0, F1, F2);
	    2 -> skip_length_delimited_Metric(Rest, 0, 0, F1, F2);
	    5 -> skip_32_Metric(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_Metric(<<>>, 0, 0, F1, F2) ->
    #'Metric'{name = F1, value = F2}.

d_field_Metric_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2)
    when N < 57 ->
    d_field_Metric_name(Rest, N + 7, X bsl N + Acc, F1, F2);
d_field_Metric_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Metric(Rest2, 0, 0, NewFValue, F2).


d_field_Metric_value(<<Value:64/little-float,
		       Rest/binary>>,
		     Z1, Z2, F1, _) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F1, Value).


skip_varint_Metric(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2) ->
    skip_varint_Metric(Rest, Z1, Z2, F1, F2);
skip_varint_Metric(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F1, F2) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F1, F2).


skip_length_delimited_Metric(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_Metric(Rest, N + 7, X bsl N + Acc,
				 F1, F2);
skip_length_delimited_Metric(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Metric(Rest2, 0, 0, F1, F2).


skip_32_Metric(<<_:32, Rest/binary>>, Z1, Z2, F1, F2) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F1, F2).


skip_64_Metric(<<_:64, Rest/binary>>, Z1, Z2, F1, F2) ->
    dfp_read_field_def_Metric(Rest, Z1, Z2, F1, F2).


'd_msg_Response.GetFileContents'(Bin) ->
    'dfp_read_field_def_Response.GetFileContents'(Bin, 0, 0,
						  id([])).

'dfp_read_field_def_Response.GetFileContents'(<<10,
						Rest/binary>>,
					      Z1, Z2, F1) ->
    'd_field_Response.GetFileContents_data'(Rest, Z1, Z2,
					    F1);
'dfp_read_field_def_Response.GetFileContents'(<<>>, 0,
					      0, F1) ->
    #'Response.GetFileContents'{data = lists_reverse(F1)};
'dfp_read_field_def_Response.GetFileContents'(Other, Z1,
					      Z2, F1) ->
    'dg_read_field_def_Response.GetFileContents'(Other, Z1,
						 Z2, F1).

'dg_read_field_def_Response.GetFileContents'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetFileContents'(Rest,
						 N + 7, X bsl N + Acc, F1);
'dg_read_field_def_Response.GetFileContents'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Response.GetFileContents_data'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Response.GetFileContents'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetFileContents'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetFileContents'(Rest,
								 0, 0, F1);
	    5 -> 'skip_32_Response.GetFileContents'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetFileContents'(<<>>, 0, 0,
					     F1) ->
    #'Response.GetFileContents'{data = lists_reverse(F1)}.

'd_field_Response.GetFileContents_data'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetFileContents_data'(Rest, N + 7,
					    X bsl N + Acc, F1);
'd_field_Response.GetFileContents_data'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    'dfp_read_field_def_Response.GetFileContents'(Rest2, 0,
						  0, cons(NewFValue, F1)).


'skip_varint_Response.GetFileContents'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'skip_varint_Response.GetFileContents'(Rest, Z1, Z2,
					   F1);
'skip_varint_Response.GetFileContents'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetFileContents'(Rest, Z1,
						  Z2, F1).


'skip_length_delimited_Response.GetFileContents'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetFileContents'(Rest,
						     N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Response.GetFileContents'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetFileContents'(Rest2, 0,
						  0, F1).


'skip_32_Response.GetFileContents'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetFileContents'(Rest, Z1,
						  Z2, F1).


'skip_64_Response.GetFileContents'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetFileContents'(Rest, Z1,
						  Z2, F1).


'd_msg_CgroupInfo.NetCls'(Bin) ->
    'dfp_read_field_def_CgroupInfo.NetCls'(Bin, 0, 0,
					   id(undefined)).

'dfp_read_field_def_CgroupInfo.NetCls'(<<8,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'd_field_CgroupInfo.NetCls_classid'(Rest, Z1, Z2, F1);
'dfp_read_field_def_CgroupInfo.NetCls'(<<>>, 0, 0,
				       F1) ->
    #'CgroupInfo.NetCls'{classid = F1};
'dfp_read_field_def_CgroupInfo.NetCls'(Other, Z1, Z2,
				       F1) ->
    'dg_read_field_def_CgroupInfo.NetCls'(Other, Z1, Z2,
					  F1).

'dg_read_field_def_CgroupInfo.NetCls'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_CgroupInfo.NetCls'(Rest, N + 7,
					  X bsl N + Acc, F1);
'dg_read_field_def_CgroupInfo.NetCls'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_CgroupInfo.NetCls_classid'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_CgroupInfo.NetCls'(Rest, 0, 0, F1);
	    1 -> 'skip_64_CgroupInfo.NetCls'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_CgroupInfo.NetCls'(Rest, 0, 0,
							  F1);
	    5 -> 'skip_32_CgroupInfo.NetCls'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_CgroupInfo.NetCls'(<<>>, 0, 0, F1) ->
    #'CgroupInfo.NetCls'{classid = F1}.

'd_field_CgroupInfo.NetCls_classid'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 57 ->
    'd_field_CgroupInfo.NetCls_classid'(Rest, N + 7,
					X bsl N + Acc, F1);
'd_field_CgroupInfo.NetCls_classid'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_CgroupInfo.NetCls'(Rest, 0, 0,
					   NewFValue).


'skip_varint_CgroupInfo.NetCls'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    'skip_varint_CgroupInfo.NetCls'(Rest, Z1, Z2, F1);
'skip_varint_CgroupInfo.NetCls'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    'dfp_read_field_def_CgroupInfo.NetCls'(Rest, Z1, Z2,
					   F1).


'skip_length_delimited_CgroupInfo.NetCls'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_CgroupInfo.NetCls'(Rest, N + 7,
					      X bsl N + Acc, F1);
'skip_length_delimited_CgroupInfo.NetCls'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_CgroupInfo.NetCls'(Rest2, 0, 0, F1).


'skip_32_CgroupInfo.NetCls'(<<_:32, Rest/binary>>, Z1,
			    Z2, F1) ->
    'dfp_read_field_def_CgroupInfo.NetCls'(Rest, Z1, Z2,
					   F1).


'skip_64_CgroupInfo.NetCls'(<<_:64, Rest/binary>>, Z1,
			    Z2, F1) ->
    'dfp_read_field_def_CgroupInfo.NetCls'(Rest, Z1, Z2,
					   F1).


'd_msg_Call.GetMetrics'(Bin) ->
    'dfp_read_field_def_Call.GetMetrics'(Bin, 0, 0,
					 id(undefined)).

'dfp_read_field_def_Call.GetMetrics'(<<10,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'd_field_Call.GetMetrics_timeout'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Call.GetMetrics'(<<>>, 0, 0, F1) ->
    #'Call.GetMetrics'{timeout = F1};
'dfp_read_field_def_Call.GetMetrics'(Other, Z1, Z2,
				     F1) ->
    'dg_read_field_def_Call.GetMetrics'(Other, Z1, Z2, F1).

'dg_read_field_def_Call.GetMetrics'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Call.GetMetrics'(Rest, N + 7,
					X bsl N + Acc, F1);
'dg_read_field_def_Call.GetMetrics'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Call.GetMetrics_timeout'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Call.GetMetrics'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Call.GetMetrics'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Call.GetMetrics'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Call.GetMetrics'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Call.GetMetrics'(<<>>, 0, 0, F1) ->
    #'Call.GetMetrics'{timeout = F1}.

'd_field_Call.GetMetrics_timeout'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    'd_field_Call.GetMetrics_timeout'(Rest, N + 7,
				      X bsl N + Acc, F1);
'd_field_Call.GetMetrics_timeout'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DurationInfo(Bs),
    'dfp_read_field_def_Call.GetMetrics'(Rest2, 0, 0,
					 if F1 == undefined -> NewFValue;
					    true ->
						merge_msg_DurationInfo(F1,
								       NewFValue)
					 end).


'skip_varint_Call.GetMetrics'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    'skip_varint_Call.GetMetrics'(Rest, Z1, Z2, F1);
'skip_varint_Call.GetMetrics'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F1) ->
    'dfp_read_field_def_Call.GetMetrics'(Rest, Z1, Z2, F1).


'skip_length_delimited_Call.GetMetrics'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Call.GetMetrics'(Rest, N + 7,
					    X bsl N + Acc, F1);
'skip_length_delimited_Call.GetMetrics'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Call.GetMetrics'(Rest2, 0, 0, F1).


'skip_32_Call.GetMetrics'(<<_:32, Rest/binary>>, Z1, Z2,
			  F1) ->
    'dfp_read_field_def_Call.GetMetrics'(Rest, Z1, Z2, F1).


'skip_64_Call.GetMetrics'(<<_:64, Rest/binary>>, Z1, Z2,
			  F1) ->
    'dfp_read_field_def_Call.GetMetrics'(Rest, Z1, Z2, F1).


d_msg_UdpStatistics(Bin) ->
    dfp_read_field_def_UdpStatistics(Bin, 0, 0,
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined)).

dfp_read_field_def_UdpStatistics(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_InDatagrams(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_NoPorts(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_InErrors(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_OutDatagrams(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_RcvbufErrors(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_SndbufErrors(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<56, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_InCsumErrors(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    d_field_UdpStatistics_IgnoredMulti(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8);
dfp_read_field_def_UdpStatistics(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8) ->
    #'UdpStatistics'{'InDatagrams' = F1, 'NoPorts' = F2,
		     'InErrors' = F3, 'OutDatagrams' = F4,
		     'RcvbufErrors' = F5, 'SndbufErrors' = F6,
		     'InCsumErrors' = F7, 'IgnoredMulti' = F8};
dfp_read_field_def_UdpStatistics(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7, F8) ->
    dg_read_field_def_UdpStatistics(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8).

dg_read_field_def_UdpStatistics(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 32 - 7 ->
    dg_read_field_def_UdpStatistics(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8);
dg_read_field_def_UdpStatistics(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UdpStatistics_InDatagrams(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8);
      16 ->
	  d_field_UdpStatistics_NoPorts(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8);
      24 ->
	  d_field_UdpStatistics_InErrors(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8);
      32 ->
	  d_field_UdpStatistics_OutDatagrams(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      40 ->
	  d_field_UdpStatistics_RcvbufErrors(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      48 ->
	  d_field_UdpStatistics_SndbufErrors(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      56 ->
	  d_field_UdpStatistics_InCsumErrors(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      64 ->
	  d_field_UdpStatistics_IgnoredMulti(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UdpStatistics(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8);
	    1 ->
		skip_64_UdpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8);
	    2 ->
		skip_length_delimited_UdpStatistics(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7, F8);
	    5 ->
		skip_32_UdpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8)
	  end
    end;
dg_read_field_def_UdpStatistics(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8) ->
    #'UdpStatistics'{'InDatagrams' = F1, 'NoPorts' = F2,
		     'InErrors' = F3, 'OutDatagrams' = F4,
		     'RcvbufErrors' = F5, 'SndbufErrors' = F6,
		     'InCsumErrors' = F7, 'IgnoredMulti' = F8}.

d_field_UdpStatistics_InDatagrams(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_InDatagrams(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8);
d_field_UdpStatistics_InDatagrams(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F2, F3, F4, F5, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7, F8).


d_field_UdpStatistics_NoPorts(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_NoPorts(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				  F8);
d_field_UdpStatistics_NoPorts(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, _, F3, F4, F5, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7, F8).


d_field_UdpStatistics_InErrors(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_InErrors(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8);
d_field_UdpStatistics_InErrors(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _, F4, F5, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7, F8).


d_field_UdpStatistics_OutDatagrams(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_OutDatagrams(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
d_field_UdpStatistics_OutDatagrams(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, _, F5, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1, F2, F3,
				     NewFValue, F5, F6, F7, F8).


d_field_UdpStatistics_RcvbufErrors(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_RcvbufErrors(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
d_field_UdpStatistics_RcvbufErrors(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, _, F6, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7, F8).


d_field_UdpStatistics_SndbufErrors(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_SndbufErrors(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
d_field_UdpStatistics_SndbufErrors(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7, F8).


d_field_UdpStatistics_InCsumErrors(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_InCsumErrors(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
d_field_UdpStatistics_InCsumErrors(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, _, F8) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, NewFValue, F8).


d_field_UdpStatistics_IgnoredMulti(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    d_field_UdpStatistics_IgnoredMulti(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8);
d_field_UdpStatistics_IgnoredMulti(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_UdpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, NewFValue).


skip_varint_UdpStatistics(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    skip_varint_UdpStatistics(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8);
skip_varint_UdpStatistics(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_UdpStatistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8).


skip_length_delimited_UdpStatistics(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8)
    when N < 57 ->
    skip_length_delimited_UdpStatistics(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8);
skip_length_delimited_UdpStatistics(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UdpStatistics(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8).


skip_32_UdpStatistics(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_UdpStatistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8).


skip_64_UdpStatistics(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8) ->
    dfp_read_field_def_UdpStatistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8).


d_msg_TcpStatistics(Bin) ->
    dfp_read_field_def_TcpStatistics(Bin, 0, 0,
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined)).

dfp_read_field_def_TcpStatistics(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_RtoAlgorithm(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<16, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_RtoMin(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15);
dfp_read_field_def_TcpStatistics(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_RtoMax(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15);
dfp_read_field_def_TcpStatistics(<<32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_MaxConn(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15);
dfp_read_field_def_TcpStatistics(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_ActiveOpens(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<48, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_PassiveOpens(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<56, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_AttemptFails(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_EstabResets(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<72, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_CurrEstab(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<80, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_InSegs(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15);
dfp_read_field_def_TcpStatistics(<<88, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_OutSegs(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15);
dfp_read_field_def_TcpStatistics(<<96, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_RetransSegs(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<104, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_InErrs(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15);
dfp_read_field_def_TcpStatistics(<<112, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_OutRsts(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15);
dfp_read_field_def_TcpStatistics(<<120, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15) ->
    d_field_TcpStatistics_InCsumErrors(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15);
dfp_read_field_def_TcpStatistics(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15) ->
    #'TcpStatistics'{'RtoAlgorithm' = F1, 'RtoMin' = F2,
		     'RtoMax' = F3, 'MaxConn' = F4, 'ActiveOpens' = F5,
		     'PassiveOpens' = F6, 'AttemptFails' = F7,
		     'EstabResets' = F8, 'CurrEstab' = F9, 'InSegs' = F10,
		     'OutSegs' = F11, 'RetransSegs' = F12, 'InErrs' = F13,
		     'OutRsts' = F14, 'InCsumErrors' = F15};
dfp_read_field_def_TcpStatistics(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15) ->
    dg_read_field_def_TcpStatistics(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15).

dg_read_field_def_TcpStatistics(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15)
    when N < 32 - 7 ->
    dg_read_field_def_TcpStatistics(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15);
dg_read_field_def_TcpStatistics(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_TcpStatistics_RtoAlgorithm(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15);
      16 ->
	  d_field_TcpStatistics_RtoMin(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15);
      24 ->
	  d_field_TcpStatistics_RtoMax(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15);
      32 ->
	  d_field_TcpStatistics_MaxConn(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15);
      40 ->
	  d_field_TcpStatistics_ActiveOpens(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15);
      48 ->
	  d_field_TcpStatistics_PassiveOpens(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15);
      56 ->
	  d_field_TcpStatistics_AttemptFails(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15);
      64 ->
	  d_field_TcpStatistics_EstabResets(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15);
      72 ->
	  d_field_TcpStatistics_CurrEstab(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15);
      80 ->
	  d_field_TcpStatistics_InSegs(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15);
      88 ->
	  d_field_TcpStatistics_OutSegs(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15);
      96 ->
	  d_field_TcpStatistics_RetransSegs(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15);
      104 ->
	  d_field_TcpStatistics_InErrs(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15);
      112 ->
	  d_field_TcpStatistics_OutRsts(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15);
      120 ->
	  d_field_TcpStatistics_InCsumErrors(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TcpStatistics(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15);
	    1 ->
		skip_64_TcpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15);
	    2 ->
		skip_length_delimited_TcpStatistics(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7, F8, F9,
						    F10, F11, F12, F13, F14,
						    F15);
	    5 ->
		skip_32_TcpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11, F12, F13, F14,
				      F15)
	  end
    end;
dg_read_field_def_TcpStatistics(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15) ->
    #'TcpStatistics'{'RtoAlgorithm' = F1, 'RtoMin' = F2,
		     'RtoMax' = F3, 'MaxConn' = F4, 'ActiveOpens' = F5,
		     'PassiveOpens' = F6, 'AttemptFails' = F7,
		     'EstabResets' = F8, 'CurrEstab' = F9, 'InSegs' = F10,
		     'OutSegs' = F11, 'RetransSegs' = F12, 'InErrs' = F13,
		     'OutRsts' = F14, 'InCsumErrors' = F15}.

d_field_TcpStatistics_RtoAlgorithm(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_RtoAlgorithm(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14,
				       F15);
d_field_TcpStatistics_RtoAlgorithm(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_RtoMin(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_RtoMin(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15);
d_field_TcpStatistics_RtoMin(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				     F11, F12, F13, F14, F15).


d_field_TcpStatistics_RtoMax(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_RtoMax(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15);
d_field_TcpStatistics_RtoMax(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2,
				     NewFValue, F4, F5, F6, F7, F8, F9, F10,
				     F11, F12, F13, F14, F15).


d_field_TcpStatistics_MaxConn(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_MaxConn(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_MaxConn(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     NewFValue, F5, F6, F7, F8, F9, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_ActiveOpens(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_ActiveOpens(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_ActiveOpens(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7, F8, F9, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_PassiveOpens(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_PassiveOpens(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14,
				       F15);
d_field_TcpStatistics_PassiveOpens(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, NewFValue, F7, F8, F9, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_AttemptFails(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_AttemptFails(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14,
				       F15);
d_field_TcpStatistics_AttemptFails(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				   F10, F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, NewFValue, F8, F9, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_EstabResets(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_EstabResets(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_EstabResets(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				  F10, F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, NewFValue, F9, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_CurrEstab(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_CurrEstab(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_CurrEstab(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, NewFValue, F10, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_InSegs(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_InSegs(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15);
d_field_TcpStatistics_InSegs(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11,
			     F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, NewFValue, F11,
				     F12, F13, F14, F15).


d_field_TcpStatistics_OutSegs(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_OutSegs(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_OutSegs(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      _, F12, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, NewFValue,
				     F12, F13, F14, F15).


d_field_TcpStatistics_RetransSegs(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_RetransSegs(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_RetransSegs(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, _, F13, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, F11,
				     NewFValue, F13, F14, F15).


d_field_TcpStatistics_InErrs(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_InErrs(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15);
d_field_TcpStatistics_InErrs(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, _, F14, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     NewFValue, F14, F15).


d_field_TcpStatistics_OutRsts(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_OutRsts(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15);
d_field_TcpStatistics_OutRsts(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, _, F15) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     NewFValue, F15).


d_field_TcpStatistics_InCsumErrors(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    d_field_TcpStatistics_InCsumErrors(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14,
				       F15);
d_field_TcpStatistics_InCsumErrors(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_TcpStatistics(Rest, 0, 0, F1, F2, F3,
				     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				     F14, NewFValue).


skip_varint_TcpStatistics(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15) ->
    skip_varint_TcpStatistics(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15);
skip_varint_TcpStatistics(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13, F14, F15) ->
    dfp_read_field_def_TcpStatistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15).


skip_length_delimited_TcpStatistics(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15)
    when N < 57 ->
    skip_length_delimited_TcpStatistics(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15);
skip_length_delimited_TcpStatistics(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TcpStatistics(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15).


skip_32_TcpStatistics(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		      F15) ->
    dfp_read_field_def_TcpStatistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15).


skip_64_TcpStatistics(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		      F15) ->
    dfp_read_field_def_TcpStatistics(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15).


d_msg_IpStatistics(Bin) ->
    dfp_read_field_def_IpStatistics(Bin, 0, 0,
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined), id(undefined),
				    id(undefined)).

dfp_read_field_def_IpStatistics(<<8, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_Forwarding(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<16, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_DefaultTTL(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<24, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_InReceives(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<32, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_InHdrErrors(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<40, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_InAddrErrors(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<48, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_ForwDatagrams(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<56, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_InUnknownProtos(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19);
dfp_read_field_def_IpStatistics(<<64, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_InDiscards(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<72, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_InDelivers(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<80, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_OutRequests(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<88, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_OutDiscards(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<96, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_OutNoRoutes(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<104, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_ReasmTimeout(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<112, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_ReasmReqds(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<120, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_ReasmOKs(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<128, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_ReasmFails(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<136, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_FragOKs(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<144, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_FragFails(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<152, 1, Rest/binary>>,
				Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    d_field_IpStatistics_FragCreates(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19);
dfp_read_field_def_IpStatistics(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
				F15, F16, F17, F18, F19) ->
    #'IpStatistics'{'Forwarding' = F1, 'DefaultTTL' = F2,
		    'InReceives' = F3, 'InHdrErrors' = F4,
		    'InAddrErrors' = F5, 'ForwDatagrams' = F6,
		    'InUnknownProtos' = F7, 'InDiscards' = F8,
		    'InDelivers' = F9, 'OutRequests' = F10,
		    'OutDiscards' = F11, 'OutNoRoutes' = F12,
		    'ReasmTimeout' = F13, 'ReasmReqds' = F14,
		    'ReasmOKs' = F15, 'ReasmFails' = F16, 'FragOKs' = F17,
		    'FragFails' = F18, 'FragCreates' = F19};
dfp_read_field_def_IpStatistics(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				F14, F15, F16, F17, F18, F19) ->
    dg_read_field_def_IpStatistics(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				   F13, F14, F15, F16, F17, F18, F19).

dg_read_field_def_IpStatistics(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 32 - 7 ->
    dg_read_field_def_IpStatistics(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19);
dg_read_field_def_IpStatistics(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_IpStatistics_Forwarding(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      16 ->
	  d_field_IpStatistics_DefaultTTL(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      24 ->
	  d_field_IpStatistics_InReceives(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      32 ->
	  d_field_IpStatistics_InHdrErrors(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19);
      40 ->
	  d_field_IpStatistics_InAddrErrors(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19);
      48 ->
	  d_field_IpStatistics_ForwDatagrams(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19);
      56 ->
	  d_field_IpStatistics_InUnknownProtos(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19);
      64 ->
	  d_field_IpStatistics_InDiscards(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      72 ->
	  d_field_IpStatistics_InDelivers(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      80 ->
	  d_field_IpStatistics_OutRequests(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19);
      88 ->
	  d_field_IpStatistics_OutDiscards(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19);
      96 ->
	  d_field_IpStatistics_OutNoRoutes(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19);
      104 ->
	  d_field_IpStatistics_ReasmTimeout(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19);
      112 ->
	  d_field_IpStatistics_ReasmReqds(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      120 ->
	  d_field_IpStatistics_ReasmOKs(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19);
      128 ->
	  d_field_IpStatistics_ReasmFails(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19);
      136 ->
	  d_field_IpStatistics_FragOKs(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13,
				       F14, F15, F16, F17, F18, F19);
      144 ->
	  d_field_IpStatistics_FragFails(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19);
      152 ->
	  d_field_IpStatistics_FragCreates(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_IpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6, F7, F8, F9, F10, F11, F12, F13,
					 F14, F15, F16, F17, F18, F19);
	    1 ->
		skip_64_IpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16, F17, F18, F19);
	    2 ->
		skip_length_delimited_IpStatistics(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19);
	    5 ->
		skip_32_IpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10, F11, F12, F13, F14, F15,
				     F16, F17, F18, F19)
	  end
    end;
dg_read_field_def_IpStatistics(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
			       F15, F16, F17, F18, F19) ->
    #'IpStatistics'{'Forwarding' = F1, 'DefaultTTL' = F2,
		    'InReceives' = F3, 'InHdrErrors' = F4,
		    'InAddrErrors' = F5, 'ForwDatagrams' = F6,
		    'InUnknownProtos' = F7, 'InDiscards' = F8,
		    'InDelivers' = F9, 'OutRequests' = F10,
		    'OutDiscards' = F11, 'OutNoRoutes' = F12,
		    'ReasmTimeout' = F13, 'ReasmReqds' = F14,
		    'ReasmOKs' = F15, 'ReasmFails' = F16, 'FragOKs' = F17,
		    'FragFails' = F18, 'FragCreates' = F19}.

d_field_IpStatistics_Forwarding(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_Forwarding(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_Forwarding(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, NewFValue,
				    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_DefaultTTL(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_DefaultTTL(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_DefaultTTL(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1,
				    NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				    F11, F12, F13, F14, F15, F16, F17, F18,
				    F19).


d_field_IpStatistics_InReceives(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_InReceives(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_InReceives(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2,
				    NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_InHdrErrors(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19)
    when N < 57 ->
    d_field_IpStatistics_InHdrErrors(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19);
d_field_IpStatistics_InHdrErrors(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    NewFValue, F5, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_InAddrErrors(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19)
    when N < 57 ->
    d_field_IpStatistics_InAddrErrors(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19);
d_field_IpStatistics_InAddrErrors(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, NewFValue, F6, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_ForwDatagrams(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19)
    when N < 57 ->
    d_field_IpStatistics_ForwDatagrams(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19);
d_field_IpStatistics_ForwDatagrams(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, NewFValue, F7, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_InUnknownProtos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19)
    when N < 57 ->
    d_field_IpStatistics_InUnknownProtos(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19);
d_field_IpStatistics_InUnknownProtos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, NewFValue, F8, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_InDiscards(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_InDiscards(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_InDiscards(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, NewFValue, F9, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_InDelivers(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_InDelivers(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_InDelivers(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, NewFValue, F10, F11,
				    F12, F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_OutRequests(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19)
    when N < 57 ->
    d_field_IpStatistics_OutRequests(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19);
d_field_IpStatistics_OutRequests(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				 F11, F12, F13, F14, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_OutDiscards(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19)
    when N < 57 ->
    d_field_IpStatistics_OutDiscards(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19);
d_field_IpStatistics_OutDiscards(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, _, F12, F13, F14, F15, F16, F17, F18,
				 F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				    F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_OutNoRoutes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19)
    when N < 57 ->
    d_field_IpStatistics_OutNoRoutes(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19);
d_field_IpStatistics_OutNoRoutes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, _, F13, F14, F15, F16, F17, F18,
				 F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, NewFValue,
				    F13, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_ReasmTimeout(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19)
    when N < 57 ->
    d_field_IpStatistics_ReasmTimeout(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19);
d_field_IpStatistics_ReasmTimeout(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, _, F14, F15, F16, F17, F18,
				  F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    NewFValue, F14, F15, F16, F17, F18, F19).


d_field_IpStatistics_ReasmReqds(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_ReasmReqds(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_ReasmReqds(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, _, F15, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    NewFValue, F15, F16, F17, F18, F19).


d_field_IpStatistics_ReasmOKs(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_ReasmOKs(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19);
d_field_IpStatistics_ReasmOKs(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, _, F16, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, NewFValue, F16, F17, F18, F19).


d_field_IpStatistics_ReasmFails(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_ReasmFails(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19);
d_field_IpStatistics_ReasmFails(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, _, F17, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, NewFValue, F17, F18, F19).


d_field_IpStatistics_FragOKs(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_FragOKs(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13, F14, F15, F16, F17, F18, F19);
d_field_IpStatistics_FragOKs(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13, F14, F15, F16, _, F18, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16, NewFValue, F18, F19).


d_field_IpStatistics_FragFails(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19)
    when N < 57 ->
    d_field_IpStatistics_FragFails(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19);
d_field_IpStatistics_FragFails(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, _, F19) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16, F17, NewFValue, F19).


d_field_IpStatistics_FragCreates(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19)
    when N < 57 ->
    d_field_IpStatistics_FragCreates(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19);
d_field_IpStatistics_FragCreates(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IpStatistics(Rest, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16, F17, F18, NewFValue).


skip_varint_IpStatistics(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19) ->
    skip_varint_IpStatistics(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			     F16, F17, F18, F19);
skip_varint_IpStatistics(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14, F15, F16, F17, F18, F19) ->
    dfp_read_field_def_IpStatistics(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19).


skip_length_delimited_IpStatistics(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19)
    when N < 57 ->
    skip_length_delimited_IpStatistics(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19);
skip_length_delimited_IpStatistics(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IpStatistics(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14, F15, F16, F17, F18, F19).


skip_32_IpStatistics(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		     F15, F16, F17, F18, F19) ->
    dfp_read_field_def_IpStatistics(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19).


skip_64_IpStatistics(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14,
		     F15, F16, F17, F18, F19) ->
    dfp_read_field_def_IpStatistics(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19).


'd_msg_Response.GetMetrics'(Bin) ->
    'dfp_read_field_def_Response.GetMetrics'(Bin, 0, 0,
					     id([])).

'dfp_read_field_def_Response.GetMetrics'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'd_field_Response.GetMetrics_metrics'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Response.GetMetrics'(<<>>, 0, 0,
					 F1) ->
    #'Response.GetMetrics'{metrics = lists_reverse(F1)};
'dfp_read_field_def_Response.GetMetrics'(Other, Z1, Z2,
					 F1) ->
    'dg_read_field_def_Response.GetMetrics'(Other, Z1, Z2,
					    F1).

'dg_read_field_def_Response.GetMetrics'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetMetrics'(Rest, N + 7,
					    X bsl N + Acc, F1);
'dg_read_field_def_Response.GetMetrics'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Response.GetMetrics_metrics'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Response.GetMetrics'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetMetrics'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetMetrics'(Rest, 0, 0,
							    F1);
	    5 -> 'skip_32_Response.GetMetrics'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetMetrics'(<<>>, 0, 0,
					F1) ->
    #'Response.GetMetrics'{metrics = lists_reverse(F1)}.

'd_field_Response.GetMetrics_metrics'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetMetrics_metrics'(Rest, N + 7,
					  X bsl N + Acc, F1);
'd_field_Response.GetMetrics_metrics'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Metric(Bs),
    'dfp_read_field_def_Response.GetMetrics'(Rest2, 0, 0,
					     cons(NewFValue, F1)).


'skip_varint_Response.GetMetrics'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'skip_varint_Response.GetMetrics'(Rest, Z1, Z2, F1);
'skip_varint_Response.GetMetrics'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetMetrics'(Rest, Z1, Z2,
					     F1).


'skip_length_delimited_Response.GetMetrics'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetMetrics'(Rest, N + 7,
						X bsl N + Acc, F1);
'skip_length_delimited_Response.GetMetrics'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetMetrics'(Rest2, 0, 0,
					     F1).


'skip_32_Response.GetMetrics'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_Response.GetMetrics'(Rest, Z1, Z2,
					     F1).


'skip_64_Response.GetMetrics'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_Response.GetMetrics'(Rest, Z1, Z2,
					     F1).


d_msg_VersionInfo(Bin) ->
    dfp_read_field_def_VersionInfo(Bin, 0, 0, id(undefined),
				   id(undefined), id(undefined), id(undefined),
				   id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_VersionInfo(<<10, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_version(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<18, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_build_date(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<25, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_build_time(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<34, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_build_user(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<42, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_git_sha(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<50, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_git_branch(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<58, Rest/binary>>, Z1,
			       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_VersionInfo_git_tag(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_VersionInfo(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6, F7) ->
    #'VersionInfo'{version = F1, build_date = F2,
		   build_time = F3, build_user = F4, git_sha = F5,
		   git_branch = F6, git_tag = F7};
dfp_read_field_def_VersionInfo(Other, Z1, Z2, F1, F2,
			       F3, F4, F5, F6, F7) ->
    dg_read_field_def_VersionInfo(Other, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7).

dg_read_field_def_VersionInfo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_VersionInfo(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_VersionInfo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_VersionInfo_version(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      18 ->
	  d_field_VersionInfo_build_date(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      25 ->
	  d_field_VersionInfo_build_time(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      34 ->
	  d_field_VersionInfo_build_user(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      42 ->
	  d_field_VersionInfo_git_sha(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      50 ->
	  d_field_VersionInfo_git_branch(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7);
      58 ->
	  d_field_VersionInfo_git_tag(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_VersionInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
					F6, F7);
	    1 ->
		skip_64_VersionInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7);
	    2 ->
		skip_length_delimited_VersionInfo(Rest, 0, 0, F1, F2,
						  F3, F4, F5, F6, F7);
	    5 ->
		skip_32_VersionInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				    F7)
	  end
    end;
dg_read_field_def_VersionInfo(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7) ->
    #'VersionInfo'{version = F1, build_date = F2,
		   build_time = F3, build_user = F4, git_sha = F5,
		   git_branch = F6, git_tag = F7}.

d_field_VersionInfo_version(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_VersionInfo_version(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_VersionInfo_version(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, NewFValue,
				   F2, F3, F4, F5, F6, F7).


d_field_VersionInfo_build_date(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_VersionInfo_build_date(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_VersionInfo_build_date(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, F1,
				   NewFValue, F3, F4, F5, F6, F7).


d_field_VersionInfo_build_time(<<Value:64/little-float,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, _, F4, F5, F6, F7) ->
    dfp_read_field_def_VersionInfo(Rest, Z1, Z2, F1, F2,
				   Value, F4, F5, F6, F7).


d_field_VersionInfo_build_user(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_VersionInfo_build_user(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_VersionInfo_build_user(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, _, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, F1, F2, F3,
				   NewFValue, F5, F6, F7).


d_field_VersionInfo_git_sha(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_VersionInfo_git_sha(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_VersionInfo_git_sha(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, NewFValue, F6, F7).


d_field_VersionInfo_git_branch(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_VersionInfo_git_branch(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
d_field_VersionInfo_git_branch(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, _, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, NewFValue, F7).


d_field_VersionInfo_git_tag(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_VersionInfo_git_tag(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_VersionInfo_git_tag(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, NewFValue).


skip_varint_VersionInfo(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_VersionInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7);
skip_varint_VersionInfo(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_VersionInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7).


skip_length_delimited_VersionInfo(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_VersionInfo(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				      F7);
skip_length_delimited_VersionInfo(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_VersionInfo(Rest2, 0, 0, F1, F2, F3,
				   F4, F5, F6, F7).


skip_32_VersionInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_VersionInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7).


skip_64_VersionInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		    F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_VersionInfo(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7).


d_msg_Address(Bin) ->
    dfp_read_field_def_Address(Bin, 0, 0, id(undefined),
			       id(undefined), id(undefined)).

dfp_read_field_def_Address(<<10, Rest/binary>>, Z1, Z2,
			   F1, F2, F3) ->
    d_field_Address_hostname(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_Address(<<18, Rest/binary>>, Z1, Z2,
			   F1, F2, F3) ->
    d_field_Address_ip(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_Address(<<24, Rest/binary>>, Z1, Z2,
			   F1, F2, F3) ->
    d_field_Address_port(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_Address(<<>>, 0, 0, F1, F2, F3) ->
    #'Address'{hostname = F1, ip = F2, port = F3};
dfp_read_field_def_Address(Other, Z1, Z2, F1, F2, F3) ->
    dg_read_field_def_Address(Other, Z1, Z2, F1, F2, F3).

dg_read_field_def_Address(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_Address(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
dg_read_field_def_Address(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Address_hostname(Rest, 0, 0, F1, F2, F3);
      18 -> d_field_Address_ip(Rest, 0, 0, F1, F2, F3);
      24 -> d_field_Address_port(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Address(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_Address(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_Address(Rest, 0, 0, F1, F2, F3);
	    5 -> skip_32_Address(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_Address(<<>>, 0, 0, F1, F2, F3) ->
    #'Address'{hostname = F1, ip = F2, port = F3}.

d_field_Address_hostname(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3)
    when N < 57 ->
    d_field_Address_hostname(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3);
d_field_Address_hostname(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Address(Rest2, 0, 0, NewFValue, F2,
			       F3).


d_field_Address_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3)
    when N < 57 ->
    d_field_Address_ip(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3);
d_field_Address_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Address(Rest2, 0, 0, F1, NewFValue,
			       F3).


d_field_Address_port(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3)
    when N < 57 ->
    d_field_Address_port(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3);
d_field_Address_port(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, _) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_Address(Rest, 0, 0, F1, F2,
			       NewFValue).


skip_varint_Address(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3) ->
    skip_varint_Address(Rest, Z1, Z2, F1, F2, F3);
skip_varint_Address(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1, F2, F3) ->
    dfp_read_field_def_Address(Rest, Z1, Z2, F1, F2, F3).


skip_length_delimited_Address(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_Address(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3);
skip_length_delimited_Address(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Address(Rest2, 0, 0, F1, F2, F3).


skip_32_Address(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		F3) ->
    dfp_read_field_def_Address(Rest, Z1, Z2, F1, F2, F3).


skip_64_Address(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		F3) ->
    dfp_read_field_def_Address(Rest, Z1, Z2, F1, F2, F3).


d_msg_MasterInfo(Bin) ->
    dfp_read_field_def_MasterInfo(Bin, 0, 0, id(undefined),
				  id(undefined), id(undefined), id(undefined),
				  id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_MasterInfo(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_MasterInfo(<<16, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_ip(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_MasterInfo(<<24, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_port(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7);
dfp_read_field_def_MasterInfo(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_pid(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7);
dfp_read_field_def_MasterInfo(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_hostname(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7);
dfp_read_field_def_MasterInfo(<<50, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_version(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_MasterInfo(<<58, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7) ->
    d_field_MasterInfo_address(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7);
dfp_read_field_def_MasterInfo(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7) ->
    #'MasterInfo'{id = F1, ip = F2, port = F3, pid = F4,
		  hostname = F5, version = F6, address = F7};
dfp_read_field_def_MasterInfo(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7) ->
    dg_read_field_def_MasterInfo(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7).

dg_read_field_def_MasterInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_MasterInfo(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_MasterInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MasterInfo_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      16 ->
	  d_field_MasterInfo_ip(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      24 ->
	  d_field_MasterInfo_port(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7);
      34 ->
	  d_field_MasterInfo_pid(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7);
      42 ->
	  d_field_MasterInfo_hostname(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7);
      50 ->
	  d_field_MasterInfo_version(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      58 ->
	  d_field_MasterInfo_address(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MasterInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7);
	    1 ->
		skip_64_MasterInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7);
	    2 ->
		skip_length_delimited_MasterInfo(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7);
	    5 ->
		skip_32_MasterInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7)
	  end
    end;
dg_read_field_def_MasterInfo(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7) ->
    #'MasterInfo'{id = F1, ip = F2, port = F3, pid = F4,
		  hostname = F5, version = F6, address = F7}.

d_field_MasterInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_id(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, NewFValue,
				  F2, F3, F4, F5, F6, F7).


d_field_MasterInfo_ip(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_ip(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_ip(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_MasterInfo(Rest, 0, 0, F1, NewFValue,
				  F3, F4, F5, F6, F7).


d_field_MasterInfo_port(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_port(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_port(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, _, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_MasterInfo(Rest, 0, 0, F1, F2,
				  NewFValue, F4, F5, F6, F7).


d_field_MasterInfo_pid(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_pid(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_pid(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, _, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, F1, F2, F3,
				  NewFValue, F5, F6, F7).


d_field_MasterInfo_hostname(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_hostname(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_hostname(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, _, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, F1, F2, F3,
				  F4, NewFValue, F6, F7).


d_field_MasterInfo_version(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_version(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_version(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, _, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, NewFValue, F7).


d_field_MasterInfo_address(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_MasterInfo_address(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
d_field_MasterInfo_address(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Address(Bs),
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6,
				  if F7 == undefined -> NewFValue;
				     true -> merge_msg_Address(F7, NewFValue)
				  end).


skip_varint_MasterInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_MasterInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7);
skip_varint_MasterInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_MasterInfo(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7).


skip_length_delimited_MasterInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_MasterInfo(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
skip_length_delimited_MasterInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MasterInfo(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7).


skip_32_MasterInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_MasterInfo(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7).


skip_64_MasterInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_MasterInfo(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7).


'd_msg_FrameworkInfo.Capability'(Bin) ->
    'dfp_read_field_def_FrameworkInfo.Capability'(Bin, 0, 0,
						  id(undefined)).

'dfp_read_field_def_FrameworkInfo.Capability'(<<8,
						Rest/binary>>,
					      Z1, Z2, F1) ->
    'd_field_FrameworkInfo.Capability_type'(Rest, Z1, Z2,
					    F1);
'dfp_read_field_def_FrameworkInfo.Capability'(<<>>, 0,
					      0, F1) ->
    #'FrameworkInfo.Capability'{type = F1};
'dfp_read_field_def_FrameworkInfo.Capability'(Other, Z1,
					      Z2, F1) ->
    'dg_read_field_def_FrameworkInfo.Capability'(Other, Z1,
						 Z2, F1).

'dg_read_field_def_FrameworkInfo.Capability'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_FrameworkInfo.Capability'(Rest,
						 N + 7, X bsl N + Acc, F1);
'dg_read_field_def_FrameworkInfo.Capability'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_FrameworkInfo.Capability_type'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_FrameworkInfo.Capability'(Rest, 0, 0, F1);
	    1 -> 'skip_64_FrameworkInfo.Capability'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_FrameworkInfo.Capability'(Rest,
								 0, 0, F1);
	    5 -> 'skip_32_FrameworkInfo.Capability'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_FrameworkInfo.Capability'(<<>>, 0, 0,
					     F1) ->
    #'FrameworkInfo.Capability'{type = F1}.

'd_field_FrameworkInfo.Capability_type'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'd_field_FrameworkInfo.Capability_type'(Rest, N + 7,
					    X bsl N + Acc, F1);
'd_field_FrameworkInfo.Capability_type'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_FrameworkInfo.Capability.Type'(Tmp),
    'dfp_read_field_def_FrameworkInfo.Capability'(Rest, 0,
						  0, NewFValue).


'skip_varint_FrameworkInfo.Capability'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'skip_varint_FrameworkInfo.Capability'(Rest, Z1, Z2,
					   F1);
'skip_varint_FrameworkInfo.Capability'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'dfp_read_field_def_FrameworkInfo.Capability'(Rest, Z1,
						  Z2, F1).


'skip_length_delimited_FrameworkInfo.Capability'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_FrameworkInfo.Capability'(Rest,
						     N + 7, X bsl N + Acc, F1);
'skip_length_delimited_FrameworkInfo.Capability'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_FrameworkInfo.Capability'(Rest2, 0,
						  0, F1).


'skip_32_FrameworkInfo.Capability'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_FrameworkInfo.Capability'(Rest, Z1,
						  Z2, F1).


'skip_64_FrameworkInfo.Capability'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_FrameworkInfo.Capability'(Rest, Z1,
						  Z2, F1).


d_msg_FrameworkInfo(Bin) ->
    dfp_read_field_def_FrameworkInfo(Bin, 0, 0,
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id(undefined),
				     id(undefined), id([]), id(undefined)).

dfp_read_field_def_FrameworkInfo(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_user(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_name(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<26, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<33, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_failover_timeout(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11);
dfp_read_field_def_FrameworkInfo(<<40, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_checkpoint(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<50, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_role(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<58, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_hostname(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<66, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_principal(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<74, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_webui_url(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<82, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_capabilities(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<90, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11) ->
    d_field_FrameworkInfo_labels(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11);
dfp_read_field_def_FrameworkInfo(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11) ->
    #'FrameworkInfo'{user = F1, name = F2, id = F3,
		     failover_timeout = F4, checkpoint = F5, role = F6,
		     hostname = F7, principal = F8, webui_url = F9,
		     capabilities = lists_reverse(F10), labels = F11};
dfp_read_field_def_FrameworkInfo(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dg_read_field_def_FrameworkInfo(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11).

dg_read_field_def_FrameworkInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11)
    when N < 32 - 7 ->
    dg_read_field_def_FrameworkInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11);
dg_read_field_def_FrameworkInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FrameworkInfo_user(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11);
      18 ->
	  d_field_FrameworkInfo_name(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11);
      26 ->
	  d_field_FrameworkInfo_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11);
      33 ->
	  d_field_FrameworkInfo_failover_timeout(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11);
      40 ->
	  d_field_FrameworkInfo_checkpoint(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11);
      50 ->
	  d_field_FrameworkInfo_role(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11);
      58 ->
	  d_field_FrameworkInfo_hostname(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11);
      66 ->
	  d_field_FrameworkInfo_principal(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11);
      74 ->
	  d_field_FrameworkInfo_webui_url(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11);
      82 ->
	  d_field_FrameworkInfo_capabilities(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11);
      90 ->
	  d_field_FrameworkInfo_labels(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FrameworkInfo(Rest, 0, 0, F1, F2, F3, F4,
					  F5, F6, F7, F8, F9, F10, F11);
	    1 ->
		skip_64_FrameworkInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11);
	    2 ->
		skip_length_delimited_FrameworkInfo(Rest, 0, 0, F1, F2,
						    F3, F4, F5, F6, F7, F8, F9,
						    F10, F11);
	    5 ->
		skip_32_FrameworkInfo(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6, F7, F8, F9, F10, F11)
	  end
    end;
dg_read_field_def_FrameworkInfo(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11) ->
    #'FrameworkInfo'{user = F1, name = F2, id = F3,
		     failover_timeout = F4, checkpoint = F5, role = F6,
		     hostname = F7, principal = F8, webui_url = F9,
		     capabilities = lists_reverse(F10), labels = F11}.

d_field_FrameworkInfo_user(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_FrameworkInfo_user(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_FrameworkInfo_user(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, NewFValue,
				     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11).


d_field_FrameworkInfo_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_FrameworkInfo_name(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_FrameworkInfo_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				     F11).


d_field_FrameworkInfo_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_FrameworkInfo_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_FrameworkInfo_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     if F3 == undefined -> NewFValue;
					true ->
					    merge_msg_FrameworkID(F3, NewFValue)
				     end,
				     F4, F5, F6, F7, F8, F9, F10, F11).


d_field_FrameworkInfo_failover_timeout(<<Value:64/little-float,
					 Rest/binary>>,
				       Z1, Z2, F1, F2, F3, _, F5, F6, F7, F8,
				       F9, F10, F11) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, Value, F5, F6, F7, F8, F9, F10, F11).


d_field_FrameworkInfo_checkpoint(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11)
    when N < 57 ->
    d_field_FrameworkInfo_checkpoint(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11);
d_field_FrameworkInfo_checkpoint(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10,
				 F11) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_FrameworkInfo(Rest, 0, 0, F1, F2, F3,
				     F4, NewFValue, F6, F7, F8, F9, F10, F11).


d_field_FrameworkInfo_role(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11)
    when N < 57 ->
    d_field_FrameworkInfo_role(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_FrameworkInfo_role(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, NewFValue, F7, F8, F9, F10,
				     F11).


d_field_FrameworkInfo_hostname(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11)
    when N < 57 ->
    d_field_FrameworkInfo_hostname(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11);
d_field_FrameworkInfo_hostname(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9, F10,
			       F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, NewFValue, F8, F9, F10,
				     F11).


d_field_FrameworkInfo_principal(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11)
    when N < 57 ->
    d_field_FrameworkInfo_principal(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11);
d_field_FrameworkInfo_principal(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9, F10,
				F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, NewFValue, F9, F10,
				     F11).


d_field_FrameworkInfo_webui_url(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11)
    when N < 57 ->
    d_field_FrameworkInfo_webui_url(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11);
d_field_FrameworkInfo_webui_url(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, NewFValue, F10,
				     F11).


d_field_FrameworkInfo_capabilities(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11)
    when N < 57 ->
    d_field_FrameworkInfo_capabilities(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11);
d_field_FrameworkInfo_capabilities(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_FrameworkInfo.Capability'(Bs),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9,
				     cons(NewFValue, F10), F11).


d_field_FrameworkInfo_labels(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11)
    when N < 57 ->
    d_field_FrameworkInfo_labels(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11);
d_field_FrameworkInfo_labels(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10,
				     if F11 == undefined -> NewFValue;
					true -> merge_msg_Labels(F11, NewFValue)
				     end).


skip_varint_FrameworkInfo(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    skip_varint_FrameworkInfo(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11);
skip_varint_FrameworkInfo(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11).


skip_length_delimited_FrameworkInfo(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11)
    when N < 57 ->
    skip_length_delimited_FrameworkInfo(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11);
skip_length_delimited_FrameworkInfo(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FrameworkInfo(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11).


skip_32_FrameworkInfo(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11).


skip_64_FrameworkInfo(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11) ->
    dfp_read_field_def_FrameworkInfo(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11).


d_msg_URL(Bin) ->
    dfp_read_field_def_URL(Bin, 0, 0, id(undefined),
			   id(undefined), id(undefined), id([]), id(undefined)).

dfp_read_field_def_URL(<<10, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5) ->
    d_field_URL_scheme(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_URL(<<18, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5) ->
    d_field_URL_address(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_URL(<<26, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5) ->
    d_field_URL_path(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_URL(<<34, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5) ->
    d_field_URL_query(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_URL(<<42, Rest/binary>>, Z1, Z2, F1,
		       F2, F3, F4, F5) ->
    d_field_URL_fragment(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_URL(<<>>, 0, 0, F1, F2, F3, F4,
		       F5) ->
    #'URL'{scheme = F1, address = F2, path = F3,
	   query = lists_reverse(F4), fragment = F5};
dfp_read_field_def_URL(Other, Z1, Z2, F1, F2, F3, F4,
		       F5) ->
    dg_read_field_def_URL(Other, Z1, Z2, F1, F2, F3, F4,
			  F5).

dg_read_field_def_URL(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_URL(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5);
dg_read_field_def_URL(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_URL_scheme(Rest, 0, 0, F1, F2, F3, F4, F5);
      18 ->
	  d_field_URL_address(Rest, 0, 0, F1, F2, F3, F4, F5);
      26 -> d_field_URL_path(Rest, 0, 0, F1, F2, F3, F4, F5);
      34 -> d_field_URL_query(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_URL_fragment(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_URL(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_URL(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_URL(Rest, 0, 0, F1, F2, F3, F4,
					  F5);
	    5 -> skip_32_URL(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_URL(<<>>, 0, 0, F1, F2, F3, F4, F5) ->
    #'URL'{scheme = F1, address = F2, path = F3,
	   query = lists_reverse(F4), fragment = F5}.

d_field_URL_scheme(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_URL_scheme(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5);
d_field_URL_scheme(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_URL(Rest2, 0, 0, NewFValue, F2, F3,
			   F4, F5).


d_field_URL_address(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_URL_address(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5);
d_field_URL_address(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Address(Bs),
    dfp_read_field_def_URL(Rest2, 0, 0, F1,
			   if F2 == undefined -> NewFValue;
			      true -> merge_msg_Address(F2, NewFValue)
			   end,
			   F3, F4, F5).


d_field_URL_path(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5)
    when N < 57 ->
    d_field_URL_path(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5);
d_field_URL_path(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, _, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_URL(Rest2, 0, 0, F1, F2, NewFValue,
			   F4, F5).


d_field_URL_query(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5)
    when N < 57 ->
    d_field_URL_query(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5);
d_field_URL_query(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Parameter(Bs),
    dfp_read_field_def_URL(Rest2, 0, 0, F1, F2, F3,
			   cons(NewFValue, F4), F5).


d_field_URL_fragment(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_URL_fragment(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_URL_fragment(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_URL(Rest2, 0, 0, F1, F2, F3, F4,
			   NewFValue).


skip_varint_URL(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5) ->
    skip_varint_URL(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_URL(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		F2, F3, F4, F5) ->
    dfp_read_field_def_URL(Rest, Z1, Z2, F1, F2, F3, F4,
			   F5).


skip_length_delimited_URL(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_URL(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5);
skip_length_delimited_URL(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_URL(Rest2, 0, 0, F1, F2, F3, F4, F5).


skip_32_URL(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5) ->
    dfp_read_field_def_URL(Rest, Z1, Z2, F1, F2, F3, F4,
			   F5).


skip_64_URL(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	    F4, F5) ->
    dfp_read_field_def_URL(Rest, Z1, Z2, F1, F2, F3, F4,
			   F5).


'd_msg_Call.ReadFile'(Bin) ->
    'dfp_read_field_def_Call.ReadFile'(Bin, 0, 0,
				       id(undefined), id(undefined),
				       id(undefined)).

'dfp_read_field_def_Call.ReadFile'(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'd_field_Call.ReadFile_path'(Rest, Z1, Z2, F1, F2, F3);
'dfp_read_field_def_Call.ReadFile'(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'd_field_Call.ReadFile_offset'(Rest, Z1, Z2, F1, F2,
				   F3);
'dfp_read_field_def_Call.ReadFile'(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    'd_field_Call.ReadFile_length'(Rest, Z1, Z2, F1, F2,
				   F3);
'dfp_read_field_def_Call.ReadFile'(<<>>, 0, 0, F1, F2,
				   F3) ->
    #'Call.ReadFile'{path = F1, offset = F2, length = F3};
'dfp_read_field_def_Call.ReadFile'(Other, Z1, Z2, F1,
				   F2, F3) ->
    'dg_read_field_def_Call.ReadFile'(Other, Z1, Z2, F1, F2,
				      F3).

'dg_read_field_def_Call.ReadFile'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    'dg_read_field_def_Call.ReadFile'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
'dg_read_field_def_Call.ReadFile'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Call.ReadFile_path'(Rest, 0, 0, F1, F2, F3);
      18 ->
	  'd_field_Call.ReadFile_offset'(Rest, 0, 0, F1, F2, F3);
      26 ->
	  'd_field_Call.ReadFile_length'(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Call.ReadFile'(Rest, 0, 0, F1, F2, F3);
	    1 -> 'skip_64_Call.ReadFile'(Rest, 0, 0, F1, F2, F3);
	    2 ->
		'skip_length_delimited_Call.ReadFile'(Rest, 0, 0, F1,
						      F2, F3);
	    5 -> 'skip_32_Call.ReadFile'(Rest, 0, 0, F1, F2, F3)
	  end
    end;
'dg_read_field_def_Call.ReadFile'(<<>>, 0, 0, F1, F2,
				  F3) ->
    #'Call.ReadFile'{path = F1, offset = F2, length = F3}.

'd_field_Call.ReadFile_path'(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Call.ReadFile_path'(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
'd_field_Call.ReadFile_path'(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F2, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Call.ReadFile'(Rest2, 0, 0,
				       NewFValue, F2, F3).


'd_field_Call.ReadFile_offset'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Call.ReadFile_offset'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
'd_field_Call.ReadFile_offset'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Call.ReadFile'(Rest2, 0, 0, F1,
				       NewFValue, F3).


'd_field_Call.ReadFile_length'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3)
    when N < 57 ->
    'd_field_Call.ReadFile_length'(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3);
'd_field_Call.ReadFile_length'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Call.ReadFile'(Rest2, 0, 0, F1, F2,
				       NewFValue).


'skip_varint_Call.ReadFile'(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    'skip_varint_Call.ReadFile'(Rest, Z1, Z2, F1, F2, F3);
'skip_varint_Call.ReadFile'(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    'dfp_read_field_def_Call.ReadFile'(Rest, Z1, Z2, F1, F2,
				       F3).


'skip_length_delimited_Call.ReadFile'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    'skip_length_delimited_Call.ReadFile'(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
'skip_length_delimited_Call.ReadFile'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Call.ReadFile'(Rest2, 0, 0, F1, F2,
				       F3).


'skip_32_Call.ReadFile'(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    'dfp_read_field_def_Call.ReadFile'(Rest, Z1, Z2, F1, F2,
				       F3).


'skip_64_Call.ReadFile'(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    'dfp_read_field_def_Call.ReadFile'(Rest, Z1, Z2, F1, F2,
				       F3).


'd_msg_Call.ListFiles'(Bin) ->
    'dfp_read_field_def_Call.ListFiles'(Bin, 0, 0,
					id(undefined)).

'dfp_read_field_def_Call.ListFiles'(<<10, Rest/binary>>,
				    Z1, Z2, F1) ->
    'd_field_Call.ListFiles_path'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Call.ListFiles'(<<>>, 0, 0, F1) ->
    #'Call.ListFiles'{path = F1};
'dfp_read_field_def_Call.ListFiles'(Other, Z1, Z2,
				    F1) ->
    'dg_read_field_def_Call.ListFiles'(Other, Z1, Z2, F1).

'dg_read_field_def_Call.ListFiles'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Call.ListFiles'(Rest, N + 7,
				       X bsl N + Acc, F1);
'dg_read_field_def_Call.ListFiles'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Call.ListFiles_path'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Call.ListFiles'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Call.ListFiles'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Call.ListFiles'(Rest, 0, 0, F1);
	    5 -> 'skip_32_Call.ListFiles'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Call.ListFiles'(<<>>, 0, 0, F1) ->
    #'Call.ListFiles'{path = F1}.

'd_field_Call.ListFiles_path'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    'd_field_Call.ListFiles_path'(Rest, N + 7,
				  X bsl N + Acc, F1);
'd_field_Call.ListFiles_path'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Call.ListFiles'(Rest2, 0, 0,
					NewFValue).


'skip_varint_Call.ListFiles'(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    'skip_varint_Call.ListFiles'(Rest, Z1, Z2, F1);
'skip_varint_Call.ListFiles'(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F1) ->
    'dfp_read_field_def_Call.ListFiles'(Rest, Z1, Z2, F1).


'skip_length_delimited_Call.ListFiles'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Call.ListFiles'(Rest, N + 7,
					   X bsl N + Acc, F1);
'skip_length_delimited_Call.ListFiles'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Call.ListFiles'(Rest2, 0, 0, F1).


'skip_32_Call.ListFiles'(<<_:32, Rest/binary>>, Z1, Z2,
			 F1) ->
    'dfp_read_field_def_Call.ListFiles'(Rest, Z1, Z2, F1).


'skip_64_Call.ListFiles'(<<_:64, Rest/binary>>, Z1, Z2,
			 F1) ->
    'dfp_read_field_def_Call.ListFiles'(Rest, Z1, Z2, F1).


'd_msg_Call.SetLoggingLevel'(Bin) ->
    'dfp_read_field_def_Call.SetLoggingLevel'(Bin, 0, 0,
					      id(undefined), id(undefined)).

'dfp_read_field_def_Call.SetLoggingLevel'(<<8,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_Call.SetLoggingLevel_level'(Rest, Z1, Z2, F1,
					 F2);
'dfp_read_field_def_Call.SetLoggingLevel'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F1, F2) ->
    'd_field_Call.SetLoggingLevel_duration'(Rest, Z1, Z2,
					    F1, F2);
'dfp_read_field_def_Call.SetLoggingLevel'(<<>>, 0, 0,
					  F1, F2) ->
    #'Call.SetLoggingLevel'{level = F1, duration = F2};
'dfp_read_field_def_Call.SetLoggingLevel'(Other, Z1, Z2,
					  F1, F2) ->
    'dg_read_field_def_Call.SetLoggingLevel'(Other, Z1, Z2,
					     F1, F2).

'dg_read_field_def_Call.SetLoggingLevel'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2)
    when N < 32 - 7 ->
    'dg_read_field_def_Call.SetLoggingLevel'(Rest, N + 7,
					     X bsl N + Acc, F1, F2);
'dg_read_field_def_Call.SetLoggingLevel'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_Call.SetLoggingLevel_level'(Rest, 0, 0, F1,
					       F2);
      18 ->
	  'd_field_Call.SetLoggingLevel_duration'(Rest, 0, 0, F1,
						  F2);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Call.SetLoggingLevel'(Rest, 0, 0, F1, F2);
	    1 -> 'skip_64_Call.SetLoggingLevel'(Rest, 0, 0, F1, F2);
	    2 ->
		'skip_length_delimited_Call.SetLoggingLevel'(Rest, 0, 0,
							     F1, F2);
	    5 -> 'skip_32_Call.SetLoggingLevel'(Rest, 0, 0, F1, F2)
	  end
    end;
'dg_read_field_def_Call.SetLoggingLevel'(<<>>, 0, 0, F1,
					 F2) ->
    #'Call.SetLoggingLevel'{level = F1, duration = F2}.

'd_field_Call.SetLoggingLevel_level'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Call.SetLoggingLevel_level'(Rest, N + 7,
					 X bsl N + Acc, F1, F2);
'd_field_Call.SetLoggingLevel_level'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_Call.SetLoggingLevel'(Rest, 0, 0,
					      NewFValue, F2).


'd_field_Call.SetLoggingLevel_duration'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2)
    when N < 57 ->
    'd_field_Call.SetLoggingLevel_duration'(Rest, N + 7,
					    X bsl N + Acc, F1, F2);
'd_field_Call.SetLoggingLevel_duration'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DurationInfo(Bs),
    'dfp_read_field_def_Call.SetLoggingLevel'(Rest2, 0, 0,
					      F1,
					      if F2 == undefined -> NewFValue;
						 true ->
						     merge_msg_DurationInfo(F2,
									    NewFValue)
					      end).


'skip_varint_Call.SetLoggingLevel'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'skip_varint_Call.SetLoggingLevel'(Rest, Z1, Z2, F1,
				       F2);
'skip_varint_Call.SetLoggingLevel'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Call.SetLoggingLevel'(Rest, Z1, Z2,
					      F1, F2).


'skip_length_delimited_Call.SetLoggingLevel'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2)
    when N < 57 ->
    'skip_length_delimited_Call.SetLoggingLevel'(Rest,
						 N + 7, X bsl N + Acc, F1, F2);
'skip_length_delimited_Call.SetLoggingLevel'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Call.SetLoggingLevel'(Rest2, 0, 0,
					      F1, F2).


'skip_32_Call.SetLoggingLevel'(<<_:32, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Call.SetLoggingLevel'(Rest, Z1, Z2,
					      F1, F2).


'skip_64_Call.SetLoggingLevel'(<<_:64, Rest/binary>>,
			       Z1, Z2, F1, F2) ->
    'dfp_read_field_def_Call.SetLoggingLevel'(Rest, Z1, Z2,
					      F1, F2).


d_msg_Call(Bin) ->
    dfp_read_field_def_Call(Bin, 0, 0, id(undefined),
			    id(undefined), id(undefined), id(undefined),
			    id(undefined)).

dfp_read_field_def_Call(<<8, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Call_type(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_Call(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Call_get_metrics(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5);
dfp_read_field_def_Call(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Call_set_logging_level(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5);
dfp_read_field_def_Call(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Call_list_files(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5);
dfp_read_field_def_Call(<<42, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5) ->
    d_field_Call_read_file(Rest, Z1, Z2, F1, F2, F3, F4,
			   F5);
dfp_read_field_def_Call(<<>>, 0, 0, F1, F2, F3, F4,
			F5) ->
    #'Call'{type = F1, get_metrics = F2,
	    set_logging_level = F3, list_files = F4,
	    read_file = F5};
dfp_read_field_def_Call(Other, Z1, Z2, F1, F2, F3, F4,
			F5) ->
    dg_read_field_def_Call(Other, Z1, Z2, F1, F2, F3, F4,
			   F5).

dg_read_field_def_Call(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_Call(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5);
dg_read_field_def_Call(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      8 -> d_field_Call_type(Rest, 0, 0, F1, F2, F3, F4, F5);
      18 ->
	  d_field_Call_get_metrics(Rest, 0, 0, F1, F2, F3, F4,
				   F5);
      26 ->
	  d_field_Call_set_logging_level(Rest, 0, 0, F1, F2, F3,
					 F4, F5);
      34 ->
	  d_field_Call_list_files(Rest, 0, 0, F1, F2, F3, F4, F5);
      42 ->
	  d_field_Call_read_file(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Call(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_Call(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_Call(Rest, 0, 0, F1, F2, F3, F4,
					   F5);
	    5 -> skip_32_Call(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_Call(<<>>, 0, 0, F1, F2, F3, F4,
		       F5) ->
    #'Call'{type = F1, get_metrics = F2,
	    set_logging_level = F3, list_files = F4,
	    read_file = F5}.

d_field_Call_type(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5)
    when N < 57 ->
    d_field_Call_type(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5);
d_field_Call_type(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4, F5) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Call.Type'(Tmp),
    dfp_read_field_def_Call(Rest, 0, 0, NewFValue, F2, F3,
			    F4, F5).


d_field_Call_get_metrics(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Call_get_metrics(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5);
d_field_Call_get_metrics(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Call.GetMetrics'(Bs),
    dfp_read_field_def_Call(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true ->
				   'merge_msg_Call.GetMetrics'(F2, NewFValue)
			    end,
			    F3, F4, F5).


d_field_Call_set_logging_level(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Call_set_logging_level(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5);
d_field_Call_set_logging_level(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Call.SetLoggingLevel'(Bs),
    dfp_read_field_def_Call(Rest2, 0, 0, F1, F2,
			    if F3 == undefined -> NewFValue;
			       true ->
				   'merge_msg_Call.SetLoggingLevel'(F3,
								    NewFValue)
			    end,
			    F4, F5).


d_field_Call_list_files(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Call_list_files(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5);
d_field_Call_list_files(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Call.ListFiles'(Bs),
    dfp_read_field_def_Call(Rest2, 0, 0, F1, F2, F3,
			    if F4 == undefined -> NewFValue;
			       true -> 'merge_msg_Call.ListFiles'(F4, NewFValue)
			    end,
			    F5).


d_field_Call_read_file(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_Call_read_file(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5);
d_field_Call_read_file(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Call.ReadFile'(Bs),
    dfp_read_field_def_Call(Rest2, 0, 0, F1, F2, F3, F4,
			    if F5 == undefined -> NewFValue;
			       true -> 'merge_msg_Call.ReadFile'(F5, NewFValue)
			    end).


skip_varint_Call(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5) ->
    skip_varint_Call(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_Call(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5) ->
    dfp_read_field_def_Call(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5).


skip_length_delimited_Call(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_Call(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
skip_length_delimited_Call(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Call(Rest2, 0, 0, F1, F2, F3, F4,
			    F5).


skip_32_Call(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5) ->
    dfp_read_field_def_Call(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5).


skip_64_Call(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5) ->
    dfp_read_field_def_Call(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5).


'd_msg_ResourceUsage.Executor.Task'(Bin) ->
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Bin, 0,
						     0, id(undefined),
						     id(undefined), id([]),
						     id(undefined)).

'dfp_read_field_def_ResourceUsage.Executor.Task'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4) ->
    'd_field_ResourceUsage.Executor.Task_name'(Rest, Z1, Z2,
					       F1, F2, F3, F4);
'dfp_read_field_def_ResourceUsage.Executor.Task'(<<18,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4) ->
    'd_field_ResourceUsage.Executor.Task_id'(Rest, Z1, Z2,
					     F1, F2, F3, F4);
'dfp_read_field_def_ResourceUsage.Executor.Task'(<<26,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4) ->
    'd_field_ResourceUsage.Executor.Task_resources'(Rest,
						    Z1, Z2, F1, F2, F3, F4);
'dfp_read_field_def_ResourceUsage.Executor.Task'(<<34,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4) ->
    'd_field_ResourceUsage.Executor.Task_labels'(Rest, Z1,
						 Z2, F1, F2, F3, F4);
'dfp_read_field_def_ResourceUsage.Executor.Task'(<<>>,
						 0, 0, F1, F2, F3, F4) ->
    #'ResourceUsage.Executor.Task'{name = F1, id = F2,
				   resources = lists_reverse(F3), labels = F4};
'dfp_read_field_def_ResourceUsage.Executor.Task'(Other,
						 Z1, Z2, F1, F2, F3, F4) ->
    'dg_read_field_def_ResourceUsage.Executor.Task'(Other,
						    Z1, Z2, F1, F2, F3, F4).

'dg_read_field_def_ResourceUsage.Executor.Task'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    'dg_read_field_def_ResourceUsage.Executor.Task'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4);
'dg_read_field_def_ResourceUsage.Executor.Task'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ResourceUsage.Executor.Task_name'(Rest, 0, 0,
						     F1, F2, F3, F4);
      18 ->
	  'd_field_ResourceUsage.Executor.Task_id'(Rest, 0, 0, F1,
						   F2, F3, F4);
      26 ->
	  'd_field_ResourceUsage.Executor.Task_resources'(Rest, 0,
							  0, F1, F2, F3, F4);
      34 ->
	  'd_field_ResourceUsage.Executor.Task_labels'(Rest, 0, 0,
						       F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ResourceUsage.Executor.Task'(Rest, 0, 0,
							  F1, F2, F3, F4);
	    1 ->
		'skip_64_ResourceUsage.Executor.Task'(Rest, 0, 0, F1,
						      F2, F3, F4);
	    2 ->
		'skip_length_delimited_ResourceUsage.Executor.Task'(Rest,
								    0, 0, F1,
								    F2, F3, F4);
	    5 ->
		'skip_32_ResourceUsage.Executor.Task'(Rest, 0, 0, F1,
						      F2, F3, F4)
	  end
    end;
'dg_read_field_def_ResourceUsage.Executor.Task'(<<>>, 0,
						0, F1, F2, F3, F4) ->
    #'ResourceUsage.Executor.Task'{name = F1, id = F2,
				   resources = lists_reverse(F3), labels = F4}.

'd_field_ResourceUsage.Executor.Task_name'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_ResourceUsage.Executor.Task_name'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4);
'd_field_ResourceUsage.Executor.Task_name'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest2,
						     0, 0, NewFValue, F2, F3,
						     F4).


'd_field_ResourceUsage.Executor.Task_id'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_ResourceUsage.Executor.Task_id'(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4);
'd_field_ResourceUsage.Executor.Task_id'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TaskID(Bs),
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest2,
						     0, 0, F1,
						     if F2 == undefined ->
							    NewFValue;
							true ->
							    merge_msg_TaskID(F2,
									     NewFValue)
						     end,
						     F3, F4).


'd_field_ResourceUsage.Executor.Task_resources'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_ResourceUsage.Executor.Task_resources'(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4);
'd_field_ResourceUsage.Executor.Task_resources'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest2,
						     0, 0, F1, F2,
						     cons(NewFValue, F3), F4).


'd_field_ResourceUsage.Executor.Task_labels'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'd_field_ResourceUsage.Executor.Task_labels'(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4);
'd_field_ResourceUsage.Executor.Task_labels'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest2,
						     0, 0, F1, F2, F3,
						     if F4 == undefined ->
							    NewFValue;
							true ->
							    merge_msg_Labels(F4,
									     NewFValue)
						     end).


'skip_varint_ResourceUsage.Executor.Task'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4) ->
    'skip_varint_ResourceUsage.Executor.Task'(Rest, Z1, Z2,
					      F1, F2, F3, F4);
'skip_varint_ResourceUsage.Executor.Task'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest,
						     Z1, Z2, F1, F2, F3, F4).


'skip_length_delimited_ResourceUsage.Executor.Task'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    'skip_length_delimited_ResourceUsage.Executor.Task'(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4);
'skip_length_delimited_ResourceUsage.Executor.Task'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest2,
						     0, 0, F1, F2, F3, F4).


'skip_32_ResourceUsage.Executor.Task'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest,
						     Z1, Z2, F1, F2, F3, F4).


'skip_64_ResourceUsage.Executor.Task'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4) ->
    'dfp_read_field_def_ResourceUsage.Executor.Task'(Rest,
						     Z1, Z2, F1, F2, F3, F4).


d_msg_Role(Bin) ->
    dfp_read_field_def_Role(Bin, 0, 0, id(undefined),
			    id(undefined), id([]), id([])).

dfp_read_field_def_Role(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4) ->
    d_field_Role_name(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Role(<<17, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4) ->
    d_field_Role_weight(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Role(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4) ->
    d_field_Role_frameworks(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Role(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4) ->
    d_field_Role_resources(Rest, Z1, Z2, F1, F2, F3, F4);
dfp_read_field_def_Role(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Role'{name = F1, weight = F2,
	    frameworks = lists_reverse(F3),
	    resources = lists_reverse(F4)};
dfp_read_field_def_Role(Other, Z1, Z2, F1, F2, F3,
			F4) ->
    dg_read_field_def_Role(Other, Z1, Z2, F1, F2, F3, F4).

dg_read_field_def_Role(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_Role(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4);
dg_read_field_def_Role(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Role_name(Rest, 0, 0, F1, F2, F3, F4);
      17 -> d_field_Role_weight(Rest, 0, 0, F1, F2, F3, F4);
      26 ->
	  d_field_Role_frameworks(Rest, 0, 0, F1, F2, F3, F4);
      34 ->
	  d_field_Role_resources(Rest, 0, 0, F1, F2, F3, F4);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Role(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_Role(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_Role(Rest, 0, 0, F1, F2, F3, F4);
	    5 -> skip_32_Role(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_Role(<<>>, 0, 0, F1, F2, F3, F4) ->
    #'Role'{name = F1, weight = F2,
	    frameworks = lists_reverse(F3),
	    resources = lists_reverse(F4)}.

d_field_Role_name(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4)
    when N < 57 ->
    d_field_Role_name(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4);
d_field_Role_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Role(Rest2, 0, 0, NewFValue, F2, F3,
			    F4).


d_field_Role_weight(<<Value:64/little-float,
		      Rest/binary>>,
		    Z1, Z2, F1, _, F3, F4) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F1, Value, F3,
			    F4).


d_field_Role_frameworks(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_Role_frameworks(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4);
d_field_Role_frameworks(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    dfp_read_field_def_Role(Rest2, 0, 0, F1, F2,
			    cons(NewFValue, F3), F4).


d_field_Role_resources(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_Role_resources(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4);
d_field_Role_resources(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_Role(Rest2, 0, 0, F1, F2, F3,
			    cons(NewFValue, F4)).


skip_varint_Role(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4) ->
    skip_varint_Role(Rest, Z1, Z2, F1, F2, F3, F4);
skip_varint_Role(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F1, F2, F3, F4).


skip_length_delimited_Role(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_Role(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4);
skip_length_delimited_Role(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Role(Rest2, 0, 0, F1, F2, F3, F4).


skip_32_Role(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F1, F2, F3, F4).


skip_64_Role(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4) ->
    dfp_read_field_def_Role(Rest, Z1, Z2, F1, F2, F3, F4).


d_msg_IcmpStatistics(Bin) ->
    dfp_read_field_def_IcmpStatistics(Bin, 0, 0,
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined)).

dfp_read_field_def_IcmpStatistics(<<8, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InMsgs(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21, F22,
				  F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<16, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InErrors(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InCsumErrors(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InDestUnreachs(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<40, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InTimeExcds(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<48, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InParmProbs(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InSrcQuenchs(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InRedirects(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<72, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InEchos(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<80, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InEchoReps(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<88, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InTimestamps(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<96, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InTimestampReps(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<104, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InAddrMasks(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<112, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_InAddrMaskReps(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<120, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutMsgs(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<128, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutErrors(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<136, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutDestUnreachs(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<144, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutTimeExcds(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<152, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutParmProbs(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<160, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutSrcQuenchs(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27);
dfp_read_field_def_IcmpStatistics(<<168, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutRedirects(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<176, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutEchos(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<184, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutEchoReps(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<192, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutTimestamps(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27);
dfp_read_field_def_IcmpStatistics(<<200, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutTimestampReps(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<208, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutAddrMasks(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27);
dfp_read_field_def_IcmpStatistics(<<216, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26,
				  F27) ->
    d_field_IcmpStatistics_OutAddrMaskReps(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27);
dfp_read_field_def_IcmpStatistics(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27) ->
    #'IcmpStatistics'{'InMsgs' = F1, 'InErrors' = F2,
		      'InCsumErrors' = F3, 'InDestUnreachs' = F4,
		      'InTimeExcds' = F5, 'InParmProbs' = F6,
		      'InSrcQuenchs' = F7, 'InRedirects' = F8, 'InEchos' = F9,
		      'InEchoReps' = F10, 'InTimestamps' = F11,
		      'InTimestampReps' = F12, 'InAddrMasks' = F13,
		      'InAddrMaskReps' = F14, 'OutMsgs' = F15,
		      'OutErrors' = F16, 'OutDestUnreachs' = F17,
		      'OutTimeExcds' = F18, 'OutParmProbs' = F19,
		      'OutSrcQuenchs' = F20, 'OutRedirects' = F21,
		      'OutEchos' = F22, 'OutEchoReps' = F23,
		      'OutTimestamps' = F24, 'OutTimestampReps' = F25,
		      'OutAddrMasks' = F26, 'OutAddrMaskReps' = F27};
dfp_read_field_def_IcmpStatistics(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27) ->
    dg_read_field_def_IcmpStatistics(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27).

dg_read_field_def_IcmpStatistics(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 32 - 7 ->
    dg_read_field_def_IcmpStatistics(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27);
dg_read_field_def_IcmpStatistics(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_IcmpStatistics_InMsgs(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, F22, F23, F24, F25, F26, F27);
      16 ->
	  d_field_IcmpStatistics_InErrors(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27);
      24 ->
	  d_field_IcmpStatistics_InCsumErrors(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      32 ->
	  d_field_IcmpStatistics_InDestUnreachs(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27);
      40 ->
	  d_field_IcmpStatistics_InTimeExcds(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27);
      48 ->
	  d_field_IcmpStatistics_InParmProbs(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27);
      56 ->
	  d_field_IcmpStatistics_InSrcQuenchs(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      64 ->
	  d_field_IcmpStatistics_InRedirects(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27);
      72 ->
	  d_field_IcmpStatistics_InEchos(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27);
      80 ->
	  d_field_IcmpStatistics_InEchoReps(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27);
      88 ->
	  d_field_IcmpStatistics_InTimestamps(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      96 ->
	  d_field_IcmpStatistics_InTimestampReps(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27);
      104 ->
	  d_field_IcmpStatistics_InAddrMasks(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27);
      112 ->
	  d_field_IcmpStatistics_InAddrMaskReps(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27);
      120 ->
	  d_field_IcmpStatistics_OutMsgs(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13, F14, F15, F16, F17, F18, F19, F20,
					 F21, F22, F23, F24, F25, F26, F27);
      128 ->
	  d_field_IcmpStatistics_OutErrors(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27);
      136 ->
	  d_field_IcmpStatistics_OutDestUnreachs(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27);
      144 ->
	  d_field_IcmpStatistics_OutTimeExcds(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      152 ->
	  d_field_IcmpStatistics_OutParmProbs(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      160 ->
	  d_field_IcmpStatistics_OutSrcQuenchs(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27);
      168 ->
	  d_field_IcmpStatistics_OutRedirects(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      176 ->
	  d_field_IcmpStatistics_OutEchos(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27);
      184 ->
	  d_field_IcmpStatistics_OutEchoReps(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27);
      192 ->
	  d_field_IcmpStatistics_OutTimestamps(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27);
      200 ->
	  d_field_IcmpStatistics_OutTimestampReps(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27);
      208 ->
	  d_field_IcmpStatistics_OutAddrMasks(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27);
      216 ->
	  d_field_IcmpStatistics_OutAddrMaskReps(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_IcmpStatistics(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27);
	    1 ->
		skip_64_IcmpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27);
	    2 ->
		skip_length_delimited_IcmpStatistics(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27);
	    5 ->
		skip_32_IcmpStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27)
	  end
    end;
dg_read_field_def_IcmpStatistics(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27) ->
    #'IcmpStatistics'{'InMsgs' = F1, 'InErrors' = F2,
		      'InCsumErrors' = F3, 'InDestUnreachs' = F4,
		      'InTimeExcds' = F5, 'InParmProbs' = F6,
		      'InSrcQuenchs' = F7, 'InRedirects' = F8, 'InEchos' = F9,
		      'InEchoReps' = F10, 'InTimestamps' = F11,
		      'InTimestampReps' = F12, 'InAddrMasks' = F13,
		      'InAddrMaskReps' = F14, 'OutMsgs' = F15,
		      'OutErrors' = F16, 'OutDestUnreachs' = F17,
		      'OutTimeExcds' = F18, 'OutParmProbs' = F19,
		      'OutSrcQuenchs' = F20, 'OutRedirects' = F21,
		      'OutEchos' = F22, 'OutEchoReps' = F23,
		      'OutTimestamps' = F24, 'OutTimestampReps' = F25,
		      'OutAddrMasks' = F26, 'OutAddrMaskReps' = F27}.

d_field_IcmpStatistics_InMsgs(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InMsgs(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, F22, F23, F24, F25, F26,
				  F27);
d_field_IcmpStatistics_InMsgs(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, NewFValue,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_InErrors(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InErrors(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27);
d_field_IcmpStatistics_InErrors(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1,
				      NewFValue, F3, F4, F5, F6, F7, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27).


d_field_IcmpStatistics_InCsumErrors(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InCsumErrors(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_InCsumErrors(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InDestUnreachs(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InDestUnreachs(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27);
d_field_IcmpStatistics_InDestUnreachs(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, _, F5, F6, F7, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, NewFValue, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InTimeExcds(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InTimeExcds(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27);
d_field_IcmpStatistics_InTimeExcds(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, _, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26,
				   F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, NewFValue, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InParmProbs(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InParmProbs(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27);
d_field_IcmpStatistics_InParmProbs(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26,
				   F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, NewFValue, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InSrcQuenchs(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InSrcQuenchs(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_InSrcQuenchs(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, NewFValue, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InRedirects(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InRedirects(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27);
d_field_IcmpStatistics_InRedirects(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26,
				   F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, NewFValue, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InEchos(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InEchos(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27);
d_field_IcmpStatistics_InEchos(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, NewFValue, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InEchoReps(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InEchoReps(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27);
d_field_IcmpStatistics_InEchoReps(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				  F11, F12, F13, F14, F15, F16, F17, F18, F19,
				  F20, F21, F22, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, NewFValue,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InTimestamps(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InTimestamps(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_InTimestamps(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, _, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      NewFValue, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27).


d_field_IcmpStatistics_InTimestampReps(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InTimestampReps(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27);
d_field_IcmpStatistics_InTimestampReps(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, _, F13, F14, F15, F16, F17,
				       F18, F19, F20, F21, F22, F23, F24, F25,
				       F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      NewFValue, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_InAddrMasks(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InAddrMasks(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27);
d_field_IcmpStatistics_InAddrMasks(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, _, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26,
				   F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      NewFValue, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_InAddrMaskReps(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_InAddrMaskReps(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27);
d_field_IcmpStatistics_InAddrMaskReps(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, _, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, NewFValue, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutMsgs(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutMsgs(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13, F14, F15, F16,
				   F17, F18, F19, F20, F21, F22, F23, F24, F25,
				   F26, F27);
d_field_IcmpStatistics_OutMsgs(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, _, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, NewFValue, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutErrors(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutErrors(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27);
d_field_IcmpStatistics_OutErrors(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, _, F17, F18, F19,
				 F20, F21, F22, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, NewFValue, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutDestUnreachs(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutDestUnreachs(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutDestUnreachs(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16, _,
				       F18, F19, F20, F21, F22, F23, F24, F25,
				       F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, NewFValue, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutTimeExcds(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutTimeExcds(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutTimeExcds(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, _,
				    F19, F20, F21, F22, F23, F24, F25, F26,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, NewFValue, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutParmProbs(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutParmProbs(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutParmProbs(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    _, F20, F21, F22, F23, F24, F25, F26,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, NewFValue,
				      F20, F21, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutSrcQuenchs(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutSrcQuenchs(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutSrcQuenchs(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, _, F21, F22, F23, F24, F25, F26,
				     F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      NewFValue, F21, F22, F23, F24, F25, F26,
				      F27).


d_field_IcmpStatistics_OutRedirects(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutRedirects(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutRedirects(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, _, F22, F23, F24, F25, F26,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      NewFValue, F22, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutEchos(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutEchos(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27);
d_field_IcmpStatistics_OutEchos(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, _, F23, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, NewFValue, F23, F24, F25, F26, F27).


d_field_IcmpStatistics_OutEchoReps(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutEchoReps(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27);
d_field_IcmpStatistics_OutEchoReps(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, _, F24, F25, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, NewFValue, F24, F25, F26, F27).


d_field_IcmpStatistics_OutTimestamps(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutTimestamps(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutTimestamps(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, _, F25, F26,
				     F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, NewFValue, F25, F26, F27).


d_field_IcmpStatistics_OutTimestampReps(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutTimestampReps(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutTimestampReps(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					_, F26, F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, NewFValue, F26, F27).


d_field_IcmpStatistics_OutAddrMasks(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutAddrMasks(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutAddrMasks(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, _,
				    F27) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, NewFValue, F27).


d_field_IcmpStatistics_OutAddrMaskReps(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27)
    when N < 57 ->
    d_field_IcmpStatistics_OutAddrMaskReps(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27);
d_field_IcmpStatistics_OutAddrMaskReps(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, _) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_IcmpStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, NewFValue).


skip_varint_IcmpStatistics(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27) ->
    skip_varint_IcmpStatistics(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27);
skip_varint_IcmpStatistics(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27) ->
    dfp_read_field_def_IcmpStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27).


skip_length_delimited_IcmpStatistics(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27)
    when N < 57 ->
    skip_length_delimited_IcmpStatistics(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27);
skip_length_delimited_IcmpStatistics(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_IcmpStatistics(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27).


skip_32_IcmpStatistics(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27) ->
    dfp_read_field_def_IcmpStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27).


skip_64_IcmpStatistics(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27) ->
    dfp_read_field_def_IcmpStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27).


d_msg_SNMPStatistics(Bin) ->
    dfp_read_field_def_SNMPStatistics(Bin, 0, 0,
				      id(undefined), id(undefined),
				      id(undefined), id(undefined)).

dfp_read_field_def_SNMPStatistics(<<10, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_SNMPStatistics_ip_stats(Rest, Z1, Z2, F1, F2,
				    F3, F4);
dfp_read_field_def_SNMPStatistics(<<18, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_SNMPStatistics_icmp_stats(Rest, Z1, Z2, F1, F2,
				      F3, F4);
dfp_read_field_def_SNMPStatistics(<<26, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_SNMPStatistics_tcp_stats(Rest, Z1, Z2, F1, F2,
				     F3, F4);
dfp_read_field_def_SNMPStatistics(<<34, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4) ->
    d_field_SNMPStatistics_udp_stats(Rest, Z1, Z2, F1, F2,
				     F3, F4);
dfp_read_field_def_SNMPStatistics(<<>>, 0, 0, F1, F2,
				  F3, F4) ->
    #'SNMPStatistics'{ip_stats = F1, icmp_stats = F2,
		      tcp_stats = F3, udp_stats = F4};
dfp_read_field_def_SNMPStatistics(Other, Z1, Z2, F1, F2,
				  F3, F4) ->
    dg_read_field_def_SNMPStatistics(Other, Z1, Z2, F1, F2,
				     F3, F4).

dg_read_field_def_SNMPStatistics(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4)
    when N < 32 - 7 ->
    dg_read_field_def_SNMPStatistics(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4);
dg_read_field_def_SNMPStatistics(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_SNMPStatistics_ip_stats(Rest, 0, 0, F1, F2, F3,
					  F4);
      18 ->
	  d_field_SNMPStatistics_icmp_stats(Rest, 0, 0, F1, F2,
					    F3, F4);
      26 ->
	  d_field_SNMPStatistics_tcp_stats(Rest, 0, 0, F1, F2, F3,
					   F4);
      34 ->
	  d_field_SNMPStatistics_udp_stats(Rest, 0, 0, F1, F2, F3,
					   F4);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SNMPStatistics(Rest, 0, 0, F1, F2, F3, F4);
	    1 -> skip_64_SNMPStatistics(Rest, 0, 0, F1, F2, F3, F4);
	    2 ->
		skip_length_delimited_SNMPStatistics(Rest, 0, 0, F1, F2,
						     F3, F4);
	    5 -> skip_32_SNMPStatistics(Rest, 0, 0, F1, F2, F3, F4)
	  end
    end;
dg_read_field_def_SNMPStatistics(<<>>, 0, 0, F1, F2, F3,
				 F4) ->
    #'SNMPStatistics'{ip_stats = F1, icmp_stats = F2,
		      tcp_stats = F3, udp_stats = F4}.

d_field_SNMPStatistics_ip_stats(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SNMPStatistics_ip_stats(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4);
d_field_SNMPStatistics_ip_stats(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_IpStatistics(Bs),
    dfp_read_field_def_SNMPStatistics(Rest2, 0, 0,
				      if F1 == undefined -> NewFValue;
					 true ->
					     merge_msg_IpStatistics(F1,
								    NewFValue)
				      end,
				      F2, F3, F4).


d_field_SNMPStatistics_icmp_stats(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SNMPStatistics_icmp_stats(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4);
d_field_SNMPStatistics_icmp_stats(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_IcmpStatistics(Bs),
    dfp_read_field_def_SNMPStatistics(Rest2, 0, 0, F1,
				      if F2 == undefined -> NewFValue;
					 true ->
					     merge_msg_IcmpStatistics(F2,
								      NewFValue)
				      end,
				      F3, F4).


d_field_SNMPStatistics_tcp_stats(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SNMPStatistics_tcp_stats(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4);
d_field_SNMPStatistics_tcp_stats(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TcpStatistics(Bs),
    dfp_read_field_def_SNMPStatistics(Rest2, 0, 0, F1, F2,
				      if F3 == undefined -> NewFValue;
					 true ->
					     merge_msg_TcpStatistics(F3,
								     NewFValue)
				      end,
				      F4).


d_field_SNMPStatistics_udp_stats(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    d_field_SNMPStatistics_udp_stats(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4);
d_field_SNMPStatistics_udp_stats(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_UdpStatistics(Bs),
    dfp_read_field_def_SNMPStatistics(Rest2, 0, 0, F1, F2,
				      F3,
				      if F4 == undefined -> NewFValue;
					 true ->
					     merge_msg_UdpStatistics(F4,
								     NewFValue)
				      end).


skip_varint_SNMPStatistics(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4) ->
    skip_varint_SNMPStatistics(Rest, Z1, Z2, F1, F2, F3,
			       F4);
skip_varint_SNMPStatistics(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4) ->
    dfp_read_field_def_SNMPStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4).


skip_length_delimited_SNMPStatistics(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4)
    when N < 57 ->
    skip_length_delimited_SNMPStatistics(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4);
skip_length_delimited_SNMPStatistics(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SNMPStatistics(Rest2, 0, 0, F1, F2,
				      F3, F4).


skip_32_SNMPStatistics(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4) ->
    dfp_read_field_def_SNMPStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4).


skip_64_SNMPStatistics(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4) ->
    dfp_read_field_def_SNMPStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4).


d_msg_TrafficControlStatistics(Bin) ->
    dfp_read_field_def_TrafficControlStatistics(Bin, 0, 0,
						id(undefined), id(undefined),
						id(undefined), id(undefined),
						id(undefined), id(undefined),
						id(undefined), id(undefined),
						id(undefined), id(undefined)).

dfp_read_field_def_TrafficControlStatistics(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_id(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_TrafficControlStatistics(<<16,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_backlog(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10);
dfp_read_field_def_TrafficControlStatistics(<<24,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_bytes(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_TrafficControlStatistics(<<32,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_drops(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_TrafficControlStatistics(<<40,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_overlimits(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10);
dfp_read_field_def_TrafficControlStatistics(<<48,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_packets(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10);
dfp_read_field_def_TrafficControlStatistics(<<56,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_qlen(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_TrafficControlStatistics(<<64,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_ratebps(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10);
dfp_read_field_def_TrafficControlStatistics(<<72,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_ratepps(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10);
dfp_read_field_def_TrafficControlStatistics(<<80,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10) ->
    d_field_TrafficControlStatistics_requeues(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10);
dfp_read_field_def_TrafficControlStatistics(<<>>, 0, 0,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10) ->
    #'TrafficControlStatistics'{id = F1, backlog = F2,
				bytes = F3, drops = F4, overlimits = F5,
				packets = F6, qlen = F7, ratebps = F8,
				ratepps = F9, requeues = F10};
dfp_read_field_def_TrafficControlStatistics(Other, Z1,
					    Z2, F1, F2, F3, F4, F5, F6, F7, F8,
					    F9, F10) ->
    dg_read_field_def_TrafficControlStatistics(Other, Z1,
					       Z2, F1, F2, F3, F4, F5, F6, F7,
					       F8, F9, F10).

dg_read_field_def_TrafficControlStatistics(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10)
    when N < 32 - 7 ->
    dg_read_field_def_TrafficControlStatistics(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10);
dg_read_field_def_TrafficControlStatistics(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TrafficControlStatistics_id(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10);
      16 ->
	  d_field_TrafficControlStatistics_backlog(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10);
      24 ->
	  d_field_TrafficControlStatistics_bytes(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10);
      32 ->
	  d_field_TrafficControlStatistics_drops(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10);
      40 ->
	  d_field_TrafficControlStatistics_overlimits(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10);
      48 ->
	  d_field_TrafficControlStatistics_packets(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10);
      56 ->
	  d_field_TrafficControlStatistics_qlen(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10);
      64 ->
	  d_field_TrafficControlStatistics_ratebps(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10);
      72 ->
	  d_field_TrafficControlStatistics_ratepps(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10);
      80 ->
	  d_field_TrafficControlStatistics_requeues(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TrafficControlStatistics(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10);
	    1 ->
		skip_64_TrafficControlStatistics(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10);
	    2 ->
		skip_length_delimited_TrafficControlStatistics(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10);
	    5 ->
		skip_32_TrafficControlStatistics(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10)
	  end
    end;
dg_read_field_def_TrafficControlStatistics(<<>>, 0, 0,
					   F1, F2, F3, F4, F5, F6, F7, F8, F9,
					   F10) ->
    #'TrafficControlStatistics'{id = F1, backlog = F2,
				bytes = F3, drops = F4, overlimits = F5,
				packets = F6, qlen = F7, ratebps = F8,
				ratepps = F9, requeues = F10}.

d_field_TrafficControlStatistics_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_id(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10);
d_field_TrafficControlStatistics_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TrafficControlStatistics(Rest2, 0, 0,
						NewFValue, F2, F3, F4, F5, F6,
						F7, F8, F9, F10).


d_field_TrafficControlStatistics_backlog(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_backlog(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_backlog(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, _, F3, F4, F5, F6, F7, F8,
					 F9, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, NewFValue, F3, F4, F5, F6,
						F7, F8, F9, F10).


d_field_TrafficControlStatistics_bytes(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_bytes(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_bytes(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, _, F4, F5, F6, F7, F8,
				       F9, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, NewFValue, F4, F5, F6,
						F7, F8, F9, F10).


d_field_TrafficControlStatistics_drops(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_drops(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_drops(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, _, F5, F6, F7, F8,
				       F9, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, NewFValue, F5, F6,
						F7, F8, F9, F10).


d_field_TrafficControlStatistics_overlimits(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_overlimits(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_overlimits(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, _, F6, F7,
					    F8, F9, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, F4, NewFValue, F6,
						F7, F8, F9, F10).


d_field_TrafficControlStatistics_packets(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_packets(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_packets(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, _, F7, F8,
					 F9, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, F4, F5, NewFValue,
						F7, F8, F9, F10).


d_field_TrafficControlStatistics_qlen(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_qlen(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10);
d_field_TrafficControlStatistics_qlen(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, _, F8, F9,
				      F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, F4, F5, F6,
						NewFValue, F8, F9, F10).


d_field_TrafficControlStatistics_ratebps(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_ratebps(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_ratebps(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, _,
					 F9, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, F4, F5, F6, F7,
						NewFValue, F9, F10).


d_field_TrafficControlStatistics_ratepps(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_ratepps(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_ratepps(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 _, F10) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, F4, F5, F6, F7, F8,
						NewFValue, F10).


d_field_TrafficControlStatistics_requeues(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10)
    when N < 57 ->
    d_field_TrafficControlStatistics_requeues(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10);
d_field_TrafficControlStatistics_requeues(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_TrafficControlStatistics(Rest, 0, 0,
						F1, F2, F3, F4, F5, F6, F7, F8,
						F9, NewFValue).


skip_varint_TrafficControlStatistics(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    skip_varint_TrafficControlStatistics(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10);
skip_varint_TrafficControlStatistics(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10) ->
    dfp_read_field_def_TrafficControlStatistics(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10).


skip_length_delimited_TrafficControlStatistics(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10)
    when N < 57 ->
    skip_length_delimited_TrafficControlStatistics(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10);
skip_length_delimited_TrafficControlStatistics(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TrafficControlStatistics(Rest2, 0, 0,
						F1, F2, F3, F4, F5, F6, F7, F8,
						F9, F10).


skip_32_TrafficControlStatistics(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10) ->
    dfp_read_field_def_TrafficControlStatistics(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10).


skip_64_TrafficControlStatistics(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10) ->
    dfp_read_field_def_TrafficControlStatistics(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10).


d_msg_PerfStatistics(Bin) ->
    dfp_read_field_def_PerfStatistics(Bin, 0, 0,
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined), id(undefined),
				      id(undefined)).

dfp_read_field_def_PerfStatistics(<<9, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_timestamp(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, F31, F32, F33, F34, F35, F36,
				     F37, F38, F39, F40, F41, F42, F43, F44,
				     F45, F46, F47, F48, F49, F50, F51, F52,
				     F53);
dfp_read_field_def_PerfStatistics(<<17, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_duration(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27, F28, F29, F30,
				    F31, F32, F33, F34, F35, F36, F37, F38, F39,
				    F40, F41, F42, F43, F44, F45, F46, F47, F48,
				    F49, F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<24, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_cycles(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				  F14, F15, F16, F17, F18, F19, F20, F21, F22,
				  F23, F24, F25, F26, F27, F28, F29, F30, F31,
				  F32, F33, F34, F35, F36, F37, F38, F39, F40,
				  F41, F42, F43, F44, F45, F46, F47, F48, F49,
				  F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<32, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_stalled_cycles_frontend(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41, F42,
						   F43, F44, F45, F46, F47, F48,
						   F49, F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<40, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_stalled_cycles_backend(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<48, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_instructions(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, F31, F32, F33, F34,
					F35, F36, F37, F38, F39, F40, F41, F42,
					F43, F44, F45, F46, F47, F48, F49, F50,
					F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<56, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_cache_references(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<64, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_cache_misses(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, F31, F32, F33, F34,
					F35, F36, F37, F38, F39, F40, F41, F42,
					F43, F44, F45, F46, F47, F48, F49, F50,
					F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<72, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_branches(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27, F28, F29, F30,
				    F31, F32, F33, F34, F35, F36, F37, F38, F39,
				    F40, F41, F42, F43, F44, F45, F46, F47, F48,
				    F49, F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<80, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_branch_misses(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, F31, F32, F33, F34,
					 F35, F36, F37, F38, F39, F40, F41, F42,
					 F43, F44, F45, F46, F47, F48, F49, F50,
					 F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<88, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_bus_cycles(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<96, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_ref_cycles(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<105, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_cpu_clock(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, F31, F32, F33, F34, F35, F36,
				     F37, F38, F39, F40, F41, F42, F43, F44,
				     F45, F46, F47, F48, F49, F50, F51, F52,
				     F53);
dfp_read_field_def_PerfStatistics(<<113, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_task_clock(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<120, Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_page_faults(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28, F29, F30, F31, F32, F33, F34, F35,
				       F36, F37, F38, F39, F40, F41, F42, F43,
				       F44, F45, F46, F47, F48, F49, F50, F51,
				       F52, F53);
dfp_read_field_def_PerfStatistics(<<128, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_minor_faults(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, F31, F32, F33, F34,
					F35, F36, F37, F38, F39, F40, F41, F42,
					F43, F44, F45, F46, F47, F48, F49, F50,
					F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<136, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_major_faults(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, F31, F32, F33, F34,
					F35, F36, F37, F38, F39, F40, F41, F42,
					F43, F44, F45, F46, F47, F48, F49, F50,
					F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<144, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_context_switches(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<152, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_cpu_migrations(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42, F43, F44, F45,
					  F46, F47, F48, F49, F50, F51, F52,
					  F53);
dfp_read_field_def_PerfStatistics(<<160, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_alignment_faults(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<168, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_emulation_faults(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<176, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_dcache_loads(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30, F31,
					   F32, F33, F34, F35, F36, F37, F38,
					   F39, F40, F41, F42, F43, F44, F45,
					   F46, F47, F48, F49, F50, F51, F52,
					   F53);
dfp_read_field_def_PerfStatistics(<<184, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_dcache_load_misses(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<192, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_dcache_stores(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<200, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_dcache_store_misses(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5, F6,
						  F7, F8, F9, F10, F11, F12,
						  F13, F14, F15, F16, F17, F18,
						  F19, F20, F21, F22, F23, F24,
						  F25, F26, F27, F28, F29, F30,
						  F31, F32, F33, F34, F35, F36,
						  F37, F38, F39, F40, F41, F42,
						  F43, F44, F45, F46, F47, F48,
						  F49, F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<208, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_dcache_prefetches(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<216, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_dcache_prefetch_misses(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42, F43, F44, F45, F46,
						     F47, F48, F49, F50, F51,
						     F52, F53);
dfp_read_field_def_PerfStatistics(<<224, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_icache_loads(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30, F31,
					   F32, F33, F34, F35, F36, F37, F38,
					   F39, F40, F41, F42, F43, F44, F45,
					   F46, F47, F48, F49, F50, F51, F52,
					   F53);
dfp_read_field_def_PerfStatistics(<<232, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_icache_load_misses(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<240, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_icache_prefetches(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<248, 1,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_l1_icache_prefetch_misses(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42, F43, F44, F45, F46,
						     F47, F48, F49, F50, F51,
						     F52, F53);
dfp_read_field_def_PerfStatistics(<<128, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_llc_loads(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, F31, F32, F33, F34, F35, F36,
				     F37, F38, F39, F40, F41, F42, F43, F44,
				     F45, F46, F47, F48, F49, F50, F51, F52,
				     F53);
dfp_read_field_def_PerfStatistics(<<136, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_llc_load_misses(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30, F31,
					   F32, F33, F34, F35, F36, F37, F38,
					   F39, F40, F41, F42, F43, F44, F45,
					   F46, F47, F48, F49, F50, F51, F52,
					   F53);
dfp_read_field_def_PerfStatistics(<<144, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_llc_stores(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<152, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_llc_store_misses(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<160, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_llc_prefetches(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42, F43, F44, F45,
					  F46, F47, F48, F49, F50, F51, F52,
					  F53);
dfp_read_field_def_PerfStatistics(<<168, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_llc_prefetch_misses(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42, F43, F44, F45,
					       F46, F47, F48, F49, F50, F51,
					       F52, F53);
dfp_read_field_def_PerfStatistics(<<176, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_dtlb_loads(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<184, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_dtlb_load_misses(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<192, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_dtlb_stores(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28, F29, F30, F31, F32, F33, F34, F35,
				       F36, F37, F38, F39, F40, F41, F42, F43,
				       F44, F45, F46, F47, F48, F49, F50, F51,
				       F52, F53);
dfp_read_field_def_PerfStatistics(<<200, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_dtlb_store_misses(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42, F43, F44,
					     F45, F46, F47, F48, F49, F50, F51,
					     F52, F53);
dfp_read_field_def_PerfStatistics(<<208, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_dtlb_prefetches(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30, F31,
					   F32, F33, F34, F35, F36, F37, F38,
					   F39, F40, F41, F42, F43, F44, F45,
					   F46, F47, F48, F49, F50, F51, F52,
					   F53);
dfp_read_field_def_PerfStatistics(<<216, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_dtlb_prefetch_misses(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<224, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_itlb_loads(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<232, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_itlb_load_misses(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<240, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_branch_loads(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13, F14, F15, F16, F17, F18,
					F19, F20, F21, F22, F23, F24, F25, F26,
					F27, F28, F29, F30, F31, F32, F33, F34,
					F35, F36, F37, F38, F39, F40, F41, F42,
					F43, F44, F45, F46, F47, F48, F49, F50,
					F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<248, 2,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_branch_load_misses(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42, F43,
					      F44, F45, F46, F47, F48, F49, F50,
					      F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<128, 3,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_node_loads(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53);
dfp_read_field_def_PerfStatistics(<<136, 3,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_node_load_misses(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42, F43, F44,
					    F45, F46, F47, F48, F49, F50, F51,
					    F52, F53);
dfp_read_field_def_PerfStatistics(<<144, 3,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_node_stores(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28, F29, F30, F31, F32, F33, F34, F35,
				       F36, F37, F38, F39, F40, F41, F42, F43,
				       F44, F45, F46, F47, F48, F49, F50, F51,
				       F52, F53);
dfp_read_field_def_PerfStatistics(<<152, 3,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_node_store_misses(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42, F43, F44,
					     F45, F46, F47, F48, F49, F50, F51,
					     F52, F53);
dfp_read_field_def_PerfStatistics(<<160, 3,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_node_prefetches(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5, F6, F7, F8, F9, F10,
					   F11, F12, F13, F14, F15, F16, F17,
					   F18, F19, F20, F21, F22, F23, F24,
					   F25, F26, F27, F28, F29, F30, F31,
					   F32, F33, F34, F35, F36, F37, F38,
					   F39, F40, F41, F42, F43, F44, F45,
					   F46, F47, F48, F49, F50, F51, F52,
					   F53);
dfp_read_field_def_PerfStatistics(<<168, 3,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    d_field_PerfStatistics_node_prefetch_misses(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42, F43, F44,
						F45, F46, F47, F48, F49, F50,
						F51, F52, F53);
dfp_read_field_def_PerfStatistics(<<>>, 0, 0, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28, F29, F30,
				  F31, F32, F33, F34, F35, F36, F37, F38, F39,
				  F40, F41, F42, F43, F44, F45, F46, F47, F48,
				  F49, F50, F51, F52, F53) ->
    #'PerfStatistics'{timestamp = F1, duration = F2,
		      cycles = F3, stalled_cycles_frontend = F4,
		      stalled_cycles_backend = F5, instructions = F6,
		      cache_references = F7, cache_misses = F8, branches = F9,
		      branch_misses = F10, bus_cycles = F11, ref_cycles = F12,
		      cpu_clock = F13, task_clock = F14, page_faults = F15,
		      minor_faults = F16, major_faults = F17,
		      context_switches = F18, cpu_migrations = F19,
		      alignment_faults = F20, emulation_faults = F21,
		      l1_dcache_loads = F22, l1_dcache_load_misses = F23,
		      l1_dcache_stores = F24, l1_dcache_store_misses = F25,
		      l1_dcache_prefetches = F26,
		      l1_dcache_prefetch_misses = F27, l1_icache_loads = F28,
		      l1_icache_load_misses = F29, l1_icache_prefetches = F30,
		      l1_icache_prefetch_misses = F31, llc_loads = F32,
		      llc_load_misses = F33, llc_stores = F34,
		      llc_store_misses = F35, llc_prefetches = F36,
		      llc_prefetch_misses = F37, dtlb_loads = F38,
		      dtlb_load_misses = F39, dtlb_stores = F40,
		      dtlb_store_misses = F41, dtlb_prefetches = F42,
		      dtlb_prefetch_misses = F43, itlb_loads = F44,
		      itlb_load_misses = F45, branch_loads = F46,
		      branch_load_misses = F47, node_loads = F48,
		      node_load_misses = F49, node_stores = F50,
		      node_store_misses = F51, node_prefetches = F52,
		      node_prefetch_misses = F53};
dfp_read_field_def_PerfStatistics(Other, Z1, Z2, F1, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13, F14, F15, F16, F17, F18, F19, F20, F21,
				  F22, F23, F24, F25, F26, F27, F28, F29, F30,
				  F31, F32, F33, F34, F35, F36, F37, F38, F39,
				  F40, F41, F42, F43, F44, F45, F46, F47, F48,
				  F49, F50, F51, F52, F53) ->
    dg_read_field_def_PerfStatistics(Other, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, F31, F32, F33, F34, F35, F36,
				     F37, F38, F39, F40, F41, F42, F43, F44,
				     F45, F46, F47, F48, F49, F50, F51, F52,
				     F53).

dg_read_field_def_PerfStatistics(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, F31, F32, F33, F34, F35, F36,
				 F37, F38, F39, F40, F41, F42, F43, F44, F45,
				 F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 32 - 7 ->
    dg_read_field_def_PerfStatistics(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28, F29, F30, F31, F32,
				     F33, F34, F35, F36, F37, F38, F39, F40,
				     F41, F42, F43, F44, F45, F46, F47, F48,
				     F49, F50, F51, F52, F53);
dg_read_field_def_PerfStatistics(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, F31, F32, F33, F34, F35, F36,
				 F37, F38, F39, F40, F41, F42, F43, F44, F45,
				 F46, F47, F48, F49, F50, F51, F52, F53) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_PerfStatistics_timestamp(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27, F28, F29, F30, F31, F32,
					   F33, F34, F35, F36, F37, F38, F39,
					   F40, F41, F42, F43, F44, F45, F46,
					   F47, F48, F49, F50, F51, F52, F53);
      17 ->
	  d_field_PerfStatistics_duration(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27, F28, F29, F30, F31, F32, F33,
					  F34, F35, F36, F37, F38, F39, F40,
					  F41, F42, F43, F44, F45, F46, F47,
					  F48, F49, F50, F51, F52, F53);
      24 ->
	  d_field_PerfStatistics_cycles(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11, F12,
					F13, F14, F15, F16, F17, F18, F19, F20,
					F21, F22, F23, F24, F25, F26, F27, F28,
					F29, F30, F31, F32, F33, F34, F35, F36,
					F37, F38, F39, F40, F41, F42, F43, F44,
					F45, F46, F47, F48, F49, F50, F51, F52,
					F53);
      32 ->
	  d_field_PerfStatistics_stalled_cycles_frontend(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42,
							 F43, F44, F45, F46,
							 F47, F48, F49, F50,
							 F51, F52, F53);
      40 ->
	  d_field_PerfStatistics_stalled_cycles_backend(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
      48 ->
	  d_field_PerfStatistics_instructions(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30, F31,
					      F32, F33, F34, F35, F36, F37, F38,
					      F39, F40, F41, F42, F43, F44, F45,
					      F46, F47, F48, F49, F50, F51, F52,
					      F53);
      56 ->
	  d_field_PerfStatistics_cache_references(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      64 ->
	  d_field_PerfStatistics_cache_misses(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30, F31,
					      F32, F33, F34, F35, F36, F37, F38,
					      F39, F40, F41, F42, F43, F44, F45,
					      F46, F47, F48, F49, F50, F51, F52,
					      F53);
      72 ->
	  d_field_PerfStatistics_branches(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27, F28, F29, F30, F31, F32, F33,
					  F34, F35, F36, F37, F38, F39, F40,
					  F41, F42, F43, F44, F45, F46, F47,
					  F48, F49, F50, F51, F52, F53);
      80 ->
	  d_field_PerfStatistics_branch_misses(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, F31, F32, F33, F34,
					       F35, F36, F37, F38, F39, F40,
					       F41, F42, F43, F44, F45, F46,
					       F47, F48, F49, F50, F51, F52,
					       F53);
      88 ->
	  d_field_PerfStatistics_bus_cycles(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      96 ->
	  d_field_PerfStatistics_ref_cycles(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      105 ->
	  d_field_PerfStatistics_cpu_clock(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27, F28, F29, F30, F31, F32,
					   F33, F34, F35, F36, F37, F38, F39,
					   F40, F41, F42, F43, F44, F45, F46,
					   F47, F48, F49, F50, F51, F52, F53);
      113 ->
	  d_field_PerfStatistics_task_clock(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      120 ->
	  d_field_PerfStatistics_page_faults(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28, F29, F30, F31,
					     F32, F33, F34, F35, F36, F37, F38,
					     F39, F40, F41, F42, F43, F44, F45,
					     F46, F47, F48, F49, F50, F51, F52,
					     F53);
      128 ->
	  d_field_PerfStatistics_minor_faults(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30, F31,
					      F32, F33, F34, F35, F36, F37, F38,
					      F39, F40, F41, F42, F43, F44, F45,
					      F46, F47, F48, F49, F50, F51, F52,
					      F53);
      136 ->
	  d_field_PerfStatistics_major_faults(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30, F31,
					      F32, F33, F34, F35, F36, F37, F38,
					      F39, F40, F41, F42, F43, F44, F45,
					      F46, F47, F48, F49, F50, F51, F52,
					      F53);
      144 ->
	  d_field_PerfStatistics_context_switches(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      152 ->
	  d_field_PerfStatistics_cpu_migrations(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27,
						F28, F29, F30, F31, F32, F33,
						F34, F35, F36, F37, F38, F39,
						F40, F41, F42, F43, F44, F45,
						F46, F47, F48, F49, F50, F51,
						F52, F53);
      160 ->
	  d_field_PerfStatistics_alignment_faults(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      168 ->
	  d_field_PerfStatistics_emulation_faults(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      176 ->
	  d_field_PerfStatistics_l1_dcache_loads(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
      184 ->
	  d_field_PerfStatistics_l1_dcache_load_misses(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      192 ->
	  d_field_PerfStatistics_l1_dcache_stores(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      200 ->
	  d_field_PerfStatistics_l1_dcache_store_misses(Rest, 0,
							0, F1, F2, F3, F4, F5,
							F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42, F43, F44, F45,
							F46, F47, F48, F49, F50,
							F51, F52, F53);
      208 ->
	  d_field_PerfStatistics_l1_dcache_prefetches(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      216 ->
	  d_field_PerfStatistics_l1_dcache_prefetch_misses(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42, F43, F44, F45,
							   F46, F47, F48, F49,
							   F50, F51, F52, F53);
      224 ->
	  d_field_PerfStatistics_l1_icache_loads(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
      232 ->
	  d_field_PerfStatistics_l1_icache_load_misses(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42, F43, F44, F45, F46,
						       F47, F48, F49, F50, F51,
						       F52, F53);
      240 ->
	  d_field_PerfStatistics_l1_icache_prefetches(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      248 ->
	  d_field_PerfStatistics_l1_icache_prefetch_misses(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42, F43, F44, F45,
							   F46, F47, F48, F49,
							   F50, F51, F52, F53);
      256 ->
	  d_field_PerfStatistics_llc_loads(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14, F15, F16, F17, F18,
					   F19, F20, F21, F22, F23, F24, F25,
					   F26, F27, F28, F29, F30, F31, F32,
					   F33, F34, F35, F36, F37, F38, F39,
					   F40, F41, F42, F43, F44, F45, F46,
					   F47, F48, F49, F50, F51, F52, F53);
      264 ->
	  d_field_PerfStatistics_llc_load_misses(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
      272 ->
	  d_field_PerfStatistics_llc_stores(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      280 ->
	  d_field_PerfStatistics_llc_store_misses(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      288 ->
	  d_field_PerfStatistics_llc_prefetches(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27,
						F28, F29, F30, F31, F32, F33,
						F34, F35, F36, F37, F38, F39,
						F40, F41, F42, F43, F44, F45,
						F46, F47, F48, F49, F50, F51,
						F52, F53);
      296 ->
	  d_field_PerfStatistics_llc_prefetch_misses(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
      304 ->
	  d_field_PerfStatistics_dtlb_loads(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      312 ->
	  d_field_PerfStatistics_dtlb_load_misses(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      320 ->
	  d_field_PerfStatistics_dtlb_stores(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28, F29, F30, F31,
					     F32, F33, F34, F35, F36, F37, F38,
					     F39, F40, F41, F42, F43, F44, F45,
					     F46, F47, F48, F49, F50, F51, F52,
					     F53);
      328 ->
	  d_field_PerfStatistics_dtlb_store_misses(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25, F26,
						   F27, F28, F29, F30, F31, F32,
						   F33, F34, F35, F36, F37, F38,
						   F39, F40, F41, F42, F43, F44,
						   F45, F46, F47, F48, F49, F50,
						   F51, F52, F53);
      336 ->
	  d_field_PerfStatistics_dtlb_prefetches(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
      344 ->
	  d_field_PerfStatistics_dtlb_prefetch_misses(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      352 ->
	  d_field_PerfStatistics_itlb_loads(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      360 ->
	  d_field_PerfStatistics_itlb_load_misses(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      368 ->
	  d_field_PerfStatistics_branch_loads(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13, F14, F15, F16, F17,
					      F18, F19, F20, F21, F22, F23, F24,
					      F25, F26, F27, F28, F29, F30, F31,
					      F32, F33, F34, F35, F36, F37, F38,
					      F39, F40, F41, F42, F43, F44, F45,
					      F46, F47, F48, F49, F50, F51, F52,
					      F53);
      376 ->
	  d_field_PerfStatistics_branch_load_misses(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42, F43,
						    F44, F45, F46, F47, F48,
						    F49, F50, F51, F52, F53);
      384 ->
	  d_field_PerfStatistics_node_loads(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6, F7, F8, F9, F10,
					    F11, F12, F13, F14, F15, F16, F17,
					    F18, F19, F20, F21, F22, F23, F24,
					    F25, F26, F27, F28, F29, F30, F31,
					    F32, F33, F34, F35, F36, F37, F38,
					    F39, F40, F41, F42, F43, F44, F45,
					    F46, F47, F48, F49, F50, F51, F52,
					    F53);
      392 ->
	  d_field_PerfStatistics_node_load_misses(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42, F43, F44,
						  F45, F46, F47, F48, F49, F50,
						  F51, F52, F53);
      400 ->
	  d_field_PerfStatistics_node_stores(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28, F29, F30, F31,
					     F32, F33, F34, F35, F36, F37, F38,
					     F39, F40, F41, F42, F43, F44, F45,
					     F46, F47, F48, F49, F50, F51, F52,
					     F53);
      408 ->
	  d_field_PerfStatistics_node_store_misses(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25, F26,
						   F27, F28, F29, F30, F31, F32,
						   F33, F34, F35, F36, F37, F38,
						   F39, F40, F41, F42, F43, F44,
						   F45, F46, F47, F48, F49, F50,
						   F51, F52, F53);
      416 ->
	  d_field_PerfStatistics_node_prefetches(Rest, 0, 0, F1,
						 F2, F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
      424 ->
	  d_field_PerfStatistics_node_prefetch_misses(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42,
						      F43, F44, F45, F46, F47,
						      F48, F49, F50, F51, F52,
						      F53);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PerfStatistics(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27, F28, F29, F30, F31, F32, F33,
					   F34, F35, F36, F37, F38, F39, F40,
					   F41, F42, F43, F44, F45, F46, F47,
					   F48, F49, F50, F51, F52, F53);
	    1 ->
		skip_64_PerfStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28, F29, F30,
				       F31, F32, F33, F34, F35, F36, F37, F38,
				       F39, F40, F41, F42, F43, F44, F45, F46,
				       F47, F48, F49, F50, F51, F52, F53);
	    2 ->
		skip_length_delimited_PerfStatistics(Rest, 0, 0, F1, F2,
						     F3, F4, F5, F6, F7, F8, F9,
						     F10, F11, F12, F13, F14,
						     F15, F16, F17, F18, F19,
						     F20, F21, F22, F23, F24,
						     F25, F26, F27, F28, F29,
						     F30, F31, F32, F33, F34,
						     F35, F36, F37, F38, F39,
						     F40, F41, F42, F43, F44,
						     F45, F46, F47, F48, F49,
						     F50, F51, F52, F53);
	    5 ->
		skip_32_PerfStatistics(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13, F14,
				       F15, F16, F17, F18, F19, F20, F21, F22,
				       F23, F24, F25, F26, F27, F28, F29, F30,
				       F31, F32, F33, F34, F35, F36, F37, F38,
				       F39, F40, F41, F42, F43, F44, F45, F46,
				       F47, F48, F49, F50, F51, F52, F53)
	  end
    end;
dg_read_field_def_PerfStatistics(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				 F14, F15, F16, F17, F18, F19, F20, F21, F22,
				 F23, F24, F25, F26, F27, F28, F29, F30, F31,
				 F32, F33, F34, F35, F36, F37, F38, F39, F40,
				 F41, F42, F43, F44, F45, F46, F47, F48, F49,
				 F50, F51, F52, F53) ->
    #'PerfStatistics'{timestamp = F1, duration = F2,
		      cycles = F3, stalled_cycles_frontend = F4,
		      stalled_cycles_backend = F5, instructions = F6,
		      cache_references = F7, cache_misses = F8, branches = F9,
		      branch_misses = F10, bus_cycles = F11, ref_cycles = F12,
		      cpu_clock = F13, task_clock = F14, page_faults = F15,
		      minor_faults = F16, major_faults = F17,
		      context_switches = F18, cpu_migrations = F19,
		      alignment_faults = F20, emulation_faults = F21,
		      l1_dcache_loads = F22, l1_dcache_load_misses = F23,
		      l1_dcache_stores = F24, l1_dcache_store_misses = F25,
		      l1_dcache_prefetches = F26,
		      l1_dcache_prefetch_misses = F27, l1_icache_loads = F28,
		      l1_icache_load_misses = F29, l1_icache_prefetches = F30,
		      l1_icache_prefetch_misses = F31, llc_loads = F32,
		      llc_load_misses = F33, llc_stores = F34,
		      llc_store_misses = F35, llc_prefetches = F36,
		      llc_prefetch_misses = F37, dtlb_loads = F38,
		      dtlb_load_misses = F39, dtlb_stores = F40,
		      dtlb_store_misses = F41, dtlb_prefetches = F42,
		      dtlb_prefetch_misses = F43, itlb_loads = F44,
		      itlb_load_misses = F45, branch_loads = F46,
		      branch_load_misses = F47, node_loads = F48,
		      node_load_misses = F49, node_stores = F50,
		      node_store_misses = F51, node_prefetches = F52,
		      node_prefetch_misses = F53}.

d_field_PerfStatistics_timestamp(<<Value:64/little-float,
				   Rest/binary>>,
				 Z1, Z2, _, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				 F11, F12, F13, F14, F15, F16, F17, F18, F19,
				 F20, F21, F22, F23, F24, F25, F26, F27, F28,
				 F29, F30, F31, F32, F33, F34, F35, F36, F37,
				 F38, F39, F40, F41, F42, F43, F44, F45, F46,
				 F47, F48, F49, F50, F51, F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, Value,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_duration(<<Value:64/little-float,
				  Rest/binary>>,
				Z1, Z2, F1, _, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, F31, F32, F33, F34, F35, F36, F37,
				F38, F39, F40, F41, F42, F43, F44, F45, F46,
				F47, F48, F49, F50, F51, F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, F1,
				      Value, F3, F4, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_cycles(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			      F31, F32, F33, F34, F35, F36, F37, F38, F39, F40,
			      F41, F42, F43, F44, F45, F46, F47, F48, F49, F50,
			      F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_cycles(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, F12, F13, F14, F15, F16, F17,
				  F18, F19, F20, F21, F22, F23, F24, F25, F26,
				  F27, F28, F29, F30, F31, F32, F33, F34, F35,
				  F36, F37, F38, F39, F40, F41, F42, F43, F44,
				  F45, F46, F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_cycles(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10,
			      F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			      F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			      F31, F32, F33, F34, F35, F36, F37, F38, F39, F40,
			      F41, F42, F43, F44, F45, F46, F47, F48, F49, F50,
			      F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      NewFValue, F4, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_stalled_cycles_frontend(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_stalled_cycles_frontend(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42, F43, F44, F45,
						   F46, F47, F48, F49, F50, F51,
						   F52, F53);
d_field_PerfStatistics_stalled_cycles_frontend(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, _, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42, F43,
					       F44, F45, F46, F47, F48, F49,
					       F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, NewFValue, F5, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_stalled_cycles_backend(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_stalled_cycles_backend(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53);
d_field_PerfStatistics_stalled_cycles_backend(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, _, F6, F7,
					      F8, F9, F10, F11, F12, F13, F14,
					      F15, F16, F17, F18, F19, F20, F21,
					      F22, F23, F24, F25, F26, F27, F28,
					      F29, F30, F31, F32, F33, F34, F35,
					      F36, F37, F38, F39, F40, F41, F42,
					      F43, F44, F45, F46, F47, F48, F49,
					      F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, NewFValue, F6, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_instructions(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_instructions(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					F31, F32, F33, F34, F35, F36, F37, F38,
					F39, F40, F41, F42, F43, F44, F45, F46,
					F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_instructions(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, _, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, NewFValue, F7, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_cache_references(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_cache_references(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_cache_references(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, _, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, NewFValue, F8, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_cache_misses(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_cache_misses(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					F31, F32, F33, F34, F35, F36, F37, F38,
					F39, F40, F41, F42, F43, F44, F45, F46,
					F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_cache_misses(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, _, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, NewFValue, F9, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_branches(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, F31, F32, F33, F34, F35, F36, F37,
				F38, F39, F40, F41, F42, F43, F44, F45, F46,
				F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_branches(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27, F28, F29, F30, F31, F32, F33, F34,
				    F35, F36, F37, F38, F39, F40, F41, F42, F43,
				    F44, F45, F46, F47, F48, F49, F50, F51, F52,
				    F53);
d_field_PerfStatistics_branches(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, F31, F32, F33, F34, F35, F36, F37,
				F38, F39, F40, F41, F42, F43, F44, F45, F46,
				F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, NewFValue, F10,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_branch_misses(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42, F43, F44, F45, F46, F47, F48, F49,
				     F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_branch_misses(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 F31, F32, F33, F34, F35, F36, F37, F38,
					 F39, F40, F41, F42, F43, F44, F45, F46,
					 F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_branch_misses(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     _, F11, F12, F13, F14, F15, F16, F17, F18,
				     F19, F20, F21, F22, F23, F24, F25, F26,
				     F27, F28, F29, F30, F31, F32, F33, F34,
				     F35, F36, F37, F38, F39, F40, F41, F42,
				     F43, F44, F45, F46, F47, F48, F49, F50,
				     F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, NewFValue,
				      F11, F12, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_bus_cycles(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_bus_cycles(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53);
d_field_PerfStatistics_bus_cycles(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, _, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10,
				      NewFValue, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, F31, F32, F33,
				      F34, F35, F36, F37, F38, F39, F40, F41,
				      F42, F43, F44, F45, F46, F47, F48, F49,
				      F50, F51, F52, F53).


d_field_PerfStatistics_ref_cycles(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_ref_cycles(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53);
d_field_PerfStatistics_ref_cycles(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, _, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      NewFValue, F13, F14, F15, F16, F17, F18,
				      F19, F20, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_cpu_clock(<<Value:64/little-float,
				   Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, _, F14, F15, F16, F17, F18, F19,
				 F20, F21, F22, F23, F24, F25, F26, F27, F28,
				 F29, F30, F31, F32, F33, F34, F35, F36, F37,
				 F38, F39, F40, F41, F42, F43, F44, F45, F46,
				 F47, F48, F49, F50, F51, F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      Value, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53).


d_field_PerfStatistics_task_clock(<<Value:64/little-float,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, _, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, Value, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53).


d_field_PerfStatistics_page_faults(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42, F43, F44, F45,
				   F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_page_faults(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28, F29, F30, F31,
				       F32, F33, F34, F35, F36, F37, F38, F39,
				       F40, F41, F42, F43, F44, F45, F46, F47,
				       F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_page_faults(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, _, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42, F43, F44, F45,
				   F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, NewFValue, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_minor_faults(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_minor_faults(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					F31, F32, F33, F34, F35, F36, F37, F38,
					F39, F40, F41, F42, F43, F44, F45, F46,
					F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_minor_faults(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, _, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, NewFValue, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_major_faults(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_major_faults(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					F31, F32, F33, F34, F35, F36, F37, F38,
					F39, F40, F41, F42, F43, F44, F45, F46,
					F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_major_faults(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, _, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, NewFValue, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_context_switches(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_context_switches(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_context_switches(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, _, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, NewFValue, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_cpu_migrations(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_cpu_migrations(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27, F28,
					  F29, F30, F31, F32, F33, F34, F35,
					  F36, F37, F38, F39, F40, F41, F42,
					  F43, F44, F45, F46, F47, F48, F49,
					  F50, F51, F52, F53);
d_field_PerfStatistics_cpu_migrations(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, _, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, F31, F32, F33,
				      F34, F35, F36, F37, F38, F39, F40, F41,
				      F42, F43, F44, F45, F46, F47, F48, F49,
				      F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, NewFValue,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_alignment_faults(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_alignment_faults(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_alignment_faults(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, _, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19,
				      NewFValue, F21, F22, F23, F24, F25, F26,
				      F27, F28, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_emulation_faults(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_emulation_faults(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_emulation_faults(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, _, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      NewFValue, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_dcache_loads(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_dcache_loads(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, F31, F32, F33, F34,
					   F35, F36, F37, F38, F39, F40, F41,
					   F42, F43, F44, F45, F46, F47, F48,
					   F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_dcache_loads(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, _, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, NewFValue, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_dcache_load_misses(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_dcache_load_misses(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
d_field_PerfStatistics_l1_dcache_load_misses(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, _, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, NewFValue, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_dcache_stores(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_dcache_stores(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_dcache_stores(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, _,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, NewFValue, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_dcache_store_misses(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, F25, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_dcache_store_misses(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5, F6, F7, F8, F9,
						  F10, F11, F12, F13, F14, F15,
						  F16, F17, F18, F19, F20, F21,
						  F22, F23, F24, F25, F26, F27,
						  F28, F29, F30, F31, F32, F33,
						  F34, F35, F36, F37, F38, F39,
						  F40, F41, F42, F43, F44, F45,
						  F46, F47, F48, F49, F50, F51,
						  F52, F53);
d_field_PerfStatistics_l1_dcache_store_misses(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5, F6,
					      F7, F8, F9, F10, F11, F12, F13,
					      F14, F15, F16, F17, F18, F19, F20,
					      F21, F22, F23, F24, _, F26, F27,
					      F28, F29, F30, F31, F32, F33, F34,
					      F35, F36, F37, F38, F39, F40, F41,
					      F42, F43, F44, F45, F46, F47, F48,
					      F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, NewFValue, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_dcache_prefetches(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_dcache_prefetches(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42, F43, F44, F45, F46, F47,
						F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_dcache_prefetches(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, _, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, NewFValue, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_dcache_prefetch_misses(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_dcache_prefetch_misses(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_dcache_prefetch_misses(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, _, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, NewFValue,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_icache_loads(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_icache_loads(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, F31, F32, F33, F34,
					   F35, F36, F37, F38, F39, F40, F41,
					   F42, F43, F44, F45, F46, F47, F48,
					   F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_icache_loads(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, _, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27,
				      NewFValue, F29, F30, F31, F32, F33, F34,
				      F35, F36, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_l1_icache_load_misses(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_icache_load_misses(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42, F43, F44, F45,
						 F46, F47, F48, F49, F50, F51,
						 F52, F53);
d_field_PerfStatistics_l1_icache_load_misses(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     _, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42,
					     F43, F44, F45, F46, F47, F48, F49,
					     F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      NewFValue, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_icache_prefetches(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_icache_prefetches(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42, F43, F44, F45, F46, F47,
						F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_icache_prefetches(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, _, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, NewFValue, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_l1_icache_prefetch_misses(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_l1_icache_prefetch_misses(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42, F43,
						     F44, F45, F46, F47, F48,
						     F49, F50, F51, F52, F53);
d_field_PerfStatistics_l1_icache_prefetch_misses(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, _,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42, F43,
						 F44, F45, F46, F47, F48, F49,
						 F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, NewFValue, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_llc_loads(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, F31, F32, F33, F34, F35, F36,
				 F37, F38, F39, F40, F41, F42, F43, F44, F45,
				 F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_llc_loads(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14, F15, F16,
				     F17, F18, F19, F20, F21, F22, F23, F24,
				     F25, F26, F27, F28, F29, F30, F31, F32,
				     F33, F34, F35, F36, F37, F38, F39, F40,
				     F41, F42, F43, F44, F45, F46, F47, F48,
				     F49, F50, F51, F52, F53);
d_field_PerfStatistics_llc_loads(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14, F15, F16, F17, F18,
				 F19, F20, F21, F22, F23, F24, F25, F26, F27,
				 F28, F29, F30, F31, _, F33, F34, F35, F36, F37,
				 F38, F39, F40, F41, F42, F43, F44, F45, F46,
				 F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, NewFValue, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_llc_load_misses(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_llc_load_misses(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, F31, F32, F33, F34,
					   F35, F36, F37, F38, F39, F40, F41,
					   F42, F43, F44, F45, F46, F47, F48,
					   F49, F50, F51, F52, F53);
d_field_PerfStatistics_llc_load_misses(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       _, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, NewFValue, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_llc_stores(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_llc_stores(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53);
d_field_PerfStatistics_llc_stores(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, _, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, NewFValue, F35,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_llc_store_misses(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_llc_store_misses(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_llc_store_misses(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, _, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, NewFValue,
				      F36, F37, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_llc_prefetches(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_llc_prefetches(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					  F7, F8, F9, F10, F11, F12, F13, F14,
					  F15, F16, F17, F18, F19, F20, F21,
					  F22, F23, F24, F25, F26, F27, F28,
					  F29, F30, F31, F32, F33, F34, F35,
					  F36, F37, F38, F39, F40, F41, F42,
					  F43, F44, F45, F46, F47, F48, F49,
					  F50, F51, F52, F53);
d_field_PerfStatistics_llc_prefetches(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, _, F37, F38, F39, F40, F41,
				      F42, F43, F44, F45, F46, F47, F48, F49,
				      F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35,
				      NewFValue, F37, F38, F39, F40, F41, F42,
				      F43, F44, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_llc_prefetch_misses(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42, F43,
					   F44, F45, F46, F47, F48, F49, F50,
					   F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_llc_prefetch_misses(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42, F43, F44, F45, F46, F47,
					       F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_llc_prefetch_misses(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36, _,
					   F38, F39, F40, F41, F42, F43, F44,
					   F45, F46, F47, F48, F49, F50, F51,
					   F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      NewFValue, F38, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_dtlb_loads(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_dtlb_loads(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53);
d_field_PerfStatistics_dtlb_loads(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, _, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, NewFValue, F39, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_dtlb_load_misses(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_dtlb_load_misses(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_dtlb_load_misses(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, _, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, NewFValue, F40, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_dtlb_stores(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42, F43, F44, F45,
				   F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_dtlb_stores(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28, F29, F30, F31,
				       F32, F33, F34, F35, F36, F37, F38, F39,
				       F40, F41, F42, F43, F44, F45, F46, F47,
				       F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_dtlb_stores(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, _, F41, F42, F43, F44, F45,
				   F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, NewFValue, F41, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_dtlb_store_misses(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42, F43, F44, F45, F46, F47, F48,
					 F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_dtlb_store_misses(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42, F43, F44, F45, F46, F47, F48,
					     F49, F50, F51, F52, F53);
d_field_PerfStatistics_dtlb_store_misses(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 _, F42, F43, F44, F45, F46, F47, F48,
					 F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, NewFValue, F42, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_dtlb_prefetches(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_dtlb_prefetches(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, F31, F32, F33, F34,
					   F35, F36, F37, F38, F39, F40, F41,
					   F42, F43, F44, F45, F46, F47, F48,
					   F49, F50, F51, F52, F53);
d_field_PerfStatistics_dtlb_prefetches(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, _, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, NewFValue, F43,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_dtlb_prefetch_misses(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_dtlb_prefetch_misses(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42, F43, F44, F45, F46, F47,
						F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_dtlb_prefetch_misses(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    _, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, NewFValue,
				      F44, F45, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_itlb_loads(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_itlb_loads(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53);
d_field_PerfStatistics_itlb_loads(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, _, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43,
				      NewFValue, F45, F46, F47, F48, F49, F50,
				      F51, F52, F53).


d_field_PerfStatistics_itlb_load_misses(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_itlb_load_misses(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_itlb_load_misses(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, _, F46, F47, F48,
					F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      NewFValue, F46, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_branch_loads(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_branch_loads(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13, F14,
					F15, F16, F17, F18, F19, F20, F21, F22,
					F23, F24, F25, F26, F27, F28, F29, F30,
					F31, F32, F33, F34, F35, F36, F37, F38,
					F39, F40, F41, F42, F43, F44, F45, F46,
					F47, F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_branch_loads(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13, F14, F15, F16, F17, F18,
				    F19, F20, F21, F22, F23, F24, F25, F26, F27,
				    F28, F29, F30, F31, F32, F33, F34, F35, F36,
				    F37, F38, F39, F40, F41, F42, F43, F44, F45,
				    _, F47, F48, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, NewFValue, F47, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_branch_load_misses(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42, F43,
					  F44, F45, F46, F47, F48, F49, F50,
					  F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_branch_load_misses(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42, F43, F44, F45, F46, F47,
					      F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_branch_load_misses(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42, F43,
					  F44, F45, F46, _, F48, F49, F50, F51,
					  F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, NewFValue, F48, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_node_loads(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_node_loads(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				      F8, F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42, F43, F44, F45, F46, F47, F48,
				      F49, F50, F51, F52, F53);
d_field_PerfStatistics_node_loads(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				  F10, F11, F12, F13, F14, F15, F16, F17, F18,
				  F19, F20, F21, F22, F23, F24, F25, F26, F27,
				  F28, F29, F30, F31, F32, F33, F34, F35, F36,
				  F37, F38, F39, F40, F41, F42, F43, F44, F45,
				  F46, F47, _, F49, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, NewFValue, F49, F50, F51,
				      F52, F53).


d_field_PerfStatistics_node_load_misses(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_node_load_misses(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42, F43, F44, F45, F46, F47, F48,
					    F49, F50, F51, F52, F53);
d_field_PerfStatistics_node_load_misses(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42, F43, F44, F45, F46, F47, F48,
					_, F50, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, NewFValue, F50, F51,
				      F52, F53).


d_field_PerfStatistics_node_stores(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42, F43, F44, F45,
				   F46, F47, F48, F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_node_stores(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28, F29, F30, F31,
				       F32, F33, F34, F35, F36, F37, F38, F39,
				       F40, F41, F42, F43, F44, F45, F46, F47,
				       F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_node_stores(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42, F43, F44, F45,
				   F46, F47, F48, F49, _, F51, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, NewFValue, F51,
				      F52, F53).


d_field_PerfStatistics_node_store_misses(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42, F43, F44, F45, F46, F47, F48,
					 F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_node_store_misses(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42, F43, F44, F45, F46, F47, F48,
					     F49, F50, F51, F52, F53);
d_field_PerfStatistics_node_store_misses(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42, F43, F44, F45, F46, F47, F48,
					 F49, F50, _, F52, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, NewFValue,
				      F52, F53).


d_field_PerfStatistics_node_prefetches(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_node_prefetches(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5,
					   F6, F7, F8, F9, F10, F11, F12, F13,
					   F14, F15, F16, F17, F18, F19, F20,
					   F21, F22, F23, F24, F25, F26, F27,
					   F28, F29, F30, F31, F32, F33, F34,
					   F35, F36, F37, F38, F39, F40, F41,
					   F42, F43, F44, F45, F46, F47, F48,
					   F49, F50, F51, F52, F53);
d_field_PerfStatistics_node_prefetches(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				       F9, F10, F11, F12, F13, F14, F15, F16,
				       F17, F18, F19, F20, F21, F22, F23, F24,
				       F25, F26, F27, F28, F29, F30, F31, F32,
				       F33, F34, F35, F36, F37, F38, F39, F40,
				       F41, F42, F43, F44, F45, F46, F47, F48,
				       F49, F50, F51, _, F53) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51,
				      NewFValue, F53).


d_field_PerfStatistics_node_prefetch_misses(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, F53)
    when N < 57 ->
    d_field_PerfStatistics_node_prefetch_misses(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42, F43, F44, F45, F46, F47,
						F48, F49, F50, F51, F52, F53);
d_field_PerfStatistics_node_prefetch_misses(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42,
					    F43, F44, F45, F46, F47, F48, F49,
					    F50, F51, F52, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_PerfStatistics(Rest, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      NewFValue).


skip_varint_PerfStatistics(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30, F31,
			   F32, F33, F34, F35, F36, F37, F38, F39, F40, F41,
			   F42, F43, F44, F45, F46, F47, F48, F49, F50, F51,
			   F52, F53) ->
    skip_varint_PerfStatistics(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15,
			       F16, F17, F18, F19, F20, F21, F22, F23, F24, F25,
			       F26, F27, F28, F29, F30, F31, F32, F33, F34, F35,
			       F36, F37, F38, F39, F40, F41, F42, F43, F44, F45,
			       F46, F47, F48, F49, F50, F51, F52, F53);
skip_varint_PerfStatistics(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30, F31,
			   F32, F33, F34, F35, F36, F37, F38, F39, F40, F41,
			   F42, F43, F44, F45, F46, F47, F48, F49, F50, F51,
			   F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53).


skip_length_delimited_PerfStatistics(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42, F43, F44, F45, F46, F47, F48, F49,
				     F50, F51, F52, F53)
    when N < 57 ->
    skip_length_delimited_PerfStatistics(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 F31, F32, F33, F34, F35, F36, F37, F38,
					 F39, F40, F41, F42, F43, F44, F45, F46,
					 F47, F48, F49, F50, F51, F52, F53);
skip_length_delimited_PerfStatistics(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42, F43, F44, F45, F46, F47, F48, F49,
				     F50, F51, F52, F53) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PerfStatistics(Rest2, 0, 0, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53).


skip_32_PerfStatistics(<<_:32, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28, F29, F30, F31, F32, F33, F34, F35,
		       F36, F37, F38, F39, F40, F41, F42, F43, F44, F45, F46,
		       F47, F48, F49, F50, F51, F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53).


skip_64_PerfStatistics(<<_:64, Rest/binary>>, Z1, Z2,
		       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		       F14, F15, F16, F17, F18, F19, F20, F21, F22, F23, F24,
		       F25, F26, F27, F28, F29, F30, F31, F32, F33, F34, F35,
		       F36, F37, F38, F39, F40, F41, F42, F43, F44, F45, F46,
		       F47, F48, F49, F50, F51, F52, F53) ->
    dfp_read_field_def_PerfStatistics(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				      F13, F14, F15, F16, F17, F18, F19, F20,
				      F21, F22, F23, F24, F25, F26, F27, F28,
				      F29, F30, F31, F32, F33, F34, F35, F36,
				      F37, F38, F39, F40, F41, F42, F43, F44,
				      F45, F46, F47, F48, F49, F50, F51, F52,
				      F53).


d_msg_ResourceStatistics(Bin) ->
    dfp_read_field_def_ResourceStatistics(Bin, 0, 0,
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined),
					  id(undefined), id(undefined), id([]),
					  id(undefined)).

dfp_read_field_def_ResourceStatistics(<<9,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_timestamp(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, F31, F32, F33, F34,
					 F35, F36, F37, F38, F39, F40, F41,
					 F42);
dfp_read_field_def_ResourceStatistics(<<240, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_processes(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, F31, F32, F33, F34,
					 F35, F36, F37, F38, F39, F40, F41,
					 F42);
dfp_read_field_def_ResourceStatistics(<<248, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_threads(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10, F11,
				       F12, F13, F14, F15, F16, F17, F18, F19,
				       F20, F21, F22, F23, F24, F25, F26, F27,
				       F28, F29, F30, F31, F32, F33, F34, F35,
				       F36, F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<17,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_cpus_user_time_secs(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41,
						   F42);
dfp_read_field_def_ResourceStatistics(<<25,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_cpus_system_time_secs(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42);
dfp_read_field_def_ResourceStatistics(<<33,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_cpus_limit(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<56,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_cpus_nr_periods(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<64,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_cpus_nr_throttled(Rest, Z1,
						 Z2, F1, F2, F3, F4, F5, F6, F7,
						 F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<73,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_cpus_throttled_time_secs(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42);
dfp_read_field_def_ResourceStatistics(<<160, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_total_bytes(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<168, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_total_memsw_bytes(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42);
dfp_read_field_def_ResourceStatistics(<<48,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_limit_bytes(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<176, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_soft_limit_bytes(Rest,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42);
dfp_read_field_def_ResourceStatistics(<<80,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_file_bytes(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<88,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_anon_bytes(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<184, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_cache_bytes(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<40,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_rss_bytes(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<96,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_mapped_file_bytes(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42);
dfp_read_field_def_ResourceStatistics(<<192, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_swap_bytes(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<200, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_unevictable_bytes(Rest,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, F38, F39, F40, F41,
						     F42);
dfp_read_field_def_ResourceStatistics(<<128, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_low_pressure_counter(Rest,
							Z1, Z2, F1, F2, F3, F4,
							F5, F6, F7, F8, F9, F10,
							F11, F12, F13, F14, F15,
							F16, F17, F18, F19, F20,
							F21, F22, F23, F24, F25,
							F26, F27, F28, F29, F30,
							F31, F32, F33, F34, F35,
							F36, F37, F38, F39, F40,
							F41, F42);
dfp_read_field_def_ResourceStatistics(<<136, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_medium_pressure_counter(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6, F7, F8,
							   F9, F10, F11, F12,
							   F13, F14, F15, F16,
							   F17, F18, F19, F20,
							   F21, F22, F23, F24,
							   F25, F26, F27, F28,
							   F29, F30, F31, F32,
							   F33, F34, F35, F36,
							   F37, F38, F39, F40,
							   F41, F42);
dfp_read_field_def_ResourceStatistics(<<144, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_mem_critical_pressure_counter(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42);
dfp_read_field_def_ResourceStatistics(<<208, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_disk_limit_bytes(Rest, Z1,
						Z2, F1, F2, F3, F4, F5, F6, F7,
						F8, F9, F10, F11, F12, F13, F14,
						F15, F16, F17, F18, F19, F20,
						F21, F22, F23, F24, F25, F26,
						F27, F28, F29, F30, F31, F32,
						F33, F34, F35, F36, F37, F38,
						F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<216, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_disk_used_bytes(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5, F6, F7, F8,
					       F9, F10, F11, F12, F13, F14, F15,
					       F16, F17, F18, F19, F20, F21,
					       F22, F23, F24, F25, F26, F27,
					       F28, F29, F30, F31, F32, F33,
					       F34, F35, F36, F37, F38, F39,
					       F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<106,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_perf(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14, F15, F16, F17, F18, F19, F20, F21,
				    F22, F23, F24, F25, F26, F27, F28, F29, F30,
				    F31, F32, F33, F34, F35, F36, F37, F38, F39,
				    F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<112,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_rx_packets(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<120,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_rx_bytes(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<128, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_rx_errors(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<136, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_rx_dropped(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<144, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tx_packets(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<152, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tx_bytes(Rest, Z1, Z2,
					    F1, F2, F3, F4, F5, F6, F7, F8, F9,
					    F10, F11, F12, F13, F14, F15, F16,
					    F17, F18, F19, F20, F21, F22, F23,
					    F24, F25, F26, F27, F28, F29, F30,
					    F31, F32, F33, F34, F35, F36, F37,
					    F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<160, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tx_errors(Rest, Z1, Z2,
					     F1, F2, F3, F4, F5, F6, F7, F8, F9,
					     F10, F11, F12, F13, F14, F15, F16,
					     F17, F18, F19, F20, F21, F22, F23,
					     F24, F25, F26, F27, F28, F29, F30,
					     F31, F32, F33, F34, F35, F36, F37,
					     F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<168, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tx_dropped(Rest, Z1, Z2,
					      F1, F2, F3, F4, F5, F6, F7, F8,
					      F9, F10, F11, F12, F13, F14, F15,
					      F16, F17, F18, F19, F20, F21, F22,
					      F23, F24, F25, F26, F27, F28, F29,
					      F30, F31, F32, F33, F34, F35, F36,
					      F37, F38, F39, F40, F41, F42);
dfp_read_field_def_ResourceStatistics(<<177, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tcp_rtt_microsecs_p50(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42);
dfp_read_field_def_ResourceStatistics(<<185, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tcp_rtt_microsecs_p90(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42);
dfp_read_field_def_ResourceStatistics(<<193, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tcp_rtt_microsecs_p95(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42);
dfp_read_field_def_ResourceStatistics(<<201, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tcp_rtt_microsecs_p99(Rest,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42);
dfp_read_field_def_ResourceStatistics(<<225, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tcp_active_connections(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40,
							  F41, F42);
dfp_read_field_def_ResourceStatistics(<<233, 1,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_tcp_time_wait_connections(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6, F7, F8,
							     F9, F10, F11, F12,
							     F13, F14, F15, F16,
							     F17, F18, F19, F20,
							     F21, F22, F23, F24,
							     F25, F26, F27, F28,
							     F29, F30, F31, F32,
							     F33, F34, F35, F36,
							     F37, F38, F39, F40,
							     F41, F42);
dfp_read_field_def_ResourceStatistics(<<154, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_traffic_control_statistics(Rest,
							      Z1, Z2, F1, F2,
							      F3, F4, F5, F6,
							      F7, F8, F9, F10,
							      F11, F12, F13,
							      F14, F15, F16,
							      F17, F18, F19,
							      F20, F21, F22,
							      F23, F24, F25,
							      F26, F27, F28,
							      F29, F30, F31,
							      F32, F33, F34,
							      F35, F36, F37,
							      F38, F39, F40,
							      F41, F42);
dfp_read_field_def_ResourceStatistics(<<210, 2,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8,
				      F9, F10, F11, F12, F13, F14, F15, F16,
				      F17, F18, F19, F20, F21, F22, F23, F24,
				      F25, F26, F27, F28, F29, F30, F31, F32,
				      F33, F34, F35, F36, F37, F38, F39, F40,
				      F41, F42) ->
    d_field_ResourceStatistics_net_snmp_statistics(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6,
						   F7, F8, F9, F10, F11, F12,
						   F13, F14, F15, F16, F17, F18,
						   F19, F20, F21, F22, F23, F24,
						   F25, F26, F27, F28, F29, F30,
						   F31, F32, F33, F34, F35, F36,
						   F37, F38, F39, F40, F41,
						   F42);
dfp_read_field_def_ResourceStatistics(<<>>, 0, 0, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42) ->
    #'ResourceStatistics'{timestamp = F1, processes = F2,
			  threads = F3, cpus_user_time_secs = F4,
			  cpus_system_time_secs = F5, cpus_limit = F6,
			  cpus_nr_periods = F7, cpus_nr_throttled = F8,
			  cpus_throttled_time_secs = F9, mem_total_bytes = F10,
			  mem_total_memsw_bytes = F11, mem_limit_bytes = F12,
			  mem_soft_limit_bytes = F13, mem_file_bytes = F14,
			  mem_anon_bytes = F15, mem_cache_bytes = F16,
			  mem_rss_bytes = F17, mem_mapped_file_bytes = F18,
			  mem_swap_bytes = F19, mem_unevictable_bytes = F20,
			  mem_low_pressure_counter = F21,
			  mem_medium_pressure_counter = F22,
			  mem_critical_pressure_counter = F23,
			  disk_limit_bytes = F24, disk_used_bytes = F25,
			  perf = F26, net_rx_packets = F27, net_rx_bytes = F28,
			  net_rx_errors = F29, net_rx_dropped = F30,
			  net_tx_packets = F31, net_tx_bytes = F32,
			  net_tx_errors = F33, net_tx_dropped = F34,
			  net_tcp_rtt_microsecs_p50 = F35,
			  net_tcp_rtt_microsecs_p90 = F36,
			  net_tcp_rtt_microsecs_p95 = F37,
			  net_tcp_rtt_microsecs_p99 = F38,
			  net_tcp_active_connections = F39,
			  net_tcp_time_wait_connections = F40,
			  net_traffic_control_statistics = lists_reverse(F41),
			  net_snmp_statistics = F42};
dfp_read_field_def_ResourceStatistics(Other, Z1, Z2, F1,
				      F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				      F12, F13, F14, F15, F16, F17, F18, F19,
				      F20, F21, F22, F23, F24, F25, F26, F27,
				      F28, F29, F30, F31, F32, F33, F34, F35,
				      F36, F37, F38, F39, F40, F41, F42) ->
    dg_read_field_def_ResourceStatistics(Other, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, F12, F13, F14, F15, F16, F17, F18,
					 F19, F20, F21, F22, F23, F24, F25, F26,
					 F27, F28, F29, F30, F31, F32, F33, F34,
					 F35, F36, F37, F38, F39, F40, F41,
					 F42).

dg_read_field_def_ResourceStatistics(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42)
    when N < 32 - 7 ->
    dg_read_field_def_ResourceStatistics(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 F31, F32, F33, F34, F35, F36, F37, F38,
					 F39, F40, F41, F42);
dg_read_field_def_ResourceStatistics(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_ResourceStatistics_timestamp(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, F31, F32, F33, F34,
					       F35, F36, F37, F38, F39, F40,
					       F41, F42);
      240 ->
	  d_field_ResourceStatistics_processes(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, F12, F13, F14, F15, F16,
					       F17, F18, F19, F20, F21, F22,
					       F23, F24, F25, F26, F27, F28,
					       F29, F30, F31, F32, F33, F34,
					       F35, F36, F37, F38, F39, F40,
					       F41, F42);
      248 ->
	  d_field_ResourceStatistics_threads(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10,
					     F11, F12, F13, F14, F15, F16, F17,
					     F18, F19, F20, F21, F22, F23, F24,
					     F25, F26, F27, F28, F29, F30, F31,
					     F32, F33, F34, F35, F36, F37, F38,
					     F39, F40, F41, F42);
      17 ->
	  d_field_ResourceStatistics_cpus_user_time_secs(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42);
      25 ->
	  d_field_ResourceStatistics_cpus_system_time_secs(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42);
      33 ->
	  d_field_ResourceStatistics_cpus_limit(Rest, 0, 0, F1,
						F2, F3, F4, F5, F6, F7, F8, F9,
						F10, F11, F12, F13, F14, F15,
						F16, F17, F18, F19, F20, F21,
						F22, F23, F24, F25, F26, F27,
						F28, F29, F30, F31, F32, F33,
						F34, F35, F36, F37, F38, F39,
						F40, F41, F42);
      56 ->
	  d_field_ResourceStatistics_cpus_nr_periods(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
      64 ->
	  d_field_ResourceStatistics_cpus_nr_throttled(Rest, 0, 0,
						       F1, F2, F3, F4, F5, F6,
						       F7, F8, F9, F10, F11,
						       F12, F13, F14, F15, F16,
						       F17, F18, F19, F20, F21,
						       F22, F23, F24, F25, F26,
						       F27, F28, F29, F30, F31,
						       F32, F33, F34, F35, F36,
						       F37, F38, F39, F40, F41,
						       F42);
      73 ->
	  d_field_ResourceStatistics_cpus_throttled_time_secs(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40, F41,
							      F42);
      288 ->
	  d_field_ResourceStatistics_mem_total_bytes(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
      296 ->
	  d_field_ResourceStatistics_mem_total_memsw_bytes(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42);
      48 ->
	  d_field_ResourceStatistics_mem_limit_bytes(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
      304 ->
	  d_field_ResourceStatistics_mem_soft_limit_bytes(Rest, 0,
							  0, F1, F2, F3, F4, F5,
							  F6, F7, F8, F9, F10,
							  F11, F12, F13, F14,
							  F15, F16, F17, F18,
							  F19, F20, F21, F22,
							  F23, F24, F25, F26,
							  F27, F28, F29, F30,
							  F31, F32, F33, F34,
							  F35, F36, F37, F38,
							  F39, F40, F41, F42);
      80 ->
	  d_field_ResourceStatistics_mem_file_bytes(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      88 ->
	  d_field_ResourceStatistics_mem_anon_bytes(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      312 ->
	  d_field_ResourceStatistics_mem_cache_bytes(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
      40 ->
	  d_field_ResourceStatistics_mem_rss_bytes(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25, F26,
						   F27, F28, F29, F30, F31, F32,
						   F33, F34, F35, F36, F37, F38,
						   F39, F40, F41, F42);
      96 ->
	  d_field_ResourceStatistics_mem_mapped_file_bytes(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42);
      320 ->
	  d_field_ResourceStatistics_mem_swap_bytes(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      328 ->
	  d_field_ResourceStatistics_mem_unevictable_bytes(Rest,
							   0, 0, F1, F2, F3, F4,
							   F5, F6, F7, F8, F9,
							   F10, F11, F12, F13,
							   F14, F15, F16, F17,
							   F18, F19, F20, F21,
							   F22, F23, F24, F25,
							   F26, F27, F28, F29,
							   F30, F31, F32, F33,
							   F34, F35, F36, F37,
							   F38, F39, F40, F41,
							   F42);
      256 ->
	  d_field_ResourceStatistics_mem_low_pressure_counter(Rest,
							      0, 0, F1, F2, F3,
							      F4, F5, F6, F7,
							      F8, F9, F10, F11,
							      F12, F13, F14,
							      F15, F16, F17,
							      F18, F19, F20,
							      F21, F22, F23,
							      F24, F25, F26,
							      F27, F28, F29,
							      F30, F31, F32,
							      F33, F34, F35,
							      F36, F37, F38,
							      F39, F40, F41,
							      F42);
      264 ->
	  d_field_ResourceStatistics_mem_medium_pressure_counter(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5, F6,
								 F7, F8, F9,
								 F10, F11, F12,
								 F13, F14, F15,
								 F16, F17, F18,
								 F19, F20, F21,
								 F22, F23, F24,
								 F25, F26, F27,
								 F28, F29, F30,
								 F31, F32, F33,
								 F34, F35, F36,
								 F37, F38, F39,
								 F40, F41, F42);
      272 ->
	  d_field_ResourceStatistics_mem_critical_pressure_counter(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6, F7, F8,
								   F9, F10, F11,
								   F12, F13,
								   F14, F15,
								   F16, F17,
								   F18, F19,
								   F20, F21,
								   F22, F23,
								   F24, F25,
								   F26, F27,
								   F28, F29,
								   F30, F31,
								   F32, F33,
								   F34, F35,
								   F36, F37,
								   F38, F39,
								   F40, F41,
								   F42);
      208 ->
	  d_field_ResourceStatistics_disk_limit_bytes(Rest, 0, 0,
						      F1, F2, F3, F4, F5, F6,
						      F7, F8, F9, F10, F11, F12,
						      F13, F14, F15, F16, F17,
						      F18, F19, F20, F21, F22,
						      F23, F24, F25, F26, F27,
						      F28, F29, F30, F31, F32,
						      F33, F34, F35, F36, F37,
						      F38, F39, F40, F41, F42);
      216 ->
	  d_field_ResourceStatistics_disk_used_bytes(Rest, 0, 0,
						     F1, F2, F3, F4, F5, F6, F7,
						     F8, F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
      106 ->
	  d_field_ResourceStatistics_perf(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14, F15, F16, F17, F18, F19,
					  F20, F21, F22, F23, F24, F25, F26,
					  F27, F28, F29, F30, F31, F32, F33,
					  F34, F35, F36, F37, F38, F39, F40,
					  F41, F42);
      112 ->
	  d_field_ResourceStatistics_net_rx_packets(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      120 ->
	  d_field_ResourceStatistics_net_rx_bytes(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42);
      128 ->
	  d_field_ResourceStatistics_net_rx_errors(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25, F26,
						   F27, F28, F29, F30, F31, F32,
						   F33, F34, F35, F36, F37, F38,
						   F39, F40, F41, F42);
      136 ->
	  d_field_ResourceStatistics_net_rx_dropped(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      144 ->
	  d_field_ResourceStatistics_net_tx_packets(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      152 ->
	  d_field_ResourceStatistics_net_tx_bytes(Rest, 0, 0, F1,
						  F2, F3, F4, F5, F6, F7, F8,
						  F9, F10, F11, F12, F13, F14,
						  F15, F16, F17, F18, F19, F20,
						  F21, F22, F23, F24, F25, F26,
						  F27, F28, F29, F30, F31, F32,
						  F33, F34, F35, F36, F37, F38,
						  F39, F40, F41, F42);
      160 ->
	  d_field_ResourceStatistics_net_tx_errors(Rest, 0, 0, F1,
						   F2, F3, F4, F5, F6, F7, F8,
						   F9, F10, F11, F12, F13, F14,
						   F15, F16, F17, F18, F19, F20,
						   F21, F22, F23, F24, F25, F26,
						   F27, F28, F29, F30, F31, F32,
						   F33, F34, F35, F36, F37, F38,
						   F39, F40, F41, F42);
      168 ->
	  d_field_ResourceStatistics_net_tx_dropped(Rest, 0, 0,
						    F1, F2, F3, F4, F5, F6, F7,
						    F8, F9, F10, F11, F12, F13,
						    F14, F15, F16, F17, F18,
						    F19, F20, F21, F22, F23,
						    F24, F25, F26, F27, F28,
						    F29, F30, F31, F32, F33,
						    F34, F35, F36, F37, F38,
						    F39, F40, F41, F42);
      177 ->
	  d_field_ResourceStatistics_net_tcp_rtt_microsecs_p50(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40, F41,
							       F42);
      185 ->
	  d_field_ResourceStatistics_net_tcp_rtt_microsecs_p90(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40, F41,
							       F42);
      193 ->
	  d_field_ResourceStatistics_net_tcp_rtt_microsecs_p95(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40, F41,
							       F42);
      201 ->
	  d_field_ResourceStatistics_net_tcp_rtt_microsecs_p99(Rest,
							       0, 0, F1, F2, F3,
							       F4, F5, F6, F7,
							       F8, F9, F10, F11,
							       F12, F13, F14,
							       F15, F16, F17,
							       F18, F19, F20,
							       F21, F22, F23,
							       F24, F25, F26,
							       F27, F28, F29,
							       F30, F31, F32,
							       F33, F34, F35,
							       F36, F37, F38,
							       F39, F40, F41,
							       F42);
      225 ->
	  d_field_ResourceStatistics_net_tcp_active_connections(Rest,
								0, 0, F1, F2,
								F3, F4, F5, F6,
								F7, F8, F9, F10,
								F11, F12, F13,
								F14, F15, F16,
								F17, F18, F19,
								F20, F21, F22,
								F23, F24, F25,
								F26, F27, F28,
								F29, F30, F31,
								F32, F33, F34,
								F35, F36, F37,
								F38, F39, F40,
								F41, F42);
      233 ->
	  d_field_ResourceStatistics_net_tcp_time_wait_connections(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6, F7, F8,
								   F9, F10, F11,
								   F12, F13,
								   F14, F15,
								   F16, F17,
								   F18, F19,
								   F20, F21,
								   F22, F23,
								   F24, F25,
								   F26, F27,
								   F28, F29,
								   F30, F31,
								   F32, F33,
								   F34, F35,
								   F36, F37,
								   F38, F39,
								   F40, F41,
								   F42);
      282 ->
	  d_field_ResourceStatistics_net_traffic_control_statistics(Rest,
								    0, 0, F1,
								    F2, F3, F4,
								    F5, F6, F7,
								    F8, F9, F10,
								    F11, F12,
								    F13, F14,
								    F15, F16,
								    F17, F18,
								    F19, F20,
								    F21, F22,
								    F23, F24,
								    F25, F26,
								    F27, F28,
								    F29, F30,
								    F31, F32,
								    F33, F34,
								    F35, F36,
								    F37, F38,
								    F39, F40,
								    F41, F42);
      338 ->
	  d_field_ResourceStatistics_net_snmp_statistics(Rest, 0,
							 0, F1, F2, F3, F4, F5,
							 F6, F7, F8, F9, F10,
							 F11, F12, F13, F14,
							 F15, F16, F17, F18,
							 F19, F20, F21, F22,
							 F23, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResourceStatistics(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42);
	    1 ->
		skip_64_ResourceStatistics(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27, F28, F29, F30, F31, F32, F33,
					   F34, F35, F36, F37, F38, F39, F40,
					   F41, F42);
	    2 ->
		skip_length_delimited_ResourceStatistics(Rest, 0, 0, F1,
							 F2, F3, F4, F5, F6, F7,
							 F8, F9, F10, F11, F12,
							 F13, F14, F15, F16,
							 F17, F18, F19, F20,
							 F21, F22, F23, F24,
							 F25, F26, F27, F28,
							 F29, F30, F31, F32,
							 F33, F34, F35, F36,
							 F37, F38, F39, F40,
							 F41, F42);
	    5 ->
		skip_32_ResourceStatistics(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14, F15, F16, F17, F18, F19,
					   F20, F21, F22, F23, F24, F25, F26,
					   F27, F28, F29, F30, F31, F32, F33,
					   F34, F35, F36, F37, F38, F39, F40,
					   F41, F42)
	  end
    end;
dg_read_field_def_ResourceStatistics(<<>>, 0, 0, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14, F15, F16, F17, F18, F19, F20,
				     F21, F22, F23, F24, F25, F26, F27, F28,
				     F29, F30, F31, F32, F33, F34, F35, F36,
				     F37, F38, F39, F40, F41, F42) ->
    #'ResourceStatistics'{timestamp = F1, processes = F2,
			  threads = F3, cpus_user_time_secs = F4,
			  cpus_system_time_secs = F5, cpus_limit = F6,
			  cpus_nr_periods = F7, cpus_nr_throttled = F8,
			  cpus_throttled_time_secs = F9, mem_total_bytes = F10,
			  mem_total_memsw_bytes = F11, mem_limit_bytes = F12,
			  mem_soft_limit_bytes = F13, mem_file_bytes = F14,
			  mem_anon_bytes = F15, mem_cache_bytes = F16,
			  mem_rss_bytes = F17, mem_mapped_file_bytes = F18,
			  mem_swap_bytes = F19, mem_unevictable_bytes = F20,
			  mem_low_pressure_counter = F21,
			  mem_medium_pressure_counter = F22,
			  mem_critical_pressure_counter = F23,
			  disk_limit_bytes = F24, disk_used_bytes = F25,
			  perf = F26, net_rx_packets = F27, net_rx_bytes = F28,
			  net_rx_errors = F29, net_rx_dropped = F30,
			  net_tx_packets = F31, net_tx_bytes = F32,
			  net_tx_errors = F33, net_tx_dropped = F34,
			  net_tcp_rtt_microsecs_p50 = F35,
			  net_tcp_rtt_microsecs_p90 = F36,
			  net_tcp_rtt_microsecs_p95 = F37,
			  net_tcp_rtt_microsecs_p99 = F38,
			  net_tcp_active_connections = F39,
			  net_tcp_time_wait_connections = F40,
			  net_traffic_control_statistics = lists_reverse(F41),
			  net_snmp_statistics = F42}.

d_field_ResourceStatistics_timestamp(<<Value:64/little-float,
				       Rest/binary>>,
				     Z1, Z2, _, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2,
					  Value, F2, F3, F4, F5, F6, F7, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_processes(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42)
    when N < 57 ->
    d_field_ResourceStatistics_processes(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, F12, F13, F14,
					 F15, F16, F17, F18, F19, F20, F21, F22,
					 F23, F24, F25, F26, F27, F28, F29, F30,
					 F31, F32, F33, F34, F35, F36, F37, F38,
					 F39, F40, F41, F42);
d_field_ResourceStatistics_processes(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, _, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, F12, F13, F14, F15, F16, F17,
				     F18, F19, F20, F21, F22, F23, F24, F25,
				     F26, F27, F28, F29, F30, F31, F32, F33,
				     F34, F35, F36, F37, F38, F39, F40, F41,
				     F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  NewFValue, F3, F4, F5, F6, F7, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_threads(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_threads(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10, F11, F12, F13, F14, F15,
				       F16, F17, F18, F19, F20, F21, F22, F23,
				       F24, F25, F26, F27, F28, F29, F30, F31,
				       F32, F33, F34, F35, F36, F37, F38, F39,
				       F40, F41, F42);
d_field_ResourceStatistics_threads(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, _, F4, F5, F6, F7, F8, F9,
				   F10, F11, F12, F13, F14, F15, F16, F17, F18,
				   F19, F20, F21, F22, F23, F24, F25, F26, F27,
				   F28, F29, F30, F31, F32, F33, F34, F35, F36,
				   F37, F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, NewFValue, F4, F5, F6, F7, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_cpus_user_time_secs(<<Value:64/little-float,
						 Rest/binary>>,
					       Z1, Z2, F1, F2, F3, _, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, Value, F5, F6, F7, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_cpus_system_time_secs(<<Value:64/little-float,
						   Rest/binary>>,
						 Z1, Z2, F1, F2, F3, F4, _, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, Value, F6, F7, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_cpus_limit(<<Value:64/little-float,
					Rest/binary>>,
				      Z1, Z2, F1, F2, F3, F4, F5, _, F7, F8, F9,
				      F10, F11, F12, F13, F14, F15, F16, F17,
				      F18, F19, F20, F21, F22, F23, F24, F25,
				      F26, F27, F28, F29, F30, F31, F32, F33,
				      F34, F35, F36, F37, F38, F39, F40, F41,
				      F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, Value, F7, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_cpus_nr_periods(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_cpus_nr_periods(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42);
d_field_ResourceStatistics_cpus_nr_periods(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, _,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, NewFValue, F8, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_cpus_nr_throttled(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     F8, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_cpus_nr_throttled(Rest,
						 N + 7, X bsl N + Acc, F1, F2,
						 F3, F4, F5, F6, F7, F8, F9,
						 F10, F11, F12, F13, F14, F15,
						 F16, F17, F18, F19, F20, F21,
						 F22, F23, F24, F25, F26, F27,
						 F28, F29, F30, F31, F32, F33,
						 F34, F35, F36, F37, F38, F39,
						 F40, F41, F42);
d_field_ResourceStatistics_cpus_nr_throttled(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1, F2, F3, F4, F5, F6, F7,
					     _, F9, F10, F11, F12, F13, F14,
					     F15, F16, F17, F18, F19, F20, F21,
					     F22, F23, F24, F25, F26, F27, F28,
					     F29, F30, F31, F32, F33, F34, F35,
					     F36, F37, F38, F39, F40, F41,
					     F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, NewFValue, F9,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_cpus_throttled_time_secs(<<Value:64/little-float,
						      Rest/binary>>,
						    Z1, Z2, F1, F2, F3, F4, F5,
						    F6, F7, F8, _, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, Value,
					  F10, F11, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_total_bytes(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_total_bytes(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42);
d_field_ResourceStatistics_mem_total_bytes(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, _, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9,
					  NewFValue, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_total_memsw_bytes(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_total_memsw_bytes(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
d_field_ResourceStatistics_mem_total_memsw_bytes(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, _, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  NewFValue, F12, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_limit_bytes(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_limit_bytes(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42);
d_field_ResourceStatistics_mem_limit_bytes(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, _, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, NewFValue, F13, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_soft_limit_bytes(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, F13,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_soft_limit_bytes(Rest,
						    N + 7, X bsl N + Acc, F1,
						    F2, F3, F4, F5, F6, F7, F8,
						    F9, F10, F11, F12, F13, F14,
						    F15, F16, F17, F18, F19,
						    F20, F21, F22, F23, F24,
						    F25, F26, F27, F28, F29,
						    F30, F31, F32, F33, F34,
						    F35, F36, F37, F38, F39,
						    F40, F41, F42);
d_field_ResourceStatistics_mem_soft_limit_bytes(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F1, F2, F3, F4, F5, F6,
						F7, F8, F9, F10, F11, F12, _,
						F14, F15, F16, F17, F18, F19,
						F20, F21, F22, F23, F24, F25,
						F26, F27, F28, F29, F30, F31,
						F32, F33, F34, F35, F36, F37,
						F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, NewFValue, F14, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_file_bytes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_file_bytes(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_mem_file_bytes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, _, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, NewFValue, F15, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_anon_bytes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_anon_bytes(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_mem_anon_bytes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, _,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, NewFValue, F16,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_cache_bytes(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_cache_bytes(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42);
d_field_ResourceStatistics_mem_cache_bytes(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   _, F17, F18, F19, F20, F21, F22, F23,
					   F24, F25, F26, F27, F28, F29, F30,
					   F31, F32, F33, F34, F35, F36, F37,
					   F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, NewFValue,
					  F17, F18, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_rss_bytes(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_rss_bytes(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42);
d_field_ResourceStatistics_mem_rss_bytes(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 _, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16,
					  NewFValue, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_mapped_file_bytes(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_mapped_file_bytes(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
d_field_ResourceStatistics_mem_mapped_file_bytes(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, _, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  NewFValue, F19, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_swap_bytes(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_swap_bytes(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_mem_swap_bytes(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, _, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, NewFValue, F20, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_unevictable_bytes(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 F20, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_unevictable_bytes(Rest,
						     N + 7, X bsl N + Acc, F1,
						     F2, F3, F4, F5, F6, F7, F8,
						     F9, F10, F11, F12, F13,
						     F14, F15, F16, F17, F18,
						     F19, F20, F21, F22, F23,
						     F24, F25, F26, F27, F28,
						     F29, F30, F31, F32, F33,
						     F34, F35, F36, F37, F38,
						     F39, F40, F41, F42);
d_field_ResourceStatistics_mem_unevictable_bytes(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1, F2, F3, F4, F5, F6,
						 F7, F8, F9, F10, F11, F12, F13,
						 F14, F15, F16, F17, F18, F19,
						 _, F21, F22, F23, F24, F25,
						 F26, F27, F28, F29, F30, F31,
						 F32, F33, F34, F35, F36, F37,
						 F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, NewFValue, F21, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_low_pressure_counter(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, F21,
						    F22, F23, F24, F25, F26,
						    F27, F28, F29, F30, F31,
						    F32, F33, F34, F35, F36,
						    F37, F38, F39, F40, F41,
						    F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_low_pressure_counter(Rest,
							N + 7, X bsl N + Acc,
							F1, F2, F3, F4, F5, F6,
							F7, F8, F9, F10, F11,
							F12, F13, F14, F15, F16,
							F17, F18, F19, F20, F21,
							F22, F23, F24, F25, F26,
							F27, F28, F29, F30, F31,
							F32, F33, F34, F35, F36,
							F37, F38, F39, F40, F41,
							F42);
d_field_ResourceStatistics_mem_low_pressure_counter(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F1, F2, F3, F4, F5,
						    F6, F7, F8, F9, F10, F11,
						    F12, F13, F14, F15, F16,
						    F17, F18, F19, F20, _, F22,
						    F23, F24, F25, F26, F27,
						    F28, F29, F30, F31, F32,
						    F33, F34, F35, F36, F37,
						    F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, NewFValue, F22, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_medium_pressure_counter(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, F22, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_medium_pressure_counter(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6, F7, F8, F9, F10,
							   F11, F12, F13, F14,
							   F15, F16, F17, F18,
							   F19, F20, F21, F22,
							   F23, F24, F25, F26,
							   F27, F28, F29, F30,
							   F31, F32, F33, F34,
							   F35, F36, F37, F38,
							   F39, F40, F41, F42);
d_field_ResourceStatistics_mem_medium_pressure_counter(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6, F7, F8, F9, F10,
						       F11, F12, F13, F14, F15,
						       F16, F17, F18, F19, F20,
						       F21, _, F23, F24, F25,
						       F26, F27, F28, F29, F30,
						       F31, F32, F33, F34, F35,
						       F36, F37, F38, F39, F40,
						       F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, NewFValue, F23,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_mem_critical_pressure_counter(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, F40, F41,
							 F42)
    when N < 57 ->
    d_field_ResourceStatistics_mem_critical_pressure_counter(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5, F6,
							     F7, F8, F9, F10,
							     F11, F12, F13, F14,
							     F15, F16, F17, F18,
							     F19, F20, F21, F22,
							     F23, F24, F25, F26,
							     F27, F28, F29, F30,
							     F31, F32, F33, F34,
							     F35, F36, F37, F38,
							     F39, F40, F41,
							     F42);
d_field_ResourceStatistics_mem_critical_pressure_counter(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, _, F24, F25, F26,
							 F27, F28, F29, F30,
							 F31, F32, F33, F34,
							 F35, F36, F37, F38,
							 F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, NewFValue,
					  F24, F25, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_disk_limit_bytes(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, F24, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_disk_limit_bytes(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5, F6, F7, F8, F9, F10, F11,
						F12, F13, F14, F15, F16, F17,
						F18, F19, F20, F21, F22, F23,
						F24, F25, F26, F27, F28, F29,
						F30, F31, F32, F33, F34, F35,
						F36, F37, F38, F39, F40, F41,
						F42);
d_field_ResourceStatistics_disk_limit_bytes(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5, F6, F7,
					    F8, F9, F10, F11, F12, F13, F14,
					    F15, F16, F17, F18, F19, F20, F21,
					    F22, F23, _, F25, F26, F27, F28,
					    F29, F30, F31, F32, F33, F34, F35,
					    F36, F37, F38, F39, F40, F41,
					    F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23,
					  NewFValue, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42).


d_field_ResourceStatistics_disk_used_bytes(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, F25, F26, F27, F28, F29,
					   F30, F31, F32, F33, F34, F35, F36,
					   F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_disk_used_bytes(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5, F6, F7, F8, F9, F10, F11,
					       F12, F13, F14, F15, F16, F17,
					       F18, F19, F20, F21, F22, F23,
					       F24, F25, F26, F27, F28, F29,
					       F30, F31, F32, F33, F34, F35,
					       F36, F37, F38, F39, F40, F41,
					       F42);
d_field_ResourceStatistics_disk_used_bytes(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5, F6, F7,
					   F8, F9, F10, F11, F12, F13, F14, F15,
					   F16, F17, F18, F19, F20, F21, F22,
					   F23, F24, _, F26, F27, F28, F29, F30,
					   F31, F32, F33, F34, F35, F36, F37,
					   F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  NewFValue, F26, F27, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_perf(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, F31, F32, F33, F34, F35, F36, F37,
				F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_perf(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14, F15, F16,
				    F17, F18, F19, F20, F21, F22, F23, F24, F25,
				    F26, F27, F28, F29, F30, F31, F32, F33, F34,
				    F35, F36, F37, F38, F39, F40, F41, F42);
d_field_ResourceStatistics_perf(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14, F15, F16, F17, F18, F19,
				F20, F21, F22, F23, F24, F25, F26, F27, F28,
				F29, F30, F31, F32, F33, F34, F35, F36, F37,
				F38, F39, F40, F41, F42) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_PerfStatistics(Bs),
    dfp_read_field_def_ResourceStatistics(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25,
					  if F26 == undefined -> NewFValue;
					     true ->
						 merge_msg_PerfStatistics(F26,
									  NewFValue)
					  end,
					  F27, F28, F29, F30, F31, F32, F33,
					  F34, F35, F36, F37, F38, F39, F40,
					  F41, F42).


d_field_ResourceStatistics_net_rx_packets(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_rx_packets(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_net_rx_packets(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, _, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, NewFValue, F28, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_rx_bytes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_rx_bytes(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42);
d_field_ResourceStatistics_net_rx_bytes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, _, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, NewFValue, F29, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_rx_errors(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_rx_errors(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42);
d_field_ResourceStatistics_net_rx_errors(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, _, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, NewFValue, F30,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_rx_dropped(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_rx_dropped(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_net_rx_dropped(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29, _,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, NewFValue,
					  F31, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_tx_packets(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_tx_packets(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_net_tx_packets(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, _, F32, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30,
					  NewFValue, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_tx_bytes(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, F32,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_tx_bytes(Rest, N + 7,
					    X bsl N + Acc, F1, F2, F3, F4, F5,
					    F6, F7, F8, F9, F10, F11, F12, F13,
					    F14, F15, F16, F17, F18, F19, F20,
					    F21, F22, F23, F24, F25, F26, F27,
					    F28, F29, F30, F31, F32, F33, F34,
					    F35, F36, F37, F38, F39, F40, F41,
					    F42);
d_field_ResourceStatistics_net_tx_bytes(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					F9, F10, F11, F12, F13, F14, F15, F16,
					F17, F18, F19, F20, F21, F22, F23, F24,
					F25, F26, F27, F28, F29, F30, F31, _,
					F33, F34, F35, F36, F37, F38, F39, F40,
					F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  NewFValue, F33, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_tx_errors(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_tx_errors(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42);
d_field_ResourceStatistics_net_tx_errors(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 _, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, NewFValue, F34, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_tx_dropped(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, F34, F35, F36,
					  F37, F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_tx_dropped(Rest, N + 7,
					      X bsl N + Acc, F1, F2, F3, F4, F5,
					      F6, F7, F8, F9, F10, F11, F12,
					      F13, F14, F15, F16, F17, F18, F19,
					      F20, F21, F22, F23, F24, F25, F26,
					      F27, F28, F29, F30, F31, F32, F33,
					      F34, F35, F36, F37, F38, F39, F40,
					      F41, F42);
d_field_ResourceStatistics_net_tx_dropped(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1, F2, F3, F4, F5, F6, F7,
					  F8, F9, F10, F11, F12, F13, F14, F15,
					  F16, F17, F18, F19, F20, F21, F22,
					  F23, F24, F25, F26, F27, F28, F29,
					  F30, F31, F32, F33, _, F35, F36, F37,
					  F38, F39, F40, F41, F42) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ResourceStatistics(Rest, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, NewFValue, F35, F36, F37,
					  F38, F39, F40, F41, F42).


d_field_ResourceStatistics_net_tcp_rtt_microsecs_p50(<<Value:64/little-float,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, _, F36, F37,
						     F38, F39, F40, F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, Value, F36, F37, F38,
					  F39, F40, F41, F42).


d_field_ResourceStatistics_net_tcp_rtt_microsecs_p90(<<Value:64/little-float,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, _, F37,
						     F38, F39, F40, F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, Value, F37, F38,
					  F39, F40, F41, F42).


d_field_ResourceStatistics_net_tcp_rtt_microsecs_p95(<<Value:64/little-float,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36, _,
						     F38, F39, F40, F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, Value, F38,
					  F39, F40, F41, F42).


d_field_ResourceStatistics_net_tcp_rtt_microsecs_p99(<<Value:64/little-float,
						       Rest/binary>>,
						     Z1, Z2, F1, F2, F3, F4, F5,
						     F6, F7, F8, F9, F10, F11,
						     F12, F13, F14, F15, F16,
						     F17, F18, F19, F20, F21,
						     F22, F23, F24, F25, F26,
						     F27, F28, F29, F30, F31,
						     F32, F33, F34, F35, F36,
						     F37, _, F39, F40, F41,
						     F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, Value,
					  F39, F40, F41, F42).


d_field_ResourceStatistics_net_tcp_active_connections(<<Value:64/little-float,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6, F7, F8, F9, F10,
						      F11, F12, F13, F14, F15,
						      F16, F17, F18, F19, F20,
						      F21, F22, F23, F24, F25,
						      F26, F27, F28, F29, F30,
						      F31, F32, F33, F34, F35,
						      F36, F37, F38, _, F40,
						      F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  Value, F40, F41, F42).


d_field_ResourceStatistics_net_tcp_time_wait_connections(<<Value:64/little-float,
							   Rest/binary>>,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6, F7, F8, F9,
							 F10, F11, F12, F13,
							 F14, F15, F16, F17,
							 F18, F19, F20, F21,
							 F22, F23, F24, F25,
							 F26, F27, F28, F29,
							 F30, F31, F32, F33,
							 F34, F35, F36, F37,
							 F38, F39, _, F41,
							 F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, Value, F41, F42).


d_field_ResourceStatistics_net_traffic_control_statistics(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40,
							  F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_traffic_control_statistics(Rest,
							      N + 7,
							      X bsl N + Acc, F1,
							      F2, F3, F4, F5,
							      F6, F7, F8, F9,
							      F10, F11, F12,
							      F13, F14, F15,
							      F16, F17, F18,
							      F19, F20, F21,
							      F22, F23, F24,
							      F25, F26, F27,
							      F28, F29, F30,
							      F31, F32, F33,
							      F34, F35, F36,
							      F37, F38, F39,
							      F40, F41, F42);
d_field_ResourceStatistics_net_traffic_control_statistics(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, F1, F2, F3,
							  F4, F5, F6, F7, F8,
							  F9, F10, F11, F12,
							  F13, F14, F15, F16,
							  F17, F18, F19, F20,
							  F21, F22, F23, F24,
							  F25, F26, F27, F28,
							  F29, F30, F31, F32,
							  F33, F34, F35, F36,
							  F37, F38, F39, F40,
							  F41, F42) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TrafficControlStatistics(Bs),
    dfp_read_field_def_ResourceStatistics(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, cons(NewFValue, F41), F42).


d_field_ResourceStatistics_net_snmp_statistics(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42)
    when N < 57 ->
    d_field_ResourceStatistics_net_snmp_statistics(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5, F6, F7, F8, F9,
						   F10, F11, F12, F13, F14, F15,
						   F16, F17, F18, F19, F20, F21,
						   F22, F23, F24, F25, F26, F27,
						   F28, F29, F30, F31, F32, F33,
						   F34, F35, F36, F37, F38, F39,
						   F40, F41, F42);
d_field_ResourceStatistics_net_snmp_statistics(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5, F6,
					       F7, F8, F9, F10, F11, F12, F13,
					       F14, F15, F16, F17, F18, F19,
					       F20, F21, F22, F23, F24, F25,
					       F26, F27, F28, F29, F30, F31,
					       F32, F33, F34, F35, F36, F37,
					       F38, F39, F40, F41, F42) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_SNMPStatistics(Bs),
    dfp_read_field_def_ResourceStatistics(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41,
					  if F42 == undefined -> NewFValue;
					     true ->
						 merge_msg_SNMPStatistics(F42,
									  NewFValue)
					  end).


skip_varint_ResourceStatistics(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       F31, F32, F33, F34, F35, F36, F37, F38, F39, F40,
			       F41, F42) ->
    skip_varint_ResourceStatistics(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
				   F14, F15, F16, F17, F18, F19, F20, F21, F22,
				   F23, F24, F25, F26, F27, F28, F29, F30, F31,
				   F32, F33, F34, F35, F36, F37, F38, F39, F40,
				   F41, F42);
skip_varint_ResourceStatistics(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13, F14, F15, F16, F17, F18, F19, F20,
			       F21, F22, F23, F24, F25, F26, F27, F28, F29, F30,
			       F31, F32, F33, F34, F35, F36, F37, F38, F39, F40,
			       F41, F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42).


skip_length_delimited_ResourceStatistics(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42)
    when N < 57 ->
    skip_length_delimited_ResourceStatistics(Rest, N + 7,
					     X bsl N + Acc, F1, F2, F3, F4, F5,
					     F6, F7, F8, F9, F10, F11, F12, F13,
					     F14, F15, F16, F17, F18, F19, F20,
					     F21, F22, F23, F24, F25, F26, F27,
					     F28, F29, F30, F31, F32, F33, F34,
					     F35, F36, F37, F38, F39, F40, F41,
					     F42);
skip_length_delimited_ResourceStatistics(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8,
					 F9, F10, F11, F12, F13, F14, F15, F16,
					 F17, F18, F19, F20, F21, F22, F23, F24,
					 F25, F26, F27, F28, F29, F30, F31, F32,
					 F33, F34, F35, F36, F37, F38, F39, F40,
					 F41, F42) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResourceStatistics(Rest2, 0, 0, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42).


skip_32_ResourceStatistics(<<_:32, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30, F31,
			   F32, F33, F34, F35, F36, F37, F38, F39, F40, F41,
			   F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42).


skip_64_ResourceStatistics(<<_:64, Rest/binary>>, Z1,
			   Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14, F15, F16, F17, F18, F19, F20, F21,
			   F22, F23, F24, F25, F26, F27, F28, F29, F30, F31,
			   F32, F33, F34, F35, F36, F37, F38, F39, F40, F41,
			   F42) ->
    dfp_read_field_def_ResourceStatistics(Rest, Z1, Z2, F1,
					  F2, F3, F4, F5, F6, F7, F8, F9, F10,
					  F11, F12, F13, F14, F15, F16, F17,
					  F18, F19, F20, F21, F22, F23, F24,
					  F25, F26, F27, F28, F29, F30, F31,
					  F32, F33, F34, F35, F36, F37, F38,
					  F39, F40, F41, F42).


d_msg_FileInfo(Bin) ->
    dfp_read_field_def_FileInfo(Bin, 0, 0, id(undefined),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_FileInfo(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_path(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_FileInfo(<<16, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_nlink(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7);
dfp_read_field_def_FileInfo(<<24, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_size(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_FileInfo(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_mtime(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7);
dfp_read_field_def_FileInfo(<<40, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_mode(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7);
dfp_read_field_def_FileInfo(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_uid(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7);
dfp_read_field_def_FileInfo(<<58, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7) ->
    d_field_FileInfo_gid(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7);
dfp_read_field_def_FileInfo(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7) ->
    #'FileInfo'{path = F1, nlink = F2, size = F3,
		mtime = F4, mode = F5, uid = F6, gid = F7};
dfp_read_field_def_FileInfo(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7) ->
    dg_read_field_def_FileInfo(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7).

dg_read_field_def_FileInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 32 - 7 ->
    dg_read_field_def_FileInfo(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7);
dg_read_field_def_FileInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FileInfo_path(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      16 ->
	  d_field_FileInfo_nlink(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7);
      24 ->
	  d_field_FileInfo_size(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      34 ->
	  d_field_FileInfo_mtime(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7);
      40 ->
	  d_field_FileInfo_mode(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7);
      50 ->
	  d_field_FileInfo_uid(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7);
      58 ->
	  d_field_FileInfo_gid(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FileInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7);
	    1 ->
		skip_64_FileInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				 F7);
	    2 ->
		skip_length_delimited_FileInfo(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7);
	    5 ->
		skip_32_FileInfo(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7)
	  end
    end;
dg_read_field_def_FileInfo(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7) ->
    #'FileInfo'{path = F1, nlink = F2, size = F3,
		mtime = F4, mode = F5, uid = F6, gid = F7}.

d_field_FileInfo_path(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_path(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_FileInfo_path(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileInfo(Rest2, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7).


d_field_FileInfo_nlink(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_nlink(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7);
d_field_FileInfo_nlink(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6, F7) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_FileInfo(Rest, 0, 0, F1, NewFValue,
				F3, F4, F5, F6, F7).


d_field_FileInfo_size(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_size(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_FileInfo_size(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, _, F4, F5, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_FileInfo(Rest, 0, 0, F1, F2,
				NewFValue, F4, F5, F6, F7).


d_field_FileInfo_mtime(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_mtime(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7);
d_field_FileInfo_mtime(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TimeInfo(Bs),
    dfp_read_field_def_FileInfo(Rest2, 0, 0, F1, F2, F3,
				if F4 == undefined -> NewFValue;
				   true -> merge_msg_TimeInfo(F4, NewFValue)
				end,
				F5, F6, F7).


d_field_FileInfo_mode(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_mode(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7);
d_field_FileInfo_mode(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, _, F6, F7) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_FileInfo(Rest, 0, 0, F1, F2, F3, F4,
				NewFValue, F6, F7).


d_field_FileInfo_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_uid(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7);
d_field_FileInfo_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, _, F7) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, NewFValue, F7).


d_field_FileInfo_gid(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    d_field_FileInfo_gid(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7);
d_field_FileInfo_gid(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_FileInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, NewFValue).


skip_varint_FileInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7) ->
    skip_varint_FileInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7);
skip_varint_FileInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7) ->
    dfp_read_field_def_FileInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7).


skip_length_delimited_FileInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7)
    when N < 57 ->
    skip_length_delimited_FileInfo(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7);
skip_length_delimited_FileInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FileInfo(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7).


skip_32_FileInfo(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7) ->
    dfp_read_field_def_FileInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7).


skip_64_FileInfo(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7) ->
    dfp_read_field_def_FileInfo(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7).


'd_msg_Response.ListFiles'(Bin) ->
    'dfp_read_field_def_Response.ListFiles'(Bin, 0, 0,
					    id([])).

'dfp_read_field_def_Response.ListFiles'(<<10,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'd_field_Response.ListFiles_file_infos'(Rest, Z1, Z2,
					    F1);
'dfp_read_field_def_Response.ListFiles'(<<>>, 0, 0,
					F1) ->
    #'Response.ListFiles'{file_infos = lists_reverse(F1)};
'dfp_read_field_def_Response.ListFiles'(Other, Z1, Z2,
					F1) ->
    'dg_read_field_def_Response.ListFiles'(Other, Z1, Z2,
					   F1).

'dg_read_field_def_Response.ListFiles'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.ListFiles'(Rest, N + 7,
					   X bsl N + Acc, F1);
'dg_read_field_def_Response.ListFiles'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Response.ListFiles_file_infos'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Response.ListFiles'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.ListFiles'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.ListFiles'(Rest, 0, 0,
							   F1);
	    5 -> 'skip_32_Response.ListFiles'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.ListFiles'(<<>>, 0, 0,
				       F1) ->
    #'Response.ListFiles'{file_infos = lists_reverse(F1)}.

'd_field_Response.ListFiles_file_infos'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 57 ->
    'd_field_Response.ListFiles_file_infos'(Rest, N + 7,
					    X bsl N + Acc, F1);
'd_field_Response.ListFiles_file_infos'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FileInfo(Bs),
    'dfp_read_field_def_Response.ListFiles'(Rest2, 0, 0,
					    cons(NewFValue, F1)).


'skip_varint_Response.ListFiles'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    'skip_varint_Response.ListFiles'(Rest, Z1, Z2, F1);
'skip_varint_Response.ListFiles'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Response.ListFiles'(Rest, Z1, Z2,
					    F1).


'skip_length_delimited_Response.ListFiles'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.ListFiles'(Rest, N + 7,
					       X bsl N + Acc, F1);
'skip_length_delimited_Response.ListFiles'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.ListFiles'(Rest2, 0, 0,
					    F1).


'skip_32_Response.ListFiles'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1) ->
    'dfp_read_field_def_Response.ListFiles'(Rest, Z1, Z2,
					    F1).


'skip_64_Response.ListFiles'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1) ->
    'dfp_read_field_def_Response.ListFiles'(Rest, Z1, Z2,
					    F1).


d_msg_CgroupInfo(Bin) ->
    dfp_read_field_def_CgroupInfo(Bin, 0, 0, id(undefined)).

dfp_read_field_def_CgroupInfo(<<10, Rest/binary>>, Z1,
			      Z2, F1) ->
    d_field_CgroupInfo_net_cls(Rest, Z1, Z2, F1);
dfp_read_field_def_CgroupInfo(<<>>, 0, 0, F1) ->
    #'CgroupInfo'{net_cls = F1};
dfp_read_field_def_CgroupInfo(Other, Z1, Z2, F1) ->
    dg_read_field_def_CgroupInfo(Other, Z1, Z2, F1).

dg_read_field_def_CgroupInfo(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_CgroupInfo(Rest, N + 7, X bsl N + Acc,
				 F1);
dg_read_field_def_CgroupInfo(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_CgroupInfo_net_cls(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_CgroupInfo(Rest, 0, 0, F1);
	    1 -> skip_64_CgroupInfo(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_CgroupInfo(Rest, 0, 0, F1);
	    5 -> skip_32_CgroupInfo(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_CgroupInfo(<<>>, 0, 0, F1) ->
    #'CgroupInfo'{net_cls = F1}.

d_field_CgroupInfo_net_cls(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1)
    when N < 57 ->
    d_field_CgroupInfo_net_cls(Rest, N + 7, X bsl N + Acc,
			       F1);
d_field_CgroupInfo_net_cls(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_CgroupInfo.NetCls'(Bs),
    dfp_read_field_def_CgroupInfo(Rest2, 0, 0,
				  if F1 == undefined -> NewFValue;
				     true ->
					 'merge_msg_CgroupInfo.NetCls'(F1,
								       NewFValue)
				  end).


skip_varint_CgroupInfo(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    skip_varint_CgroupInfo(Rest, Z1, Z2, F1);
skip_varint_CgroupInfo(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1) ->
    dfp_read_field_def_CgroupInfo(Rest, Z1, Z2, F1).


skip_length_delimited_CgroupInfo(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_CgroupInfo(Rest, N + 7,
				     X bsl N + Acc, F1);
skip_length_delimited_CgroupInfo(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CgroupInfo(Rest2, 0, 0, F1).


skip_32_CgroupInfo(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_CgroupInfo(Rest, Z1, Z2, F1).


skip_64_CgroupInfo(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_CgroupInfo(Rest, Z1, Z2, F1).


d_msg_ContainerStatus(Bin) ->
    dfp_read_field_def_ContainerStatus(Bin, 0, 0, id([]),
				       id(undefined), id(undefined)).

dfp_read_field_def_ContainerStatus(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    d_field_ContainerStatus_network_infos(Rest, Z1, Z2, F1,
					  F2, F3);
dfp_read_field_def_ContainerStatus(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    d_field_ContainerStatus_cgroup_info(Rest, Z1, Z2, F1,
					F2, F3);
dfp_read_field_def_ContainerStatus(<<24, Rest/binary>>,
				   Z1, Z2, F1, F2, F3) ->
    d_field_ContainerStatus_executor_pid(Rest, Z1, Z2, F1,
					 F2, F3);
dfp_read_field_def_ContainerStatus(<<>>, 0, 0, F1, F2,
				   F3) ->
    #'ContainerStatus'{network_infos = lists_reverse(F1),
		       cgroup_info = F2, executor_pid = F3};
dfp_read_field_def_ContainerStatus(Other, Z1, Z2, F1,
				   F2, F3) ->
    dg_read_field_def_ContainerStatus(Other, Z1, Z2, F1, F2,
				      F3).

dg_read_field_def_ContainerStatus(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_ContainerStatus(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3);
dg_read_field_def_ContainerStatus(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ContainerStatus_network_infos(Rest, 0, 0, F1,
						F2, F3);
      18 ->
	  d_field_ContainerStatus_cgroup_info(Rest, 0, 0, F1, F2,
					      F3);
      24 ->
	  d_field_ContainerStatus_executor_pid(Rest, 0, 0, F1, F2,
					       F3);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ContainerStatus(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_ContainerStatus(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_ContainerStatus(Rest, 0, 0, F1,
						      F2, F3);
	    5 -> skip_32_ContainerStatus(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_ContainerStatus(<<>>, 0, 0, F1, F2,
				  F3) ->
    #'ContainerStatus'{network_infos = lists_reverse(F1),
		       cgroup_info = F2, executor_pid = F3}.

d_field_ContainerStatus_network_infos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ContainerStatus_network_infos(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
d_field_ContainerStatus_network_infos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_NetworkInfo(Bs),
    dfp_read_field_def_ContainerStatus(Rest2, 0, 0,
				       cons(NewFValue, F1), F2, F3).


d_field_ContainerStatus_cgroup_info(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ContainerStatus_cgroup_info(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3);
d_field_ContainerStatus_cgroup_info(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_CgroupInfo(Bs),
    dfp_read_field_def_ContainerStatus(Rest2, 0, 0, F1,
				       if F2 == undefined -> NewFValue;
					  true ->
					      merge_msg_CgroupInfo(F2,
								   NewFValue)
				       end,
				       F3).


d_field_ContainerStatus_executor_pid(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_ContainerStatus_executor_pid(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3);
d_field_ContainerStatus_executor_pid(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_ContainerStatus(Rest, 0, 0, F1, F2,
				       NewFValue).


skip_varint_ContainerStatus(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    skip_varint_ContainerStatus(Rest, Z1, Z2, F1, F2, F3);
skip_varint_ContainerStatus(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3) ->
    dfp_read_field_def_ContainerStatus(Rest, Z1, Z2, F1, F2,
				       F3).


skip_length_delimited_ContainerStatus(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_ContainerStatus(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3);
skip_length_delimited_ContainerStatus(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ContainerStatus(Rest2, 0, 0, F1, F2,
				       F3).


skip_32_ContainerStatus(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    dfp_read_field_def_ContainerStatus(Rest, Z1, Z2, F1, F2,
				       F3).


skip_64_ContainerStatus(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3) ->
    dfp_read_field_def_ContainerStatus(Rest, Z1, Z2, F1, F2,
				       F3).


d_msg_TaskStatus(Bin) ->
    dfp_read_field_def_TaskStatus(Bin, 0, 0, id(undefined),
				  id(undefined), id(undefined), id(undefined),
				  id(undefined), id(undefined), id(undefined),
				  id(undefined), id(undefined), id(undefined),
				  id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_TaskStatus(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_task_id(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<16, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_state(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_message(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<72, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_source(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<80, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_reason(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_data(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_agent_id(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<58, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_executor_id(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<49, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_timestamp(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<90, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_uuid(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<64, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_healthy(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<98, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_labels(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13);
dfp_read_field_def_TaskStatus(<<106, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      F12, F13) ->
    d_field_TaskStatus_container_status(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6, F7, F8, F9, F10,
					F11, F12, F13);
dfp_read_field_def_TaskStatus(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13) ->
    #'TaskStatus'{task_id = F1, state = F2, message = F3,
		  source = F4, reason = F5, data = F6, agent_id = F7,
		  executor_id = F8, timestamp = F9, uuid = F10,
		  healthy = F11, labels = F12, container_status = F13};
dfp_read_field_def_TaskStatus(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, F12, F13) ->
    dg_read_field_def_TaskStatus(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, F12, F13).

dg_read_field_def_TaskStatus(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13)
    when N < 32 - 7 ->
    dg_read_field_def_TaskStatus(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 F12, F13);
dg_read_field_def_TaskStatus(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, F12, F13) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_TaskStatus_task_id(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13);
      16 ->
	  d_field_TaskStatus_state(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13);
      34 ->
	  d_field_TaskStatus_message(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13);
      72 ->
	  d_field_TaskStatus_source(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13);
      80 ->
	  d_field_TaskStatus_reason(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13);
      26 ->
	  d_field_TaskStatus_data(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13);
      42 ->
	  d_field_TaskStatus_agent_id(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, F12, F13);
      58 ->
	  d_field_TaskStatus_executor_id(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11, F12,
					 F13);
      49 ->
	  d_field_TaskStatus_timestamp(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11, F12, F13);
      90 ->
	  d_field_TaskStatus_uuid(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, F12, F13);
      64 ->
	  d_field_TaskStatus_healthy(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10, F11, F12, F13);
      98 ->
	  d_field_TaskStatus_labels(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13);
      106 ->
	  d_field_TaskStatus_container_status(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6, F7, F8, F9, F10,
					      F11, F12, F13);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_TaskStatus(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, F12, F13);
	    1 ->
		skip_64_TaskStatus(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, F12, F13);
	    2 ->
		skip_length_delimited_TaskStatus(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10,
						 F11, F12, F13);
	    5 ->
		skip_32_TaskStatus(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, F12, F13)
	  end
    end;
dg_read_field_def_TaskStatus(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13) ->
    #'TaskStatus'{task_id = F1, state = F2, message = F3,
		  source = F4, reason = F5, data = F6, agent_id = F7,
		  executor_id = F8, timestamp = F9, uuid = F10,
		  healthy = F11, labels = F12, container_status = F13}.

d_field_TaskStatus_task_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13)
    when N < 57 ->
    d_field_TaskStatus_task_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13);
d_field_TaskStatus_task_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TaskID(Bs),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0,
				  if F1 == undefined -> NewFValue;
				     true -> merge_msg_TaskID(F1, NewFValue)
				  end,
				  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13).


d_field_TaskStatus_state(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13)
    when N < 57 ->
    d_field_TaskStatus_state(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			     F13);
d_field_TaskStatus_state(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_TaskState(Tmp),
    dfp_read_field_def_TaskStatus(Rest, 0, 0, F1, NewFValue,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13).


d_field_TaskStatus_message(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13)
    when N < 57 ->
    d_field_TaskStatus_message(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13);
d_field_TaskStatus_message(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2,
				  NewFValue, F4, F5, F6, F7, F8, F9, F10, F11,
				  F12, F13).


d_field_TaskStatus_source(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13)
    when N < 57 ->
    d_field_TaskStatus_source(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13);
d_field_TaskStatus_source(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, _, F5, F6, F7, F8, F9, F10, F11, F12,
			  F13) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_TaskStatus.Source'(Tmp),
    dfp_read_field_def_TaskStatus(Rest, 0, 0, F1, F2, F3,
				  NewFValue, F5, F6, F7, F8, F9, F10, F11, F12,
				  F13).


d_field_TaskStatus_reason(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13)
    when N < 57 ->
    d_field_TaskStatus_reason(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13);
d_field_TaskStatus_reason(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, _, F6, F7, F8, F9, F10, F11, F12,
			  F13) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_TaskStatus.Reason'(Tmp),
    dfp_read_field_def_TaskStatus(Rest, 0, 0, F1, F2, F3,
				  F4, NewFValue, F6, F7, F8, F9, F10, F11, F12,
				  F13).


d_field_TaskStatus_data(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13)
    when N < 57 ->
    d_field_TaskStatus_data(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13);
d_field_TaskStatus_data(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12,
			F13) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, NewFValue, F7, F8, F9, F10, F11, F12,
				  F13).


d_field_TaskStatus_agent_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13)
    when N < 57 ->
    d_field_TaskStatus_agent_id(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				F12, F13);
d_field_TaskStatus_agent_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, F12, F13) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6,
				  if F7 == undefined -> NewFValue;
				     true -> merge_msg_AgentID(F7, NewFValue)
				  end,
				  F8, F9, F10, F11, F12, F13).


d_field_TaskStatus_executor_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13)
    when N < 57 ->
    d_field_TaskStatus_executor_id(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, F12, F13);
d_field_TaskStatus_executor_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, F12, F13) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorID(Bs),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7,
				  if F8 == undefined -> NewFValue;
				     true -> merge_msg_ExecutorID(F8, NewFValue)
				  end,
				  F9, F10, F11, F12, F13).


d_field_TaskStatus_timestamp(<<Value:64/little-float,
			       Rest/binary>>,
			     Z1, Z2, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
			     F11, F12, F13) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, Value, F10, F11, F12,
				  F13).


d_field_TaskStatus_uuid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			F13)
    when N < 57 ->
    d_field_TaskStatus_uuid(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13);
d_field_TaskStatus_uuid(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _, F11, F12,
			F13) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, NewFValue, F11, F12,
				  F13).


d_field_TaskStatus_healthy(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13)
    when N < 57 ->
    d_field_TaskStatus_healthy(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13);
d_field_TaskStatus_healthy(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, _, F12,
			   F13) ->
    NewFValue = X bsl N + Acc =/= 0,
    dfp_read_field_def_TaskStatus(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, NewFValue, F12,
				  F13).


d_field_TaskStatus_labels(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13)
    when N < 57 ->
    d_field_TaskStatus_labels(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13);
d_field_TaskStatus_labels(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11,
				  if F12 == undefined -> NewFValue;
				     true -> merge_msg_Labels(F12, NewFValue)
				  end,
				  F13).


d_field_TaskStatus_container_status(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13)
    when N < 57 ->
    d_field_TaskStatus_container_status(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					F7, F8, F9, F10, F11, F12, F13);
d_field_TaskStatus_container_status(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				    F10, F11, F12, F13) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerStatus(Bs),
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12,
				  if F13 == undefined -> NewFValue;
				     true ->
					 merge_msg_ContainerStatus(F13,
								   NewFValue)
				  end).


skip_varint_TaskStatus(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13) ->
    skip_varint_TaskStatus(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13);
skip_varint_TaskStatus(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13).


skip_length_delimited_TaskStatus(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13)
    when N < 57 ->
    skip_length_delimited_TaskStatus(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13);
skip_length_delimited_TaskStatus(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_TaskStatus(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13).


skip_32_TaskStatus(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13).


skip_64_TaskStatus(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13) ->
    dfp_read_field_def_TaskStatus(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, F12, F13).


d_msg_Attribute(Bin) ->
    dfp_read_field_def_Attribute(Bin, 0, 0, id(undefined),
				 id(undefined), id(undefined), id(undefined),
				 id(undefined), id(undefined)).

dfp_read_field_def_Attribute(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_name(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6);
dfp_read_field_def_Attribute(<<16, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6);
dfp_read_field_def_Attribute(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_scalar(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_Attribute(<<34, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_ranges(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_Attribute(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_set(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
dfp_read_field_def_Attribute(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_Attribute_text(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6);
dfp_read_field_def_Attribute(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6) ->
    #'Attribute'{name = F1, type = F2, scalar = F3,
		 ranges = F4, set = F5, text = F6};
dfp_read_field_def_Attribute(Other, Z1, Z2, F1, F2, F3,
			     F4, F5, F6) ->
    dg_read_field_def_Attribute(Other, Z1, Z2, F1, F2, F3,
				F4, F5, F6).

dg_read_field_def_Attribute(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_Attribute(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6);
dg_read_field_def_Attribute(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Attribute_name(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6);
      16 ->
	  d_field_Attribute_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6);
      26 ->
	  d_field_Attribute_scalar(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      34 ->
	  d_field_Attribute_ranges(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      50 ->
	  d_field_Attribute_set(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6);
      42 ->
	  d_field_Attribute_text(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Attribute(Rest, 0, 0, F1, F2, F3, F4, F5,
				      F6);
	    1 ->
		skip_64_Attribute(Rest, 0, 0, F1, F2, F3, F4, F5, F6);
	    2 ->
		skip_length_delimited_Attribute(Rest, 0, 0, F1, F2, F3,
						F4, F5, F6);
	    5 ->
		skip_32_Attribute(Rest, 0, 0, F1, F2, F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_Attribute(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6) ->
    #'Attribute'{name = F1, type = F2, scalar = F3,
		 ranges = F4, set = F5, text = F6}.

d_field_Attribute_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_name(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6);
d_field_Attribute_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Attribute(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5, F6).


d_field_Attribute_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_type(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6);
d_field_Attribute_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5, F6) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Value.Type'(Tmp),
    dfp_read_field_def_Attribute(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5, F6).


d_field_Attribute_scalar(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_scalar(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_Attribute_scalar(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Scalar'(Bs),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2,
				 if F3 == undefined -> NewFValue;
				    true ->
					'merge_msg_Value.Scalar'(F3, NewFValue)
				 end,
				 F4, F5, F6).


d_field_Attribute_ranges(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_ranges(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_Attribute_ranges(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Ranges'(Bs),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 if F4 == undefined -> NewFValue;
				    true ->
					'merge_msg_Value.Ranges'(F4, NewFValue)
				 end,
				 F5, F6).


d_field_Attribute_set(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_set(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6);
d_field_Attribute_set(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Set'(Bs),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 F4,
				 if F5 == undefined -> NewFValue;
				    true -> 'merge_msg_Value.Set'(F5, NewFValue)
				 end,
				 F6).


d_field_Attribute_text(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_Attribute_text(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6);
d_field_Attribute_text(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Value.Text'(Bs),
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 F4, F5,
				 if F6 == undefined -> NewFValue;
				    true ->
					'merge_msg_Value.Text'(F6, NewFValue)
				 end).


skip_varint_Attribute(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6) ->
    skip_varint_Attribute(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6);
skip_varint_Attribute(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_Attribute(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6).


skip_length_delimited_Attribute(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_Attribute(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_Attribute(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Attribute(Rest2, 0, 0, F1, F2, F3,
				 F4, F5, F6).


skip_32_Attribute(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6) ->
    dfp_read_field_def_Attribute(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6).


skip_64_Attribute(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5, F6) ->
    dfp_read_field_def_Attribute(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6).


d_msg_AgentInfo(Bin) ->
    dfp_read_field_def_AgentInfo(Bin, 0, 0, id(undefined),
				 id(undefined), id([]), id([]), id(undefined)).

dfp_read_field_def_AgentInfo(<<10, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_AgentInfo_hostname(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5);
dfp_read_field_def_AgentInfo(<<64, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_AgentInfo_port(Rest, Z1, Z2, F1, F2, F3, F4,
			   F5);
dfp_read_field_def_AgentInfo(<<26, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_AgentInfo_resources(Rest, Z1, Z2, F1, F2, F3,
				F4, F5);
dfp_read_field_def_AgentInfo(<<42, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_AgentInfo_attributes(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5);
dfp_read_field_def_AgentInfo(<<50, Rest/binary>>, Z1,
			     Z2, F1, F2, F3, F4, F5) ->
    d_field_AgentInfo_id(Rest, Z1, Z2, F1, F2, F3, F4, F5);
dfp_read_field_def_AgentInfo(<<>>, 0, 0, F1, F2, F3, F4,
			     F5) ->
    #'AgentInfo'{hostname = F1, port = F2,
		 resources = lists_reverse(F3),
		 attributes = lists_reverse(F4), id = F5};
dfp_read_field_def_AgentInfo(Other, Z1, Z2, F1, F2, F3,
			     F4, F5) ->
    dg_read_field_def_AgentInfo(Other, Z1, Z2, F1, F2, F3,
				F4, F5).

dg_read_field_def_AgentInfo(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    dg_read_field_def_AgentInfo(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
dg_read_field_def_AgentInfo(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AgentInfo_hostname(Rest, 0, 0, F1, F2, F3, F4,
				     F5);
      64 ->
	  d_field_AgentInfo_port(Rest, 0, 0, F1, F2, F3, F4, F5);
      26 ->
	  d_field_AgentInfo_resources(Rest, 0, 0, F1, F2, F3, F4,
				      F5);
      42 ->
	  d_field_AgentInfo_attributes(Rest, 0, 0, F1, F2, F3, F4,
				       F5);
      50 ->
	  d_field_AgentInfo_id(Rest, 0, 0, F1, F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AgentInfo(Rest, 0, 0, F1, F2, F3, F4, F5);
	    1 -> skip_64_AgentInfo(Rest, 0, 0, F1, F2, F3, F4, F5);
	    2 ->
		skip_length_delimited_AgentInfo(Rest, 0, 0, F1, F2, F3,
						F4, F5);
	    5 -> skip_32_AgentInfo(Rest, 0, 0, F1, F2, F3, F4, F5)
	  end
    end;
dg_read_field_def_AgentInfo(<<>>, 0, 0, F1, F2, F3, F4,
			    F5) ->
    #'AgentInfo'{hostname = F1, port = F2,
		 resources = lists_reverse(F3),
		 attributes = lists_reverse(F4), id = F5}.

d_field_AgentInfo_hostname(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_AgentInfo_hostname(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5);
d_field_AgentInfo_hostname(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_AgentInfo(Rest2, 0, 0, NewFValue, F2,
				 F3, F4, F5).


d_field_AgentInfo_port(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_AgentInfo_port(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5);
d_field_AgentInfo_port(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, _, F3, F4, F5) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_AgentInfo(Rest, 0, 0, F1, NewFValue,
				 F3, F4, F5).


d_field_AgentInfo_resources(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_AgentInfo_resources(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5);
d_field_AgentInfo_resources(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_AgentInfo(Rest2, 0, 0, F1, F2,
				 cons(NewFValue, F3), F4, F5).


d_field_AgentInfo_attributes(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_AgentInfo_attributes(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5);
d_field_AgentInfo_attributes(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Attribute(Bs),
    dfp_read_field_def_AgentInfo(Rest2, 0, 0, F1, F2, F3,
				 cons(NewFValue, F4), F5).


d_field_AgentInfo_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5)
    when N < 57 ->
    d_field_AgentInfo_id(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5);
d_field_AgentInfo_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_AgentInfo(Rest2, 0, 0, F1, F2, F3,
				 F4,
				 if F5 == undefined -> NewFValue;
				    true -> merge_msg_AgentID(F5, NewFValue)
				 end).


skip_varint_AgentInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5) ->
    skip_varint_AgentInfo(Rest, Z1, Z2, F1, F2, F3, F4, F5);
skip_varint_AgentInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3, F4, F5) ->
    dfp_read_field_def_AgentInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5).


skip_length_delimited_AgentInfo(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    skip_length_delimited_AgentInfo(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5);
skip_length_delimited_AgentInfo(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AgentInfo(Rest2, 0, 0, F1, F2, F3,
				 F4, F5).


skip_32_AgentInfo(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5) ->
    dfp_read_field_def_AgentInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5).


skip_64_AgentInfo(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3, F4, F5) ->
    dfp_read_field_def_AgentInfo(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5).


'd_msg_Response.GetLoggingLevel'(Bin) ->
    'dfp_read_field_def_Response.GetLoggingLevel'(Bin, 0, 0,
						  id(undefined)).

'dfp_read_field_def_Response.GetLoggingLevel'(<<8,
						Rest/binary>>,
					      Z1, Z2, F1) ->
    'd_field_Response.GetLoggingLevel_level'(Rest, Z1, Z2,
					     F1);
'dfp_read_field_def_Response.GetLoggingLevel'(<<>>, 0,
					      0, F1) ->
    #'Response.GetLoggingLevel'{level = F1};
'dfp_read_field_def_Response.GetLoggingLevel'(Other, Z1,
					      Z2, F1) ->
    'dg_read_field_def_Response.GetLoggingLevel'(Other, Z1,
						 Z2, F1).

'dg_read_field_def_Response.GetLoggingLevel'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetLoggingLevel'(Rest,
						 N + 7, X bsl N + Acc, F1);
'dg_read_field_def_Response.GetLoggingLevel'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_Response.GetLoggingLevel_level'(Rest, 0, 0,
						   F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Response.GetLoggingLevel'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetLoggingLevel'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetLoggingLevel'(Rest,
								 0, 0, F1);
	    5 -> 'skip_32_Response.GetLoggingLevel'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetLoggingLevel'(<<>>, 0, 0,
					     F1) ->
    #'Response.GetLoggingLevel'{level = F1}.

'd_field_Response.GetLoggingLevel_level'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetLoggingLevel_level'(Rest, N + 7,
					     X bsl N + Acc, F1);
'd_field_Response.GetLoggingLevel_level'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _) ->
    NewFValue = X bsl N + Acc,
    'dfp_read_field_def_Response.GetLoggingLevel'(Rest, 0,
						  0, NewFValue).


'skip_varint_Response.GetLoggingLevel'(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'skip_varint_Response.GetLoggingLevel'(Rest, Z1, Z2,
					   F1);
'skip_varint_Response.GetLoggingLevel'(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetLoggingLevel'(Rest, Z1,
						  Z2, F1).


'skip_length_delimited_Response.GetLoggingLevel'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetLoggingLevel'(Rest,
						     N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Response.GetLoggingLevel'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetLoggingLevel'(Rest2, 0,
						  0, F1).


'skip_32_Response.GetLoggingLevel'(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetLoggingLevel'(Rest, Z1,
						  Z2, F1).


'skip_64_Response.GetLoggingLevel'(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetLoggingLevel'(Rest, Z1,
						  Z2, F1).


d_msg_Task(Bin) ->
    dfp_read_field_def_Task(Bin, 0, 0, id(undefined),
			    id(undefined), id(undefined), id(undefined),
			    id(undefined), id(undefined), id([]), id([]),
			    id(undefined), id(undefined), id(undefined),
			    id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_Task(<<10, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_name(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<18, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_task_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<26, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_framework_id(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<34, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_executor_id(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<42, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_agent_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<48, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_state(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		       F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<58, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_resources(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<66, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_statuses(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<72, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_status_update_state(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				     F13, F14);
dfp_read_field_def_Task(<<82, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_status_update_uuid(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
				    F13, F14);
dfp_read_field_def_Task(<<90, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_labels(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<98, Rest/binary>>, Z1, Z2, F1,
			F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_discovery(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<106, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_container(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<114, Rest/binary>>, Z1, Z2,
			F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			F14) ->
    d_field_Task_user(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9, F10, F11, F12, F13, F14);
dfp_read_field_def_Task(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, F7, F8, F9, F10, F11, F12, F13, F14) ->
    #'Task'{name = F1, task_id = F2, framework_id = F3,
	    executor_id = F4, agent_id = F5, state = F6,
	    resources = lists_reverse(F7),
	    statuses = lists_reverse(F8), status_update_state = F9,
	    status_update_uuid = F10, labels = F11, discovery = F12,
	    container = F13, user = F14};
dfp_read_field_def_Task(Other, Z1, Z2, F1, F2, F3, F4,
			F5, F6, F7, F8, F9, F10, F11, F12, F13, F14) ->
    dg_read_field_def_Task(Other, Z1, Z2, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).

dg_read_field_def_Task(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14)
    when N < 32 - 7 ->
    dg_read_field_def_Task(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14);
dg_read_field_def_Task(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Task_name(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, F13, F14);
      18 ->
	  d_field_Task_task_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			       F7, F8, F9, F10, F11, F12, F13, F14);
      26 ->
	  d_field_Task_framework_id(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, F12, F13,
				    F14);
      34 ->
	  d_field_Task_executor_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, F12, F13, F14);
      42 ->
	  d_field_Task_agent_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, F14);
      48 ->
	  d_field_Task_state(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			     F7, F8, F9, F10, F11, F12, F13, F14);
      58 ->
	  d_field_Task_resources(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14);
      66 ->
	  d_field_Task_statuses(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10, F11, F12, F13, F14);
      72 ->
	  d_field_Task_status_update_state(Rest, 0, 0, F1, F2, F3,
					   F4, F5, F6, F7, F8, F9, F10, F11,
					   F12, F13, F14);
      82 ->
	  d_field_Task_status_update_uuid(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10, F11, F12,
					  F13, F14);
      90 ->
	  d_field_Task_labels(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			      F7, F8, F9, F10, F11, F12, F13, F14);
      98 ->
	  d_field_Task_discovery(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14);
      106 ->
	  d_field_Task_container(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9, F10, F11, F12, F13, F14);
      114 ->
	  d_field_Task_user(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9, F10, F11, F12, F13, F14);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Task(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10, F11, F12, F13, F14);
	    1 ->
		skip_64_Task(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, F10, F11, F12, F13, F14);
	    2 ->
		skip_length_delimited_Task(Rest, 0, 0, F1, F2, F3, F4,
					   F5, F6, F7, F8, F9, F10, F11, F12,
					   F13, F14);
	    5 ->
		skip_32_Task(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7, F8,
			     F9, F10, F11, F12, F13, F14)
	  end
    end;
dg_read_field_def_Task(<<>>, 0, 0, F1, F2, F3, F4, F5,
		       F6, F7, F8, F9, F10, F11, F12, F13, F14) ->
    #'Task'{name = F1, task_id = F2, framework_id = F3,
	    executor_id = F4, agent_id = F5, state = F6,
	    resources = lists_reverse(F7),
	    statuses = lists_reverse(F8), status_update_state = F9,
	    status_update_uuid = F10, labels = F11, discovery = F12,
	    container = F13, user = F14}.

d_field_Task_name(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14)
    when N < 57 ->
    d_field_Task_name(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
d_field_Task_name(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		  F14) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Task(Rest2, 0, 0, NewFValue, F2, F3,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).


d_field_Task_task_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14)
    when N < 57 ->
    d_field_Task_task_id(Rest, N + 7, X bsl N + Acc, F1, F2,
			 F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
d_field_Task_task_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		     F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TaskID(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1,
			    if F2 == undefined -> NewFValue;
			       true -> merge_msg_TaskID(F2, NewFValue)
			    end,
			    F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			    F14).


d_field_Task_framework_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14)
    when N < 57 ->
    d_field_Task_framework_id(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			      F13, F14);
d_field_Task_framework_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  F12, F13, F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2,
			    if F3 == undefined -> NewFValue;
			       true -> merge_msg_FrameworkID(F3, NewFValue)
			    end,
			    F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).


d_field_Task_executor_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14)
    when N < 57 ->
    d_field_Task_executor_id(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			     F14);
d_field_Task_executor_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
			 F13, F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorID(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3,
			    if F4 == undefined -> NewFValue;
			       true -> merge_msg_ExecutorID(F4, NewFValue)
			    end,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).


d_field_Task_agent_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14)
    when N < 57 ->
    d_field_Task_agent_id(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  F14);
d_field_Task_agent_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4,
			    if F5 == undefined -> NewFValue;
			       true -> merge_msg_AgentID(F5, NewFValue)
			    end,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14).


d_field_Task_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		   F14)
    when N < 57 ->
    d_field_Task_state(Rest, N + 7, X bsl N + Acc, F1, F2,
		       F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
d_field_Task_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F1, F2, F3, F4, F5, _, F7, F8, F9, F10, F11, F12, F13,
		   F14) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_TaskState(Tmp),
    dfp_read_field_def_Task(Rest, 0, 0, F1, F2, F3, F4, F5,
			    NewFValue, F7, F8, F9, F10, F11, F12, F13, F14).


d_field_Task_resources(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14)
    when N < 57 ->
    d_field_Task_resources(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14);
d_field_Task_resources(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, cons(NewFValue, F7), F8, F9, F10, F11, F12, F13,
			    F14).


d_field_Task_statuses(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14)
    when N < 57 ->
    d_field_Task_statuses(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			  F14);
d_field_Task_statuses(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		      F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_TaskStatus(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, cons(NewFValue, F8), F9, F10, F11, F12, F13,
			    F14).


d_field_Task_status_update_state(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, F12, F13, F14)
    when N < 57 ->
    d_field_Task_status_update_state(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, F12, F13, F14);
d_field_Task_status_update_state(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, _, F10,
				 F11, F12, F13, F14) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = d_enum_TaskState(Tmp),
    dfp_read_field_def_Task(Rest, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, NewFValue, F10, F11, F12, F13, F14).


d_field_Task_status_update_uuid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
				F11, F12, F13, F14)
    when N < 57 ->
    d_field_Task_status_update_uuid(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10, F11, F12, F13, F14);
d_field_Task_status_update_uuid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, _,
				F11, F12, F13, F14) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, NewFValue, F11, F12, F13, F14).


d_field_Task_labels(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14)
    when N < 57 ->
    d_field_Task_labels(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
d_field_Task_labels(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		    F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Labels(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10,
			    if F11 == undefined -> NewFValue;
			       true -> merge_msg_Labels(F11, NewFValue)
			    end,
			    F12, F13, F14).


d_field_Task_discovery(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14)
    when N < 57 ->
    d_field_Task_discovery(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14);
d_field_Task_discovery(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_DiscoveryInfo(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11,
			    if F12 == undefined -> NewFValue;
			       true -> merge_msg_DiscoveryInfo(F12, NewFValue)
			    end,
			    F13, F14).


d_field_Task_container(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14)
    when N < 57 ->
    d_field_Task_container(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
			   F14);
d_field_Task_container(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12,
		       F13, F14) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerInfo(Bs),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12,
			    if F13 == undefined -> NewFValue;
			       true -> merge_msg_ContainerInfo(F13, NewFValue)
			    end,
			    F14).


d_field_Task_user(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14)
    when N < 57 ->
    d_field_Task_user(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14);
d_field_Task_user(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		  _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, NewFValue).


skip_varint_Task(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		 F14) ->
    skip_varint_Task(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, F9, F10, F11, F12, F13, F14);
skip_varint_Task(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13,
		 F14) ->
    dfp_read_field_def_Task(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).


skip_length_delimited_Task(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14)
    when N < 57 ->
    skip_length_delimited_Task(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			       F12, F13, F14);
skip_length_delimited_Task(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			   F12, F13, F14) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Task(Rest2, 0, 0, F1, F2, F3, F4, F5,
			    F6, F7, F8, F9, F10, F11, F12, F13, F14).


skip_32_Task(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14) ->
    dfp_read_field_def_Task(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).


skip_64_Task(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	     F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14) ->
    dfp_read_field_def_Task(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, F12, F13, F14).


'd_msg_Response.GetContainers.Container'(Bin) ->
    'dfp_read_field_def_Response.GetContainers.Container'(Bin,
							  0, 0, id(undefined),
							  id(undefined),
							  id(undefined),
							  id(undefined),
							  id(undefined),
							  id(undefined)).

'dfp_read_field_def_Response.GetContainers.Container'(<<10,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'd_field_Response.GetContainers.Container_framework_id'(Rest,
							    Z1, Z2, F1, F2, F3,
							    F4, F5, F6);
'dfp_read_field_def_Response.GetContainers.Container'(<<18,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'd_field_Response.GetContainers.Container_executor_id'(Rest,
							   Z1, Z2, F1, F2, F3,
							   F4, F5, F6);
'dfp_read_field_def_Response.GetContainers.Container'(<<26,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'd_field_Response.GetContainers.Container_executor_name'(Rest,
							     Z1, Z2, F1, F2, F3,
							     F4, F5, F6);
'dfp_read_field_def_Response.GetContainers.Container'(<<34,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'd_field_Response.GetContainers.Container_container_id'(Rest,
							    Z1, Z2, F1, F2, F3,
							    F4, F5, F6);
'dfp_read_field_def_Response.GetContainers.Container'(<<42,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'd_field_Response.GetContainers.Container_container_status'(Rest,
								Z1, Z2, F1, F2,
								F3, F4, F5, F6);
'dfp_read_field_def_Response.GetContainers.Container'(<<50,
							Rest/binary>>,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'd_field_Response.GetContainers.Container_resource_statistics'(Rest,
								   Z1, Z2, F1,
								   F2, F3, F4,
								   F5, F6);
'dfp_read_field_def_Response.GetContainers.Container'(<<>>,
						      0, 0, F1, F2, F3, F4, F5,
						      F6) ->
    #'Response.GetContainers.Container'{framework_id = F1,
					executor_id = F2, executor_name = F3,
					container_id = F4,
					container_status = F5,
					resource_statistics = F6};
'dfp_read_field_def_Response.GetContainers.Container'(Other,
						      Z1, Z2, F1, F2, F3, F4,
						      F5, F6) ->
    'dg_read_field_def_Response.GetContainers.Container'(Other,
							 Z1, Z2, F1, F2, F3, F4,
							 F5, F6).

'dg_read_field_def_Response.GetContainers.Container'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetContainers.Container'(Rest,
							 N + 7, X bsl N + Acc,
							 F1, F2, F3, F4, F5,
							 F6);
'dg_read_field_def_Response.GetContainers.Container'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F1, F2, F3, F4, F5,
						     F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Response.GetContainers.Container_framework_id'(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  F6);
      18 ->
	  'd_field_Response.GetContainers.Container_executor_id'(Rest,
								 0, 0, F1, F2,
								 F3, F4, F5,
								 F6);
      26 ->
	  'd_field_Response.GetContainers.Container_executor_name'(Rest,
								   0, 0, F1, F2,
								   F3, F4, F5,
								   F6);
      34 ->
	  'd_field_Response.GetContainers.Container_container_id'(Rest,
								  0, 0, F1, F2,
								  F3, F4, F5,
								  F6);
      42 ->
	  'd_field_Response.GetContainers.Container_container_status'(Rest,
								      0, 0, F1,
								      F2, F3,
								      F4, F5,
								      F6);
      50 ->
	  'd_field_Response.GetContainers.Container_resource_statistics'(Rest,
									 0, 0,
									 F1, F2,
									 F3, F4,
									 F5,
									 F6);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Response.GetContainers.Container'(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5, F6);
	    1 ->
		'skip_64_Response.GetContainers.Container'(Rest, 0, 0,
							   F1, F2, F3, F4, F5,
							   F6);
	    2 ->
		'skip_length_delimited_Response.GetContainers.Container'(Rest,
									 0, 0,
									 F1, F2,
									 F3, F4,
									 F5,
									 F6);
	    5 ->
		'skip_32_Response.GetContainers.Container'(Rest, 0, 0,
							   F1, F2, F3, F4, F5,
							   F6)
	  end
    end;
'dg_read_field_def_Response.GetContainers.Container'(<<>>,
						     0, 0, F1, F2, F3, F4, F5,
						     F6) ->
    #'Response.GetContainers.Container'{framework_id = F1,
					executor_id = F2, executor_name = F3,
					container_id = F4,
					container_status = F5,
					resource_statistics = F6}.

'd_field_Response.GetContainers.Container_framework_id'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6)
    when N < 57 ->
    'd_field_Response.GetContainers.Container_framework_id'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3, F4, F5, F6);
'd_field_Response.GetContainers.Container_framework_id'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0,
							  if F1 == undefined ->
								 NewFValue;
							     true ->
								 merge_msg_FrameworkID(F1,
										       NewFValue)
							  end,
							  F2, F3, F4, F5, F6).


'd_field_Response.GetContainers.Container_executor_id'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6)
    when N < 57 ->
    'd_field_Response.GetContainers.Container_executor_id'(Rest,
							   N + 7, X bsl N + Acc,
							   F1, F2, F3, F4, F5,
							   F6);
'd_field_Response.GetContainers.Container_executor_id'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F1, F2, F3, F4,
						       F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorID(Bs),
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0, F1,
							  if F2 == undefined ->
								 NewFValue;
							     true ->
								 merge_msg_ExecutorID(F2,
										      NewFValue)
							  end,
							  F3, F4, F5, F6).


'd_field_Response.GetContainers.Container_executor_name'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6)
    when N < 57 ->
    'd_field_Response.GetContainers.Container_executor_name'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5,
							     F6);
'd_field_Response.GetContainers.Container_executor_name'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, _, F4,
							 F5, F6) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0, F1, F2,
							  NewFValue, F4, F5,
							  F6).


'd_field_Response.GetContainers.Container_container_id'(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6)
    when N < 57 ->
    'd_field_Response.GetContainers.Container_container_id'(Rest,
							    N + 7,
							    X bsl N + Acc, F1,
							    F2, F3, F4, F5, F6);
'd_field_Response.GetContainers.Container_container_id'(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F1, F2, F3, F4,
							F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerID(Bs),
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0, F1, F2, F3,
							  if F4 == undefined ->
								 NewFValue;
							     true ->
								 merge_msg_ContainerID(F4,
										       NewFValue)
							  end,
							  F5, F6).


'd_field_Response.GetContainers.Container_container_status'(<<1:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6)
    when N < 57 ->
    'd_field_Response.GetContainers.Container_container_status'(Rest,
								N + 7,
								X bsl N + Acc,
								F1, F2, F3, F4,
								F5, F6);
'd_field_Response.GetContainers.Container_container_status'(<<0:1,
							      X:7,
							      Rest/binary>>,
							    N, Acc, F1, F2, F3,
							    F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerStatus(Bs),
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0, F1, F2, F3, F4,
							  if F5 == undefined ->
								 NewFValue;
							     true ->
								 merge_msg_ContainerStatus(F5,
											   NewFValue)
							  end,
							  F6).


'd_field_Response.GetContainers.Container_resource_statistics'(<<1:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5, F6)
    when N < 57 ->
    'd_field_Response.GetContainers.Container_resource_statistics'(Rest,
								   N + 7,
								   X bsl N +
								     Acc,
								   F1, F2, F3,
								   F4, F5, F6);
'd_field_Response.GetContainers.Container_resource_statistics'(<<0:1,
								 X:7,
								 Rest/binary>>,
							       N, Acc, F1, F2,
							       F3, F4, F5,
							       F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ResourceStatistics(Bs),
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0, F1, F2, F3, F4,
							  F5,
							  if F6 == undefined ->
								 NewFValue;
							     true ->
								 merge_msg_ResourceStatistics(F6,
											      NewFValue)
							  end).


'skip_varint_Response.GetContainers.Container'(<<1:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5,
					       F6) ->
    'skip_varint_Response.GetContainers.Container'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5, F6);
'skip_varint_Response.GetContainers.Container'(<<0:1,
						 _:7, Rest/binary>>,
					       Z1, Z2, F1, F2, F3, F4, F5,
					       F6) ->
    'dfp_read_field_def_Response.GetContainers.Container'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6).


'skip_length_delimited_Response.GetContainers.Container'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6)
    when N < 57 ->
    'skip_length_delimited_Response.GetContainers.Container'(Rest,
							     N + 7,
							     X bsl N + Acc, F1,
							     F2, F3, F4, F5,
							     F6);
'skip_length_delimited_Response.GetContainers.Container'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F1, F2, F3, F4,
							 F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetContainers.Container'(Rest2,
							  0, 0, F1, F2, F3, F4,
							  F5, F6).


'skip_32_Response.GetContainers.Container'(<<_:32,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_Response.GetContainers.Container'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6).


'skip_64_Response.GetContainers.Container'(<<_:64,
					     Rest/binary>>,
					   Z1, Z2, F1, F2, F3, F4, F5, F6) ->
    'dfp_read_field_def_Response.GetContainers.Container'(Rest,
							  Z1, Z2, F1, F2, F3,
							  F4, F5, F6).


'd_msg_Response.GetContainers'(Bin) ->
    'dfp_read_field_def_Response.GetContainers'(Bin, 0, 0,
						id([])).

'dfp_read_field_def_Response.GetContainers'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1) ->
    'd_field_Response.GetContainers_containers'(Rest, Z1,
						Z2, F1);
'dfp_read_field_def_Response.GetContainers'(<<>>, 0, 0,
					    F1) ->
    #'Response.GetContainers'{containers =
				  lists_reverse(F1)};
'dfp_read_field_def_Response.GetContainers'(Other, Z1,
					    Z2, F1) ->
    'dg_read_field_def_Response.GetContainers'(Other, Z1,
					       Z2, F1).

'dg_read_field_def_Response.GetContainers'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetContainers'(Rest, N + 7,
					       X bsl N + Acc, F1);
'dg_read_field_def_Response.GetContainers'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Response.GetContainers_containers'(Rest, 0, 0,
						      F1);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_Response.GetContainers'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetContainers'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetContainers'(Rest, 0,
							       0, F1);
	    5 -> 'skip_32_Response.GetContainers'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetContainers'(<<>>, 0, 0,
					   F1) ->
    #'Response.GetContainers'{containers =
				  lists_reverse(F1)}.

'd_field_Response.GetContainers_containers'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetContainers_containers'(Rest, N + 7,
						X bsl N + Acc, F1);
'd_field_Response.GetContainers_containers'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue =
	'd_msg_Response.GetContainers.Container'(Bs),
    'dfp_read_field_def_Response.GetContainers'(Rest2, 0, 0,
						cons(NewFValue, F1)).


'skip_varint_Response.GetContainers'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'skip_varint_Response.GetContainers'(Rest, Z1, Z2, F1);
'skip_varint_Response.GetContainers'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetContainers'(Rest, Z1,
						Z2, F1).


'skip_length_delimited_Response.GetContainers'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetContainers'(Rest,
						   N + 7, X bsl N + Acc, F1);
'skip_length_delimited_Response.GetContainers'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetContainers'(Rest2, 0, 0,
						F1).


'skip_32_Response.GetContainers'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetContainers'(Rest, Z1,
						Z2, F1).


'skip_64_Response.GetContainers'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetContainers'(Rest, Z1,
						Z2, F1).


'd_msg_Response.GetState'(Bin) ->
    'dfp_read_field_def_Response.GetState'(Bin, 0, 0).

'dfp_read_field_def_Response.GetState'(<<>>, 0, 0) ->
    #'Response.GetState'{};
'dfp_read_field_def_Response.GetState'(Other, Z1, Z2) ->
    'dg_read_field_def_Response.GetState'(Other, Z1, Z2).

'dg_read_field_def_Response.GetState'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetState'(Rest, N + 7,
					  X bsl N + Acc);
'dg_read_field_def_Response.GetState'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> 'skip_varint_Response.GetState'(Rest, 0, 0);
      1 -> 'skip_64_Response.GetState'(Rest, 0, 0);
      2 ->
	  'skip_length_delimited_Response.GetState'(Rest, 0, 0);
      5 -> 'skip_32_Response.GetState'(Rest, 0, 0)
    end;
'dg_read_field_def_Response.GetState'(<<>>, 0, 0) ->
    #'Response.GetState'{}.

'skip_varint_Response.GetState'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2) ->
    'skip_varint_Response.GetState'(Rest, Z1, Z2);
'skip_varint_Response.GetState'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2) ->
    'dfp_read_field_def_Response.GetState'(Rest, Z1, Z2).


'skip_length_delimited_Response.GetState'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc)
    when N < 57 ->
    'skip_length_delimited_Response.GetState'(Rest, N + 7,
					      X bsl N + Acc);
'skip_length_delimited_Response.GetState'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetState'(Rest2, 0, 0).


'skip_32_Response.GetState'(<<_:32, Rest/binary>>, Z1,
			    Z2) ->
    'dfp_read_field_def_Response.GetState'(Rest, Z1, Z2).


'skip_64_Response.GetState'(<<_:64, Rest/binary>>, Z1,
			    Z2) ->
    'dfp_read_field_def_Response.GetState'(Rest, Z1, Z2).


'd_msg_Response.GetVersion'(Bin) ->
    'dfp_read_field_def_Response.GetVersion'(Bin, 0, 0,
					     id(undefined)).

'dfp_read_field_def_Response.GetVersion'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1) ->
    'd_field_Response.GetVersion_version_info'(Rest, Z1, Z2,
					       F1);
'dfp_read_field_def_Response.GetVersion'(<<>>, 0, 0,
					 F1) ->
    #'Response.GetVersion'{version_info = F1};
'dfp_read_field_def_Response.GetVersion'(Other, Z1, Z2,
					 F1) ->
    'dg_read_field_def_Response.GetVersion'(Other, Z1, Z2,
					    F1).

'dg_read_field_def_Response.GetVersion'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetVersion'(Rest, N + 7,
					    X bsl N + Acc, F1);
'dg_read_field_def_Response.GetVersion'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_Response.GetVersion_version_info'(Rest, 0, 0,
						     F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Response.GetVersion'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetVersion'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetVersion'(Rest, 0, 0,
							    F1);
	    5 -> 'skip_32_Response.GetVersion'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetVersion'(<<>>, 0, 0,
					F1) ->
    #'Response.GetVersion'{version_info = F1}.

'd_field_Response.GetVersion_version_info'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetVersion_version_info'(Rest, N + 7,
					       X bsl N + Acc, F1);
'd_field_Response.GetVersion_version_info'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_VersionInfo(Bs),
    'dfp_read_field_def_Response.GetVersion'(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    merge_msg_VersionInfo(F1,
									  NewFValue)
					     end).


'skip_varint_Response.GetVersion'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'skip_varint_Response.GetVersion'(Rest, Z1, Z2, F1);
'skip_varint_Response.GetVersion'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetVersion'(Rest, Z1, Z2,
					     F1).


'skip_length_delimited_Response.GetVersion'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetVersion'(Rest, N + 7,
						X bsl N + Acc, F1);
'skip_length_delimited_Response.GetVersion'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetVersion'(Rest2, 0, 0,
					     F1).


'skip_32_Response.GetVersion'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_Response.GetVersion'(Rest, Z1, Z2,
					     F1).


'skip_64_Response.GetVersion'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1) ->
    'dfp_read_field_def_Response.GetVersion'(Rest, Z1, Z2,
					     F1).


'd_msg_Response.GetFlags'(Bin) ->
    'dfp_read_field_def_Response.GetFlags'(Bin, 0, 0,
					   id([])).

'dfp_read_field_def_Response.GetFlags'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F1) ->
    'd_field_Response.GetFlags_flags'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Response.GetFlags'(<<>>, 0, 0,
				       F1) ->
    #'Response.GetFlags'{flags = lists_reverse(F1)};
'dfp_read_field_def_Response.GetFlags'(Other, Z1, Z2,
				       F1) ->
    'dg_read_field_def_Response.GetFlags'(Other, Z1, Z2,
					  F1).

'dg_read_field_def_Response.GetFlags'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetFlags'(Rest, N + 7,
					  X bsl N + Acc, F1);
'dg_read_field_def_Response.GetFlags'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> 'd_field_Response.GetFlags_flags'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Response.GetFlags'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetFlags'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetFlags'(Rest, 0, 0,
							  F1);
	    5 -> 'skip_32_Response.GetFlags'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetFlags'(<<>>, 0, 0, F1) ->
    #'Response.GetFlags'{flags = lists_reverse(F1)}.

'd_field_Response.GetFlags_flags'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetFlags_flags'(Rest, N + 7,
				      X bsl N + Acc, F1);
'd_field_Response.GetFlags_flags'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Flag(Bs),
    'dfp_read_field_def_Response.GetFlags'(Rest2, 0, 0,
					   cons(NewFValue, F1)).


'skip_varint_Response.GetFlags'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    'skip_varint_Response.GetFlags'(Rest, Z1, Z2, F1);
'skip_varint_Response.GetFlags'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetFlags'(Rest, Z1, Z2,
					   F1).


'skip_length_delimited_Response.GetFlags'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetFlags'(Rest, N + 7,
					      X bsl N + Acc, F1);
'skip_length_delimited_Response.GetFlags'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetFlags'(Rest2, 0, 0, F1).


'skip_32_Response.GetFlags'(<<_:32, Rest/binary>>, Z1,
			    Z2, F1) ->
    'dfp_read_field_def_Response.GetFlags'(Rest, Z1, Z2,
					   F1).


'skip_64_Response.GetFlags'(<<_:64, Rest/binary>>, Z1,
			    Z2, F1) ->
    'dfp_read_field_def_Response.GetFlags'(Rest, Z1, Z2,
					   F1).


'd_msg_Response.GetHealth'(Bin) ->
    'dfp_read_field_def_Response.GetHealth'(Bin, 0, 0,
					    id(undefined)).

'dfp_read_field_def_Response.GetHealth'(<<8,
					  Rest/binary>>,
					Z1, Z2, F1) ->
    'd_field_Response.GetHealth_healthy'(Rest, Z1, Z2, F1);
'dfp_read_field_def_Response.GetHealth'(<<>>, 0, 0,
					F1) ->
    #'Response.GetHealth'{healthy = F1};
'dfp_read_field_def_Response.GetHealth'(Other, Z1, Z2,
					F1) ->
    'dg_read_field_def_Response.GetHealth'(Other, Z1, Z2,
					   F1).

'dg_read_field_def_Response.GetHealth'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1)
    when N < 32 - 7 ->
    'dg_read_field_def_Response.GetHealth'(Rest, N + 7,
					   X bsl N + Acc, F1);
'dg_read_field_def_Response.GetHealth'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_Response.GetHealth_healthy'(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> 'skip_varint_Response.GetHealth'(Rest, 0, 0, F1);
	    1 -> 'skip_64_Response.GetHealth'(Rest, 0, 0, F1);
	    2 ->
		'skip_length_delimited_Response.GetHealth'(Rest, 0, 0,
							   F1);
	    5 -> 'skip_32_Response.GetHealth'(Rest, 0, 0, F1)
	  end
    end;
'dg_read_field_def_Response.GetHealth'(<<>>, 0, 0,
				       F1) ->
    #'Response.GetHealth'{healthy = F1}.

'd_field_Response.GetHealth_healthy'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1)
    when N < 57 ->
    'd_field_Response.GetHealth_healthy'(Rest, N + 7,
					 X bsl N + Acc, F1);
'd_field_Response.GetHealth_healthy'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _) ->
    NewFValue = X bsl N + Acc =/= 0,
    'dfp_read_field_def_Response.GetHealth'(Rest, 0, 0,
					    NewFValue).


'skip_varint_Response.GetHealth'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    'skip_varint_Response.GetHealth'(Rest, Z1, Z2, F1);
'skip_varint_Response.GetHealth'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F1) ->
    'dfp_read_field_def_Response.GetHealth'(Rest, Z1, Z2,
					    F1).


'skip_length_delimited_Response.GetHealth'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1)
    when N < 57 ->
    'skip_length_delimited_Response.GetHealth'(Rest, N + 7,
					       X bsl N + Acc, F1);
'skip_length_delimited_Response.GetHealth'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_Response.GetHealth'(Rest2, 0, 0,
					    F1).


'skip_32_Response.GetHealth'(<<_:32, Rest/binary>>, Z1,
			     Z2, F1) ->
    'dfp_read_field_def_Response.GetHealth'(Rest, Z1, Z2,
					    F1).


'skip_64_Response.GetHealth'(<<_:64, Rest/binary>>, Z1,
			     Z2, F1) ->
    'dfp_read_field_def_Response.GetHealth'(Rest, Z1, Z2,
					    F1).


d_msg_Response(Bin) ->
    dfp_read_field_def_Response(Bin, 0, 0, id(undefined),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined), id(undefined),
				id(undefined), id(undefined), id(undefined)).

dfp_read_field_def_Response(<<8, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_type(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			  F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_health(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_flags(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_version(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<42, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_metrics(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<50, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_logging_level(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<58, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_list_files(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<66, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_file_contents(Rest, Z1, Z2, F1, F2,
				       F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<74, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_state(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<82, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    d_field_Response_get_containers(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6, F7, F8, F9, F10);
dfp_read_field_def_Response(<<>>, 0, 0, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10) ->
    #'Response'{type = F1, get_health = F2, get_flags = F3,
		get_version = F4, get_metrics = F5,
		get_logging_level = F6, list_files = F7,
		get_file_contents = F8, get_state = F9,
		get_containers = F10};
dfp_read_field_def_Response(Other, Z1, Z2, F1, F2, F3,
			    F4, F5, F6, F7, F8, F9, F10) ->
    dg_read_field_def_Response(Other, Z1, Z2, F1, F2, F3,
			       F4, F5, F6, F7, F8, F9, F10).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Response_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				F6, F7, F8, F9, F10);
      18 ->
	  d_field_Response_get_health(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10);
      26 ->
	  d_field_Response_get_flags(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10);
      34 ->
	  d_field_Response_get_version(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10);
      42 ->
	  d_field_Response_get_metrics(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10);
      50 ->
	  d_field_Response_get_logging_level(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10);
      58 ->
	  d_field_Response_list_files(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10);
      66 ->
	  d_field_Response_get_file_contents(Rest, 0, 0, F1, F2,
					     F3, F4, F5, F6, F7, F8, F9, F10);
      74 ->
	  d_field_Response_get_state(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9, F10);
      82 ->
	  d_field_Response_get_containers(Rest, 0, 0, F1, F2, F3,
					  F4, F5, F6, F7, F8, F9, F10);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Response(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				     F7, F8, F9, F10);
	    1 ->
		skip_64_Response(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F1, F2, F3,
					       F4, F5, F6, F7, F8, F9, F10);
	    5 ->
		skip_32_Response(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
				 F8, F9, F10)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F1, F2, F3, F4,
			   F5, F6, F7, F8, F9, F10) ->
    #'Response'{type = F1, get_health = F2, get_flags = F3,
		get_version = F4, get_metrics = F5,
		get_logging_level = F6, list_files = F7,
		get_file_contents = F8, get_state = F9,
		get_containers = F10}.

d_field_Response_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_type(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_Response.Type'(Tmp),
    dfp_read_field_def_Response(Rest, 0, 0, NewFValue, F2,
				F3, F4, F5, F6, F7, F8, F9, F10).


d_field_Response_get_health(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_get_health(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_get_health(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetHealth'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1,
				if F2 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetHealth'(F2,
								      NewFValue)
				end,
				F3, F4, F5, F6, F7, F8, F9, F10).


d_field_Response_get_flags(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_get_flags(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_get_flags(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetFlags'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2,
				if F3 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetFlags'(F3,
								     NewFValue)
				end,
				F4, F5, F6, F7, F8, F9, F10).


d_field_Response_get_version(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_get_version(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_get_version(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetVersion'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3,
				if F4 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetVersion'(F4,
								       NewFValue)
				end,
				F5, F6, F7, F8, F9, F10).


d_field_Response_get_metrics(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_get_metrics(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_get_metrics(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetMetrics'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				if F5 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetMetrics'(F5,
								       NewFValue)
				end,
				F6, F7, F8, F9, F10).


d_field_Response_get_logging_level(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10)
    when N < 57 ->
    d_field_Response_get_logging_level(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10);
d_field_Response_get_logging_level(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetLoggingLevel'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5,
				if F6 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetLoggingLevel'(F6,
									    NewFValue)
				end,
				F7, F8, F9, F10).


d_field_Response_list_files(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_list_files(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_list_files(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.ListFiles'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6,
				if F7 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.ListFiles'(F7,
								      NewFValue)
				end,
				F8, F9, F10).


d_field_Response_get_file_contents(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10)
    when N < 57 ->
    d_field_Response_get_file_contents(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6,
				       F7, F8, F9, F10);
d_field_Response_get_file_contents(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				   F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetFileContents'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7,
				if F8 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetFileContents'(F8,
									    NewFValue)
				end,
				F9, F10).


d_field_Response_get_state(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_get_state(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9, F10);
d_field_Response_get_state(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetState'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8,
				if F9 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetState'(F9,
								     NewFValue)
				end,
				F10).


d_field_Response_get_containers(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    d_field_Response_get_containers(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				    F8, F9, F10);
d_field_Response_get_containers(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				F10) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_Response.GetContainers'(Bs),
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9,
				if F10 == undefined -> NewFValue;
				   true ->
				       'merge_msg_Response.GetContainers'(F10,
									  NewFValue)
				end).


skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    skip_varint_Response(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9, F10);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, F4, F5, F6, F7, F8, F9, F10) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10).


skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
			       F10) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F1, F2, F3, F4,
				F5, F6, F7, F8, F9, F10).


skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9, F10) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10).


skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, F4, F5, F6, F7, F8, F9, F10) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10).


d_msg_Filters(Bin) ->
    dfp_read_field_def_Filters(Bin, 0, 0, id(undefined)).

dfp_read_field_def_Filters(<<9, Rest/binary>>, Z1, Z2,
			   F1) ->
    d_field_Filters_refuse_seconds(Rest, Z1, Z2, F1);
dfp_read_field_def_Filters(<<>>, 0, 0, F1) ->
    #'Filters'{refuse_seconds = F1};
dfp_read_field_def_Filters(Other, Z1, Z2, F1) ->
    dg_read_field_def_Filters(Other, Z1, Z2, F1).

dg_read_field_def_Filters(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Filters(Rest, N + 7, X bsl N + Acc,
			      F1);
dg_read_field_def_Filters(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      9 -> d_field_Filters_refuse_seconds(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Filters(Rest, 0, 0, F1);
	    1 -> skip_64_Filters(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Filters(Rest, 0, 0, F1);
	    5 -> skip_32_Filters(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Filters(<<>>, 0, 0, F1) ->
    #'Filters'{refuse_seconds = F1}.

d_field_Filters_refuse_seconds(<<Value:64/little-float,
				 Rest/binary>>,
			       Z1, Z2, _) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, Value).


skip_varint_Filters(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    skip_varint_Filters(Rest, Z1, Z2, F1);
skip_varint_Filters(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, F1).


skip_length_delimited_Filters(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Filters(Rest, N + 7,
				  X bsl N + Acc, F1);
skip_length_delimited_Filters(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Filters(Rest2, 0, 0, F1).


skip_32_Filters(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, F1).


skip_64_Filters(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_Filters(Rest, Z1, Z2, F1).


d_msg_Credentials(Bin) ->
    dfp_read_field_def_Credentials(Bin, 0, 0, id([])).

dfp_read_field_def_Credentials(<<10, Rest/binary>>, Z1,
			       Z2, F1) ->
    d_field_Credentials_credentials(Rest, Z1, Z2, F1);
dfp_read_field_def_Credentials(<<>>, 0, 0, F1) ->
    #'Credentials'{credentials = lists_reverse(F1)};
dfp_read_field_def_Credentials(Other, Z1, Z2, F1) ->
    dg_read_field_def_Credentials(Other, Z1, Z2, F1).

dg_read_field_def_Credentials(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_Credentials(Rest, N + 7,
				  X bsl N + Acc, F1);
dg_read_field_def_Credentials(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_Credentials_credentials(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Credentials(Rest, 0, 0, F1);
	    1 -> skip_64_Credentials(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_Credentials(Rest, 0, 0, F1);
	    5 -> skip_32_Credentials(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_Credentials(<<>>, 0, 0, F1) ->
    #'Credentials'{credentials = lists_reverse(F1)}.

d_field_Credentials_credentials(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1)
    when N < 57 ->
    d_field_Credentials_credentials(Rest, N + 7,
				    X bsl N + Acc, F1);
d_field_Credentials_credentials(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Credential(Bs),
    dfp_read_field_def_Credentials(Rest2, 0, 0,
				   cons(NewFValue, F1)).


skip_varint_Credentials(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    skip_varint_Credentials(Rest, Z1, Z2, F1);
skip_varint_Credentials(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F1) ->
    dfp_read_field_def_Credentials(Rest, Z1, Z2, F1).


skip_length_delimited_Credentials(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_Credentials(Rest, N + 7,
				      X bsl N + Acc, F1);
skip_length_delimited_Credentials(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Credentials(Rest2, 0, 0, F1).


skip_32_Credentials(<<_:32, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Credentials(Rest, Z1, Z2, F1).


skip_64_Credentials(<<_:64, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_Credentials(Rest, Z1, Z2, F1).


d_msg_RateLimit(Bin) ->
    dfp_read_field_def_RateLimit(Bin, 0, 0, id(undefined),
				 id(undefined), id(undefined)).

dfp_read_field_def_RateLimit(<<9, Rest/binary>>, Z1, Z2,
			     F1, F2, F3) ->
    d_field_RateLimit_qps(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_RateLimit(<<18, Rest/binary>>, Z1,
			     Z2, F1, F2, F3) ->
    d_field_RateLimit_principal(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_RateLimit(<<24, Rest/binary>>, Z1,
			     Z2, F1, F2, F3) ->
    d_field_RateLimit_capacity(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_RateLimit(<<>>, 0, 0, F1, F2, F3) ->
    #'RateLimit'{qps = F1, principal = F2, capacity = F3};
dfp_read_field_def_RateLimit(Other, Z1, Z2, F1, F2,
			     F3) ->
    dg_read_field_def_RateLimit(Other, Z1, Z2, F1, F2, F3).

dg_read_field_def_RateLimit(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_RateLimit(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
dg_read_field_def_RateLimit(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      9 -> d_field_RateLimit_qps(Rest, 0, 0, F1, F2, F3);
      18 ->
	  d_field_RateLimit_principal(Rest, 0, 0, F1, F2, F3);
      24 ->
	  d_field_RateLimit_capacity(Rest, 0, 0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_RateLimit(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_RateLimit(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_RateLimit(Rest, 0, 0, F1, F2, F3);
	    5 -> skip_32_RateLimit(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_RateLimit(<<>>, 0, 0, F1, F2, F3) ->
    #'RateLimit'{qps = F1, principal = F2, capacity = F3}.

d_field_RateLimit_qps(<<Value:64/little-float,
			Rest/binary>>,
		      Z1, Z2, _, F2, F3) ->
    dfp_read_field_def_RateLimit(Rest, Z1, Z2, Value, F2,
				 F3).


d_field_RateLimit_principal(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_RateLimit_principal(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3);
d_field_RateLimit_principal(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, _, F3) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_RateLimit(Rest2, 0, 0, F1, NewFValue,
				 F3).


d_field_RateLimit_capacity(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3)
    when N < 57 ->
    d_field_RateLimit_capacity(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3);
d_field_RateLimit_capacity(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RateLimit(Rest, 0, 0, F1, F2,
				 NewFValue).


skip_varint_RateLimit(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3) ->
    skip_varint_RateLimit(Rest, Z1, Z2, F1, F2, F3);
skip_varint_RateLimit(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F1, F2, F3) ->
    dfp_read_field_def_RateLimit(Rest, Z1, Z2, F1, F2, F3).


skip_length_delimited_RateLimit(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_RateLimit(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3);
skip_length_delimited_RateLimit(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RateLimit(Rest2, 0, 0, F1, F2, F3).


skip_32_RateLimit(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		  F3) ->
    dfp_read_field_def_RateLimit(Rest, Z1, Z2, F1, F2, F3).


skip_64_RateLimit(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		  F3) ->
    dfp_read_field_def_RateLimit(Rest, Z1, Z2, F1, F2, F3).


d_msg_RateLimits(Bin) ->
    dfp_read_field_def_RateLimits(Bin, 0, 0, id([]),
				  id(undefined), id(undefined)).

dfp_read_field_def_RateLimits(<<10, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    d_field_RateLimits_limits(Rest, Z1, Z2, F1, F2, F3);
dfp_read_field_def_RateLimits(<<17, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    d_field_RateLimits_aggregate_default_qps(Rest, Z1, Z2,
					     F1, F2, F3);
dfp_read_field_def_RateLimits(<<24, Rest/binary>>, Z1,
			      Z2, F1, F2, F3) ->
    d_field_RateLimits_aggregate_default_capacity(Rest, Z1,
						  Z2, F1, F2, F3);
dfp_read_field_def_RateLimits(<<>>, 0, 0, F1, F2, F3) ->
    #'RateLimits'{limits = lists_reverse(F1),
		  aggregate_default_qps = F2,
		  aggregate_default_capacity = F3};
dfp_read_field_def_RateLimits(Other, Z1, Z2, F1, F2,
			      F3) ->
    dg_read_field_def_RateLimits(Other, Z1, Z2, F1, F2, F3).

dg_read_field_def_RateLimits(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3)
    when N < 32 - 7 ->
    dg_read_field_def_RateLimits(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3);
dg_read_field_def_RateLimits(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_RateLimits_limits(Rest, 0, 0, F1, F2, F3);
      17 ->
	  d_field_RateLimits_aggregate_default_qps(Rest, 0, 0, F1,
						   F2, F3);
      24 ->
	  d_field_RateLimits_aggregate_default_capacity(Rest, 0,
							0, F1, F2, F3);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_RateLimits(Rest, 0, 0, F1, F2, F3);
	    1 -> skip_64_RateLimits(Rest, 0, 0, F1, F2, F3);
	    2 ->
		skip_length_delimited_RateLimits(Rest, 0, 0, F1, F2,
						 F3);
	    5 -> skip_32_RateLimits(Rest, 0, 0, F1, F2, F3)
	  end
    end;
dg_read_field_def_RateLimits(<<>>, 0, 0, F1, F2, F3) ->
    #'RateLimits'{limits = lists_reverse(F1),
		  aggregate_default_qps = F2,
		  aggregate_default_capacity = F3}.

d_field_RateLimits_limits(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3)
    when N < 57 ->
    d_field_RateLimits_limits(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3);
d_field_RateLimits_limits(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_RateLimit(Bs),
    dfp_read_field_def_RateLimits(Rest2, 0, 0,
				  cons(NewFValue, F1), F2, F3).


d_field_RateLimits_aggregate_default_qps(<<Value:64/little-float,
					   Rest/binary>>,
					 Z1, Z2, F1, _, F3) ->
    dfp_read_field_def_RateLimits(Rest, Z1, Z2, F1, Value,
				  F3).


d_field_RateLimits_aggregate_default_capacity(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3)
    when N < 57 ->
    d_field_RateLimits_aggregate_default_capacity(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3);
d_field_RateLimits_aggregate_default_capacity(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, _) ->
    NewFValue = X bsl N + Acc,
    dfp_read_field_def_RateLimits(Rest, 0, 0, F1, F2,
				  NewFValue).


skip_varint_RateLimits(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3) ->
    skip_varint_RateLimits(Rest, Z1, Z2, F1, F2, F3);
skip_varint_RateLimits(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3) ->
    dfp_read_field_def_RateLimits(Rest, Z1, Z2, F1, F2, F3).


skip_length_delimited_RateLimits(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3)
    when N < 57 ->
    skip_length_delimited_RateLimits(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3);
skip_length_delimited_RateLimits(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RateLimits(Rest2, 0, 0, F1, F2, F3).


skip_32_RateLimits(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3) ->
    dfp_read_field_def_RateLimits(Rest, Z1, Z2, F1, F2, F3).


skip_64_RateLimits(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3) ->
    dfp_read_field_def_RateLimits(Rest, Z1, Z2, F1, F2, F3).


d_msg_OfferID(Bin) ->
    dfp_read_field_def_OfferID(Bin, 0, 0, id(undefined)).

dfp_read_field_def_OfferID(<<10, Rest/binary>>, Z1, Z2,
			   F1) ->
    d_field_OfferID_value(Rest, Z1, Z2, F1);
dfp_read_field_def_OfferID(<<>>, 0, 0, F1) ->
    #'OfferID'{value = F1};
dfp_read_field_def_OfferID(Other, Z1, Z2, F1) ->
    dg_read_field_def_OfferID(Other, Z1, Z2, F1).

dg_read_field_def_OfferID(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1)
    when N < 32 - 7 ->
    dg_read_field_def_OfferID(Rest, N + 7, X bsl N + Acc,
			      F1);
dg_read_field_def_OfferID(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1) ->
    Key = X bsl N + Acc,
    case Key of
      10 -> d_field_OfferID_value(Rest, 0, 0, F1);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_OfferID(Rest, 0, 0, F1);
	    1 -> skip_64_OfferID(Rest, 0, 0, F1);
	    2 -> skip_length_delimited_OfferID(Rest, 0, 0, F1);
	    5 -> skip_32_OfferID(Rest, 0, 0, F1)
	  end
    end;
dg_read_field_def_OfferID(<<>>, 0, 0, F1) ->
    #'OfferID'{value = F1}.

d_field_OfferID_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1)
    when N < 57 ->
    d_field_OfferID_value(Rest, N + 7, X bsl N + Acc, F1);
d_field_OfferID_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_OfferID(Rest2, 0, 0, NewFValue).


skip_varint_OfferID(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    skip_varint_OfferID(Rest, Z1, Z2, F1);
skip_varint_OfferID(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F1) ->
    dfp_read_field_def_OfferID(Rest, Z1, Z2, F1).


skip_length_delimited_OfferID(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1)
    when N < 57 ->
    skip_length_delimited_OfferID(Rest, N + 7,
				  X bsl N + Acc, F1);
skip_length_delimited_OfferID(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_OfferID(Rest2, 0, 0, F1).


skip_32_OfferID(<<_:32, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_OfferID(Rest, Z1, Z2, F1).


skip_64_OfferID(<<_:64, Rest/binary>>, Z1, Z2, F1) ->
    dfp_read_field_def_OfferID(Rest, Z1, Z2, F1).


d_msg_InverseOffer(Bin) ->
    dfp_read_field_def_InverseOffer(Bin, 0, 0,
				    id(undefined), id(undefined), id(undefined),
				    id(undefined), id(undefined), id([])).

dfp_read_field_def_InverseOffer(<<10, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_InverseOffer_id(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6);
dfp_read_field_def_InverseOffer(<<18, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_InverseOffer_url(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
dfp_read_field_def_InverseOffer(<<26, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_InverseOffer_framework_id(Rest, Z1, Z2, F1, F2,
				      F3, F4, F5, F6);
dfp_read_field_def_InverseOffer(<<34, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_InverseOffer_agent_id(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6);
dfp_read_field_def_InverseOffer(<<42, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_InverseOffer_unavailability(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, F6);
dfp_read_field_def_InverseOffer(<<50, Rest/binary>>, Z1,
				Z2, F1, F2, F3, F4, F5, F6) ->
    d_field_InverseOffer_resources(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6);
dfp_read_field_def_InverseOffer(<<>>, 0, 0, F1, F2, F3,
				F4, F5, F6) ->
    #'InverseOffer'{id = F1, url = F2, framework_id = F3,
		    agent_id = F4, unavailability = F5,
		    resources = lists_reverse(F6)};
dfp_read_field_def_InverseOffer(Other, Z1, Z2, F1, F2,
				F3, F4, F5, F6) ->
    dg_read_field_def_InverseOffer(Other, Z1, Z2, F1, F2,
				   F3, F4, F5, F6).

dg_read_field_def_InverseOffer(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 32 - 7 ->
    dg_read_field_def_InverseOffer(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
dg_read_field_def_InverseOffer(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_InverseOffer_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6);
      18 ->
	  d_field_InverseOffer_url(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6);
      26 ->
	  d_field_InverseOffer_framework_id(Rest, 0, 0, F1, F2,
					    F3, F4, F5, F6);
      34 ->
	  d_field_InverseOffer_agent_id(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6);
      42 ->
	  d_field_InverseOffer_unavailability(Rest, 0, 0, F1, F2,
					      F3, F4, F5, F6);
      50 ->
	  d_field_InverseOffer_resources(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_InverseOffer(Rest, 0, 0, F1, F2, F3, F4, F5,
					 F6);
	    1 ->
		skip_64_InverseOffer(Rest, 0, 0, F1, F2, F3, F4, F5,
				     F6);
	    2 ->
		skip_length_delimited_InverseOffer(Rest, 0, 0, F1, F2,
						   F3, F4, F5, F6);
	    5 ->
		skip_32_InverseOffer(Rest, 0, 0, F1, F2, F3, F4, F5, F6)
	  end
    end;
dg_read_field_def_InverseOffer(<<>>, 0, 0, F1, F2, F3,
			       F4, F5, F6) ->
    #'InverseOffer'{id = F1, url = F2, framework_id = F3,
		    agent_id = F4, unavailability = F5,
		    resources = lists_reverse(F6)}.

d_field_InverseOffer_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_InverseOffer_id(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6);
d_field_InverseOffer_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_OfferID(Bs),
    dfp_read_field_def_InverseOffer(Rest2, 0, 0,
				    if F1 == undefined -> NewFValue;
				       true -> merge_msg_OfferID(F1, NewFValue)
				    end,
				    F2, F3, F4, F5, F6).


d_field_InverseOffer_url(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_InverseOffer_url(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6);
d_field_InverseOffer_url(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_URL(Bs),
    dfp_read_field_def_InverseOffer(Rest2, 0, 0, F1,
				    if F2 == undefined -> NewFValue;
				       true -> merge_msg_URL(F2, NewFValue)
				    end,
				    F3, F4, F5, F6).


d_field_InverseOffer_framework_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_InverseOffer_framework_id(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_InverseOffer_framework_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    dfp_read_field_def_InverseOffer(Rest2, 0, 0, F1, F2,
				    if F3 == undefined -> NewFValue;
				       true ->
					   merge_msg_FrameworkID(F3, NewFValue)
				    end,
				    F4, F5, F6).


d_field_InverseOffer_agent_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_InverseOffer_agent_id(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_InverseOffer_agent_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_InverseOffer(Rest2, 0, 0, F1, F2, F3,
				    if F4 == undefined -> NewFValue;
				       true -> merge_msg_AgentID(F4, NewFValue)
				    end,
				    F5, F6).


d_field_InverseOffer_unavailability(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_InverseOffer_unavailability(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_InverseOffer_unavailability(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Unavailability(Bs),
    dfp_read_field_def_InverseOffer(Rest2, 0, 0, F1, F2, F3,
				    F4,
				    if F5 == undefined -> NewFValue;
				       true ->
					   merge_msg_Unavailability(F5,
								    NewFValue)
				    end,
				    F6).


d_field_InverseOffer_resources(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    d_field_InverseOffer_resources(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6);
d_field_InverseOffer_resources(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_InverseOffer(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, cons(NewFValue, F6)).


skip_varint_InverseOffer(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6) ->
    skip_varint_InverseOffer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6);
skip_varint_InverseOffer(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F1, F2, F3, F4, F5, F6) ->
    dfp_read_field_def_InverseOffer(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).


skip_length_delimited_InverseOffer(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6)
    when N < 57 ->
    skip_length_delimited_InverseOffer(Rest, N + 7,
				       X bsl N + Acc, F1, F2, F3, F4, F5, F6);
skip_length_delimited_InverseOffer(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F1, F2, F3, F4, F5, F6) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_InverseOffer(Rest2, 0, 0, F1, F2, F3,
				    F4, F5, F6).


skip_32_InverseOffer(<<_:32, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6) ->
    dfp_read_field_def_InverseOffer(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).


skip_64_InverseOffer(<<_:64, Rest/binary>>, Z1, Z2, F1,
		     F2, F3, F4, F5, F6) ->
    dfp_read_field_def_InverseOffer(Rest, Z1, Z2, F1, F2,
				    F3, F4, F5, F6).


'd_msg_ResourceUsage.Executor'(Bin) ->
    'dfp_read_field_def_ResourceUsage.Executor'(Bin, 0, 0,
						id(undefined), id([]),
						id(undefined), id(undefined),
						id([])).

'dfp_read_field_def_ResourceUsage.Executor'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_ResourceUsage.Executor_executor_info'(Rest, Z1,
						   Z2, F1, F2, F3, F4, F5);
'dfp_read_field_def_ResourceUsage.Executor'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_ResourceUsage.Executor_allocated'(Rest, Z1, Z2,
					       F1, F2, F3, F4, F5);
'dfp_read_field_def_ResourceUsage.Executor'(<<26,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_ResourceUsage.Executor_statistics'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5);
'dfp_read_field_def_ResourceUsage.Executor'(<<34,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_ResourceUsage.Executor_container_id'(Rest, Z1,
						  Z2, F1, F2, F3, F4, F5);
'dfp_read_field_def_ResourceUsage.Executor'(<<42,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, F3, F4, F5) ->
    'd_field_ResourceUsage.Executor_tasks'(Rest, Z1, Z2, F1,
					   F2, F3, F4, F5);
'dfp_read_field_def_ResourceUsage.Executor'(<<>>, 0, 0,
					    F1, F2, F3, F4, F5) ->
    #'ResourceUsage.Executor'{executor_info = F1,
			      allocated = lists_reverse(F2), statistics = F3,
			      container_id = F4, tasks = lists_reverse(F5)};
'dfp_read_field_def_ResourceUsage.Executor'(Other, Z1,
					    Z2, F1, F2, F3, F4, F5) ->
    'dg_read_field_def_ResourceUsage.Executor'(Other, Z1,
					       Z2, F1, F2, F3, F4, F5).

'dg_read_field_def_ResourceUsage.Executor'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5)
    when N < 32 - 7 ->
    'dg_read_field_def_ResourceUsage.Executor'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5);
'dg_read_field_def_ResourceUsage.Executor'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ResourceUsage.Executor_executor_info'(Rest, 0,
							 0, F1, F2, F3, F4, F5);
      18 ->
	  'd_field_ResourceUsage.Executor_allocated'(Rest, 0, 0,
						     F1, F2, F3, F4, F5);
      26 ->
	  'd_field_ResourceUsage.Executor_statistics'(Rest, 0, 0,
						      F1, F2, F3, F4, F5);
      34 ->
	  'd_field_ResourceUsage.Executor_container_id'(Rest, 0,
							0, F1, F2, F3, F4, F5);
      42 ->
	  'd_field_ResourceUsage.Executor_tasks'(Rest, 0, 0, F1,
						 F2, F3, F4, F5);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ResourceUsage.Executor'(Rest, 0, 0, F1, F2,
						     F3, F4, F5);
	    1 ->
		'skip_64_ResourceUsage.Executor'(Rest, 0, 0, F1, F2, F3,
						 F4, F5);
	    2 ->
		'skip_length_delimited_ResourceUsage.Executor'(Rest, 0,
							       0, F1, F2, F3,
							       F4, F5);
	    5 ->
		'skip_32_ResourceUsage.Executor'(Rest, 0, 0, F1, F2, F3,
						 F4, F5)
	  end
    end;
'dg_read_field_def_ResourceUsage.Executor'(<<>>, 0, 0,
					   F1, F2, F3, F4, F5) ->
    #'ResourceUsage.Executor'{executor_info = F1,
			      allocated = lists_reverse(F2), statistics = F3,
			      container_id = F4, tasks = lists_reverse(F5)}.

'd_field_ResourceUsage.Executor_executor_info'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_ResourceUsage.Executor_executor_info'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5);
'd_field_ResourceUsage.Executor_executor_info'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorInfo(Bs),
    'dfp_read_field_def_ResourceUsage.Executor'(Rest2, 0, 0,
						if F1 == undefined -> NewFValue;
						   true ->
						       merge_msg_ExecutorInfo(F1,
									      NewFValue)
						end,
						F2, F3, F4, F5).


'd_field_ResourceUsage.Executor_allocated'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_ResourceUsage.Executor_allocated'(Rest, N + 7,
					       X bsl N + Acc, F1, F2, F3, F4,
					       F5);
'd_field_ResourceUsage.Executor_allocated'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    'dfp_read_field_def_ResourceUsage.Executor'(Rest2, 0, 0,
						F1, cons(NewFValue, F2), F3, F4,
						F5).


'd_field_ResourceUsage.Executor_statistics'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_ResourceUsage.Executor_statistics'(Rest, N + 7,
						X bsl N + Acc, F1, F2, F3, F4,
						F5);
'd_field_ResourceUsage.Executor_statistics'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ResourceStatistics(Bs),
    'dfp_read_field_def_ResourceUsage.Executor'(Rest2, 0, 0,
						F1, F2,
						if F3 == undefined -> NewFValue;
						   true ->
						       merge_msg_ResourceStatistics(F3,
										    NewFValue)
						end,
						F4, F5).


'd_field_ResourceUsage.Executor_container_id'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_ResourceUsage.Executor_container_id'(Rest,
						  N + 7, X bsl N + Acc, F1, F2,
						  F3, F4, F5);
'd_field_ResourceUsage.Executor_container_id'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ContainerID(Bs),
    'dfp_read_field_def_ResourceUsage.Executor'(Rest2, 0, 0,
						F1, F2, F3,
						if F4 == undefined -> NewFValue;
						   true ->
						       merge_msg_ContainerID(F4,
									     NewFValue)
						end,
						F5).


'd_field_ResourceUsage.Executor_tasks'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'd_field_ResourceUsage.Executor_tasks'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, F3, F4, F5);
'd_field_ResourceUsage.Executor_tasks'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, F3, F4, F5) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_ResourceUsage.Executor.Task'(Bs),
    'dfp_read_field_def_ResourceUsage.Executor'(Rest2, 0, 0,
						F1, F2, F3, F4,
						cons(NewFValue, F5)).


'skip_varint_ResourceUsage.Executor'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'skip_varint_ResourceUsage.Executor'(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5);
'skip_varint_ResourceUsage.Executor'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_ResourceUsage.Executor'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5).


'skip_length_delimited_ResourceUsage.Executor'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5)
    when N < 57 ->
    'skip_length_delimited_ResourceUsage.Executor'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   F3, F4, F5);
'skip_length_delimited_ResourceUsage.Executor'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, F3, F4, F5) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ResourceUsage.Executor'(Rest2, 0, 0,
						F1, F2, F3, F4, F5).


'skip_32_ResourceUsage.Executor'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_ResourceUsage.Executor'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5).


'skip_64_ResourceUsage.Executor'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5) ->
    'dfp_read_field_def_ResourceUsage.Executor'(Rest, Z1,
						Z2, F1, F2, F3, F4, F5).


d_msg_ResourceUsage(Bin) ->
    dfp_read_field_def_ResourceUsage(Bin, 0, 0, id([]),
				     id([])).

dfp_read_field_def_ResourceUsage(<<10, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    d_field_ResourceUsage_executors(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ResourceUsage(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2) ->
    d_field_ResourceUsage_total(Rest, Z1, Z2, F1, F2);
dfp_read_field_def_ResourceUsage(<<>>, 0, 0, F1, F2) ->
    #'ResourceUsage'{executors = lists_reverse(F1),
		     total = lists_reverse(F2)};
dfp_read_field_def_ResourceUsage(Other, Z1, Z2, F1,
				 F2) ->
    dg_read_field_def_ResourceUsage(Other, Z1, Z2, F1, F2).

dg_read_field_def_ResourceUsage(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 32 - 7 ->
    dg_read_field_def_ResourceUsage(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
dg_read_field_def_ResourceUsage(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_ResourceUsage_executors(Rest, 0, 0, F1, F2);
      18 -> d_field_ResourceUsage_total(Rest, 0, 0, F1, F2);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_ResourceUsage(Rest, 0, 0, F1, F2);
	    1 -> skip_64_ResourceUsage(Rest, 0, 0, F1, F2);
	    2 ->
		skip_length_delimited_ResourceUsage(Rest, 0, 0, F1, F2);
	    5 -> skip_32_ResourceUsage(Rest, 0, 0, F1, F2)
	  end
    end;
dg_read_field_def_ResourceUsage(<<>>, 0, 0, F1, F2) ->
    #'ResourceUsage'{executors = lists_reverse(F1),
		     total = lists_reverse(F2)}.

d_field_ResourceUsage_executors(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2)
    when N < 57 ->
    d_field_ResourceUsage_executors(Rest, N + 7,
				    X bsl N + Acc, F1, F2);
d_field_ResourceUsage_executors(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = 'd_msg_ResourceUsage.Executor'(Bs),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0,
				     cons(NewFValue, F1), F2).


d_field_ResourceUsage_total(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2)
    when N < 57 ->
    d_field_ResourceUsage_total(Rest, N + 7, X bsl N + Acc,
				F1, F2);
d_field_ResourceUsage_total(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1,
				     cons(NewFValue, F2)).


skip_varint_ResourceUsage(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    skip_varint_ResourceUsage(Rest, Z1, Z2, F1, F2);
skip_varint_ResourceUsage(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2) ->
    dfp_read_field_def_ResourceUsage(Rest, Z1, Z2, F1, F2).


skip_length_delimited_ResourceUsage(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2)
    when N < 57 ->
    skip_length_delimited_ResourceUsage(Rest, N + 7,
					X bsl N + Acc, F1, F2);
skip_length_delimited_ResourceUsage(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResourceUsage(Rest2, 0, 0, F1, F2).


skip_32_ResourceUsage(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    dfp_read_field_def_ResourceUsage(Rest, Z1, Z2, F1, F2).


skip_64_ResourceUsage(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2) ->
    dfp_read_field_def_ResourceUsage(Rest, Z1, Z2, F1, F2).


d_msg_Offer(Bin) ->
    dfp_read_field_def_Offer(Bin, 0, 0, id(undefined),
			     id(undefined), id(undefined), id(undefined),
			     id(undefined), id([]), id([]), id([]),
			     id(undefined)).

dfp_read_field_def_Offer(<<10, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_id(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		     F7, F8, F9);
dfp_read_field_def_Offer(<<18, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_framework_id(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9);
dfp_read_field_def_Offer(<<26, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_agent_id(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9);
dfp_read_field_def_Offer(<<34, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_hostname(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9);
dfp_read_field_def_Offer(<<66, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_url(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9);
dfp_read_field_def_Offer(<<42, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_resources(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9);
dfp_read_field_def_Offer(<<58, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_attributes(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9);
dfp_read_field_def_Offer(<<50, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_executor_ids(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, F6, F7, F8, F9);
dfp_read_field_def_Offer(<<74, Rest/binary>>, Z1, Z2,
			 F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    d_field_Offer_unavailability(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9);
dfp_read_field_def_Offer(<<>>, 0, 0, F1, F2, F3, F4, F5,
			 F6, F7, F8, F9) ->
    #'Offer'{id = F1, framework_id = F2, agent_id = F3,
	     hostname = F4, url = F5, resources = lists_reverse(F6),
	     attributes = lists_reverse(F7),
	     executor_ids = lists_reverse(F8), unavailability = F9};
dfp_read_field_def_Offer(Other, Z1, Z2, F1, F2, F3, F4,
			 F5, F6, F7, F8, F9) ->
    dg_read_field_def_Offer(Other, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9).

dg_read_field_def_Offer(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 32 - 7 ->
    dg_read_field_def_Offer(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9);
dg_read_field_def_Offer(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Offer_id(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			   F8, F9);
      18 ->
	  d_field_Offer_framework_id(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9);
      26 ->
	  d_field_Offer_agent_id(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9);
      34 ->
	  d_field_Offer_hostname(Rest, 0, 0, F1, F2, F3, F4, F5,
				 F6, F7, F8, F9);
      66 ->
	  d_field_Offer_url(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
			    F7, F8, F9);
      42 ->
	  d_field_Offer_resources(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9);
      58 ->
	  d_field_Offer_attributes(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9);
      50 ->
	  d_field_Offer_executor_ids(Rest, 0, 0, F1, F2, F3, F4,
				     F5, F6, F7, F8, F9);
      74 ->
	  d_field_Offer_unavailability(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Offer(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				  F7, F8, F9);
	    1 ->
		skip_64_Offer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			      F8, F9);
	    2 ->
		skip_length_delimited_Offer(Rest, 0, 0, F1, F2, F3, F4,
					    F5, F6, F7, F8, F9);
	    5 ->
		skip_32_Offer(Rest, 0, 0, F1, F2, F3, F4, F5, F6, F7,
			      F8, F9)
	  end
    end;
dg_read_field_def_Offer(<<>>, 0, 0, F1, F2, F3, F4, F5,
			F6, F7, F8, F9) ->
    #'Offer'{id = F1, framework_id = F2, agent_id = F3,
	     hostname = F4, url = F5, resources = lists_reverse(F6),
	     attributes = lists_reverse(F7),
	     executor_ids = lists_reverse(F8), unavailability = F9}.

d_field_Offer_id(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_id(Rest, N + 7, X bsl N + Acc, F1, F2, F3,
		     F4, F5, F6, F7, F8, F9);
d_field_Offer_id(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		 F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_OfferID(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0,
			     if F1 == undefined -> NewFValue;
				true -> merge_msg_OfferID(F1, NewFValue)
			     end,
			     F2, F3, F4, F5, F6, F7, F8, F9).


d_field_Offer_framework_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_framework_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_framework_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_FrameworkID(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1,
			     if F2 == undefined -> NewFValue;
				true -> merge_msg_FrameworkID(F2, NewFValue)
			     end,
			     F3, F4, F5, F6, F7, F8, F9).


d_field_Offer_agent_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_agent_id(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_agent_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_AgentID(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2,
			     if F3 == undefined -> NewFValue;
				true -> merge_msg_AgentID(F3, NewFValue)
			     end,
			     F4, F5, F6, F7, F8, F9).


d_field_Offer_hostname(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_hostname(Rest, N + 7, X bsl N + Acc, F1,
			   F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_hostname(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F1, F2, F3, _, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3,
			     NewFValue, F5, F6, F7, F8, F9).


d_field_Offer_url(<<1:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_url(Rest, N + 7, X bsl N + Acc, F1, F2,
		      F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_url(<<0:1, X:7, Rest/binary>>, N, Acc, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_URL(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     if F5 == undefined -> NewFValue;
				true -> merge_msg_URL(F5, NewFValue)
			     end,
			     F6, F7, F8, F9).


d_field_Offer_resources(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_resources(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_resources(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Resource(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, cons(NewFValue, F6), F7, F8, F9).


d_field_Offer_attributes(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_attributes(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_attributes(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Attribute(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, cons(NewFValue, F7), F8, F9).


d_field_Offer_executor_ids(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_executor_ids(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_executor_ids(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_ExecutorID(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, cons(NewFValue, F8), F9).


d_field_Offer_unavailability(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    d_field_Offer_unavailability(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9);
d_field_Offer_unavailability(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = d_msg_Unavailability(Bs),
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8,
			     if F9 == undefined -> NewFValue;
				true -> merge_msg_Unavailability(F9, NewFValue)
			     end).


skip_varint_Offer(<<1:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9) ->
    skip_varint_Offer(Rest, Z1, Z2, F1, F2, F3, F4, F5, F6,
		      F7, F8, F9);
skip_varint_Offer(<<0:1, _:7, Rest/binary>>, Z1, Z2, F1,
		  F2, F3, F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_Offer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9).


skip_length_delimited_Offer(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9)
    when N < 57 ->
    skip_length_delimited_Offer(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9);
skip_length_delimited_Offer(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Offer(Rest2, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9).


skip_32_Offer(<<_:32, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_Offer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9).


skip_64_Offer(<<_:64, Rest/binary>>, Z1, Z2, F1, F2, F3,
	      F4, F5, F6, F7, F8, F9) ->
    dfp_read_field_def_Offer(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9).




'd_enum_Call.Type'(0) -> 'UNKNOWN';
'd_enum_Call.Type'(1) -> 'GET_HEALTH';
'd_enum_Call.Type'(2) -> 'GET_FLAGS';
'd_enum_Call.Type'(3) -> 'GET_VERSION';
'd_enum_Call.Type'(4) -> 'GET_METRICS';
'd_enum_Call.Type'(5) -> 'GET_LOGGING_LEVEL';
'd_enum_Call.Type'(6) -> 'SET_LOGGING_LEVEL';
'd_enum_Call.Type'(7) -> 'LIST_FILES';
'd_enum_Call.Type'(8) -> 'READ_FILE';
'd_enum_Call.Type'(9) -> 'GET_STATE';
'd_enum_Call.Type'(10) -> 'GET_CONTAINERS'.

'd_enum_Response.Type'(0) -> 'UNKNOWN';
'd_enum_Response.Type'(1) -> 'GET_HEALTH';
'd_enum_Response.Type'(2) -> 'GET_FLAGS';
'd_enum_Response.Type'(3) -> 'GET_VERSION';
'd_enum_Response.Type'(4) -> 'GET_METRICS';
'd_enum_Response.Type'(5) -> 'GET_LOGGING_LEVEL';
'd_enum_Response.Type'(6) -> 'LIST_FILES';
'd_enum_Response.Type'(7) -> 'READ_FILE';
'd_enum_Response.Type'(8) -> 'GET_STATE';
'd_enum_Response.Type'(9) -> 'GET_CONTAINERS'.

'd_enum_MachineInfo.Mode'(1) -> 'UP';
'd_enum_MachineInfo.Mode'(2) -> 'DRAINING';
'd_enum_MachineInfo.Mode'(3) -> 'DOWN'.

'd_enum_FrameworkInfo.Capability.Type'(0) -> 'UNKNOWN';
'd_enum_FrameworkInfo.Capability.Type'(1) ->
    'REVOCABLE_RESOURCES';
'd_enum_FrameworkInfo.Capability.Type'(2) ->
    'TASK_KILLING_STATE';
'd_enum_FrameworkInfo.Capability.Type'(3) ->
    'GPU_RESOURCES'.

'd_enum_Value.Type'(0) -> 'SCALAR';
'd_enum_Value.Type'(1) -> 'RANGES';
'd_enum_Value.Type'(2) -> 'SET';
'd_enum_Value.Type'(3) -> 'TEXT'.

'd_enum_Resource.DiskInfo.Source.Type'(1) -> 'PATH';
'd_enum_Resource.DiskInfo.Source.Type'(2) -> 'MOUNT'.

'd_enum_Offer.Operation.Type'(1) -> 'LAUNCH';
'd_enum_Offer.Operation.Type'(2) -> 'RESERVE';
'd_enum_Offer.Operation.Type'(3) -> 'UNRESERVE';
'd_enum_Offer.Operation.Type'(4) -> 'CREATE';
'd_enum_Offer.Operation.Type'(5) -> 'DESTROY'.

d_enum_TaskState(6) -> 'TASK_STAGING';
d_enum_TaskState(0) -> 'TASK_STARTING';
d_enum_TaskState(1) -> 'TASK_RUNNING';
d_enum_TaskState(8) -> 'TASK_KILLING';
d_enum_TaskState(2) -> 'TASK_FINISHED';
d_enum_TaskState(3) -> 'TASK_FAILED';
d_enum_TaskState(4) -> 'TASK_KILLED';
d_enum_TaskState(5) -> 'TASK_LOST';
d_enum_TaskState(7) -> 'TASK_ERROR'.

'd_enum_TaskStatus.Source'(0) -> 'SOURCE_MASTER';
'd_enum_TaskStatus.Source'(1) -> 'SOURCE_AGENT';
'd_enum_TaskStatus.Source'(2) -> 'SOURCE_EXECUTOR'.

'd_enum_TaskStatus.Reason'(0) ->
    'REASON_COMMAND_EXECUTOR_FAILED';
'd_enum_TaskStatus.Reason'(21) ->
    'REASON_CONTAINER_LAUNCH_FAILED';
'd_enum_TaskStatus.Reason'(19) ->
    'REASON_CONTAINER_LIMITATION';
'd_enum_TaskStatus.Reason'(20) ->
    'REASON_CONTAINER_LIMITATION_DISK';
'd_enum_TaskStatus.Reason'(8) ->
    'REASON_CONTAINER_LIMITATION_MEMORY';
'd_enum_TaskStatus.Reason'(17) ->
    'REASON_CONTAINER_PREEMPTED';
'd_enum_TaskStatus.Reason'(22) ->
    'REASON_CONTAINER_UPDATE_FAILED';
'd_enum_TaskStatus.Reason'(23) ->
    'REASON_EXECUTOR_REGISTRATION_TIMEOUT';
'd_enum_TaskStatus.Reason'(24) ->
    'REASON_EXECUTOR_REREGISTRATION_TIMEOUT';
'd_enum_TaskStatus.Reason'(1) ->
    'REASON_EXECUTOR_TERMINATED';
'd_enum_TaskStatus.Reason'(2) ->
    'REASON_EXECUTOR_UNREGISTERED';
'd_enum_TaskStatus.Reason'(3) ->
    'REASON_FRAMEWORK_REMOVED';
'd_enum_TaskStatus.Reason'(4) -> 'REASON_GC_ERROR';
'd_enum_TaskStatus.Reason'(5) ->
    'REASON_INVALID_FRAMEWORKID';
'd_enum_TaskStatus.Reason'(6) ->
    'REASON_INVALID_OFFERS';
'd_enum_TaskStatus.Reason'(7) ->
    'REASON_MASTER_DISCONNECTED';
'd_enum_TaskStatus.Reason'(9) ->
    'REASON_RECONCILIATION';
'd_enum_TaskStatus.Reason'(18) ->
    'REASON_RESOURCES_UNKNOWN';
'd_enum_TaskStatus.Reason'(10) ->
    'REASON_AGENT_DISCONNECTED';
'd_enum_TaskStatus.Reason'(11) ->
    'REASON_AGENT_REMOVED';
'd_enum_TaskStatus.Reason'(12) ->
    'REASON_AGENT_RESTARTED';
'd_enum_TaskStatus.Reason'(13) ->
    'REASON_AGENT_UNKNOWN';
'd_enum_TaskStatus.Reason'(14) -> 'REASON_TASK_INVALID';
'd_enum_TaskStatus.Reason'(15) ->
    'REASON_TASK_UNAUTHORIZED';
'd_enum_TaskStatus.Reason'(16) -> 'REASON_TASK_UNKNOWN'.

'd_enum_Image.Type'(1) -> 'APPC';
'd_enum_Image.Type'(2) -> 'DOCKER'.

'd_enum_Volume.Mode'(1) -> 'RW';
'd_enum_Volume.Mode'(2) -> 'RO'.

'd_enum_Volume.Source.Type'(0) -> 'UNKNOWN';
'd_enum_Volume.Source.Type'(1) -> 'DOCKER_VOLUME'.

'd_enum_NetworkInfo.Protocol'(1) -> 'IPv4';
'd_enum_NetworkInfo.Protocol'(2) -> 'IPv6'.

'd_enum_ContainerInfo.Type'(1) -> 'DOCKER';
'd_enum_ContainerInfo.Type'(2) -> 'MESOS'.

'd_enum_ContainerInfo.DockerInfo.Network'(1) -> 'HOST';
'd_enum_ContainerInfo.DockerInfo.Network'(2) ->
    'BRIDGE';
'd_enum_ContainerInfo.DockerInfo.Network'(3) -> 'NONE';
'd_enum_ContainerInfo.DockerInfo.Network'(4) -> 'USER'.

'd_enum_DiscoveryInfo.Visibility'(0) -> 'FRAMEWORK';
'd_enum_DiscoveryInfo.Visibility'(1) -> 'CLUSTER';
'd_enum_DiscoveryInfo.Visibility'(2) -> 'EXTERNAL'.



merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    case Prev of
      #'Environment.Variable'{} ->
	  'merge_msg_Environment.Variable'(Prev, New);
      #'Environment'{} -> merge_msg_Environment(Prev, New);
      #'CommandInfo.URI'{} ->
	  'merge_msg_CommandInfo.URI'(Prev, New);
      #'CommandInfo'{} -> merge_msg_CommandInfo(Prev, New);
      #'Parameter'{} -> merge_msg_Parameter(Prev, New);
      #'ContainerInfo.DockerInfo.PortMapping'{} ->
	  'merge_msg_ContainerInfo.DockerInfo.PortMapping'(Prev,
							   New);
      #'ContainerInfo.DockerInfo'{} ->
	  'merge_msg_ContainerInfo.DockerInfo'(Prev, New);
      #'TimeInfo'{} -> merge_msg_TimeInfo(Prev, New);
      #'WeightInfo'{} -> merge_msg_WeightInfo(Prev, New);
      #'DurationInfo'{} -> merge_msg_DurationInfo(Prev, New);
      #'Unavailability'{} ->
	  merge_msg_Unavailability(Prev, New);
      #'MachineID'{} -> merge_msg_MachineID(Prev, New);
      #'MachineInfo'{} -> merge_msg_MachineInfo(Prev, New);
      #'Resource.RevocableInfo'{} ->
	  'merge_msg_Resource.RevocableInfo'(Prev, New);
      #'Resource.DiskInfo.Source.Mount'{} ->
	  'merge_msg_Resource.DiskInfo.Source.Mount'(Prev, New);
      #'Resource.DiskInfo.Source.Path'{} ->
	  'merge_msg_Resource.DiskInfo.Source.Path'(Prev, New);
      #'Resource.DiskInfo.Source'{} ->
	  'merge_msg_Resource.DiskInfo.Source'(Prev, New);
      #'Parameters'{} -> merge_msg_Parameters(Prev, New);
      #'Volume.Source.DockerVolume'{} ->
	  'merge_msg_Volume.Source.DockerVolume'(Prev, New);
      #'Volume.Source'{} ->
	  'merge_msg_Volume.Source'(Prev, New);
      #'Credential'{} -> merge_msg_Credential(Prev, New);
      #'Image.Docker'{} ->
	  'merge_msg_Image.Docker'(Prev, New);
      #'Label'{} -> merge_msg_Label(Prev, New);
      #'Labels'{} -> merge_msg_Labels(Prev, New);
      #'Image.Appc'{} -> 'merge_msg_Image.Appc'(Prev, New);
      #'Image'{} -> merge_msg_Image(Prev, New);
      #'Volume'{} -> merge_msg_Volume(Prev, New);
      #'Resource.DiskInfo.Persistence'{} ->
	  'merge_msg_Resource.DiskInfo.Persistence'(Prev, New);
      #'Resource.DiskInfo'{} ->
	  'merge_msg_Resource.DiskInfo'(Prev, New);
      #'Resource.ReservationInfo'{} ->
	  'merge_msg_Resource.ReservationInfo'(Prev, New);
      #'Value.Set'{} -> 'merge_msg_Value.Set'(Prev, New);
      #'Value.Range'{} -> 'merge_msg_Value.Range'(Prev, New);
      #'Value.Ranges'{} ->
	  'merge_msg_Value.Ranges'(Prev, New);
      #'Value.Scalar'{} ->
	  'merge_msg_Value.Scalar'(Prev, New);
      #'Resource'{} -> merge_msg_Resource(Prev, New);
      #'Offer.Operation.Destroy'{} ->
	  'merge_msg_Offer.Operation.Destroy'(Prev, New);
      #'Offer.Operation.Create'{} ->
	  'merge_msg_Offer.Operation.Create'(Prev, New);
      #'Offer.Operation.Unreserve'{} ->
	  'merge_msg_Offer.Operation.Unreserve'(Prev, New);
      #'Offer.Operation.Reserve'{} ->
	  'merge_msg_Offer.Operation.Reserve'(Prev, New);
      #'Port'{} -> merge_msg_Port(Prev, New);
      #'Ports'{} -> merge_msg_Ports(Prev, New);
      #'DiscoveryInfo'{} ->
	  merge_msg_DiscoveryInfo(Prev, New);
      #'KillPolicy'{} -> merge_msg_KillPolicy(Prev, New);
      #'HealthCheck.HTTP'{} ->
	  'merge_msg_HealthCheck.HTTP'(Prev, New);
      #'HealthCheck'{} -> merge_msg_HealthCheck(Prev, New);
      #'NetworkInfo.IPAddress'{} ->
	  'merge_msg_NetworkInfo.IPAddress'(Prev, New);
      #'NetworkInfo'{} -> merge_msg_NetworkInfo(Prev, New);
      #'ContainerInfo.MesosInfo'{} ->
	  'merge_msg_ContainerInfo.MesosInfo'(Prev, New);
      #'ContainerInfo'{} ->
	  merge_msg_ContainerInfo(Prev, New);
      #'FrameworkID'{} -> merge_msg_FrameworkID(Prev, New);
      #'ExecutorID'{} -> merge_msg_ExecutorID(Prev, New);
      #'ExecutorInfo'{} -> merge_msg_ExecutorInfo(Prev, New);
      #'AgentID'{} -> merge_msg_AgentID(Prev, New);
      #'TaskID'{} -> merge_msg_TaskID(Prev, New);
      #'TaskInfo'{} -> merge_msg_TaskInfo(Prev, New);
      #'Offer.Operation.Launch'{} ->
	  'merge_msg_Offer.Operation.Launch'(Prev, New);
      #'Offer.Operation'{} ->
	  'merge_msg_Offer.Operation'(Prev, New);
      #'Flag'{} -> merge_msg_Flag(Prev, New);
      #'Value.Text'{} -> 'merge_msg_Value.Text'(Prev, New);
      #'Value'{} -> merge_msg_Value(Prev, New);
      #'Request'{} -> merge_msg_Request(Prev, New);
      #'ContainerID'{} -> merge_msg_ContainerID(Prev, New);
      #'Metric'{} -> merge_msg_Metric(Prev, New);
      #'Response.GetFileContents'{} ->
	  'merge_msg_Response.GetFileContents'(Prev, New);
      #'CgroupInfo.NetCls'{} ->
	  'merge_msg_CgroupInfo.NetCls'(Prev, New);
      #'Call.GetMetrics'{} ->
	  'merge_msg_Call.GetMetrics'(Prev, New);
      #'UdpStatistics'{} ->
	  merge_msg_UdpStatistics(Prev, New);
      #'TcpStatistics'{} ->
	  merge_msg_TcpStatistics(Prev, New);
      #'IpStatistics'{} -> merge_msg_IpStatistics(Prev, New);
      #'Response.GetMetrics'{} ->
	  'merge_msg_Response.GetMetrics'(Prev, New);
      #'VersionInfo'{} -> merge_msg_VersionInfo(Prev, New);
      #'Address'{} -> merge_msg_Address(Prev, New);
      #'MasterInfo'{} -> merge_msg_MasterInfo(Prev, New);
      #'FrameworkInfo.Capability'{} ->
	  'merge_msg_FrameworkInfo.Capability'(Prev, New);
      #'FrameworkInfo'{} ->
	  merge_msg_FrameworkInfo(Prev, New);
      #'URL'{} -> merge_msg_URL(Prev, New);
      #'Call.ReadFile'{} ->
	  'merge_msg_Call.ReadFile'(Prev, New);
      #'Call.ListFiles'{} ->
	  'merge_msg_Call.ListFiles'(Prev, New);
      #'Call.SetLoggingLevel'{} ->
	  'merge_msg_Call.SetLoggingLevel'(Prev, New);
      #'Call'{} -> merge_msg_Call(Prev, New);
      #'ResourceUsage.Executor.Task'{} ->
	  'merge_msg_ResourceUsage.Executor.Task'(Prev, New);
      #'Role'{} -> merge_msg_Role(Prev, New);
      #'IcmpStatistics'{} ->
	  merge_msg_IcmpStatistics(Prev, New);
      #'SNMPStatistics'{} ->
	  merge_msg_SNMPStatistics(Prev, New);
      #'TrafficControlStatistics'{} ->
	  merge_msg_TrafficControlStatistics(Prev, New);
      #'PerfStatistics'{} ->
	  merge_msg_PerfStatistics(Prev, New);
      #'ResourceStatistics'{} ->
	  merge_msg_ResourceStatistics(Prev, New);
      #'FileInfo'{} -> merge_msg_FileInfo(Prev, New);
      #'Response.ListFiles'{} ->
	  'merge_msg_Response.ListFiles'(Prev, New);
      #'CgroupInfo'{} -> merge_msg_CgroupInfo(Prev, New);
      #'ContainerStatus'{} ->
	  merge_msg_ContainerStatus(Prev, New);
      #'TaskStatus'{} -> merge_msg_TaskStatus(Prev, New);
      #'Attribute'{} -> merge_msg_Attribute(Prev, New);
      #'AgentInfo'{} -> merge_msg_AgentInfo(Prev, New);
      #'Response.GetLoggingLevel'{} ->
	  'merge_msg_Response.GetLoggingLevel'(Prev, New);
      #'Task'{} -> merge_msg_Task(Prev, New);
      #'Response.GetContainers.Container'{} ->
	  'merge_msg_Response.GetContainers.Container'(Prev, New);
      #'Response.GetContainers'{} ->
	  'merge_msg_Response.GetContainers'(Prev, New);
      #'Response.GetState'{} ->
	  'merge_msg_Response.GetState'(Prev, New);
      #'Response.GetVersion'{} ->
	  'merge_msg_Response.GetVersion'(Prev, New);
      #'Response.GetFlags'{} ->
	  'merge_msg_Response.GetFlags'(Prev, New);
      #'Response.GetHealth'{} ->
	  'merge_msg_Response.GetHealth'(Prev, New);
      #'Response'{} -> merge_msg_Response(Prev, New);
      #'Filters'{} -> merge_msg_Filters(Prev, New);
      #'Credentials'{} -> merge_msg_Credentials(Prev, New);
      #'RateLimit'{} -> merge_msg_RateLimit(Prev, New);
      #'RateLimits'{} -> merge_msg_RateLimits(Prev, New);
      #'OfferID'{} -> merge_msg_OfferID(Prev, New);
      #'InverseOffer'{} -> merge_msg_InverseOffer(Prev, New);
      #'ResourceUsage.Executor'{} ->
	  'merge_msg_ResourceUsage.Executor'(Prev, New);
      #'ResourceUsage'{} ->
	  merge_msg_ResourceUsage(Prev, New);
      #'Offer'{} -> merge_msg_Offer(Prev, New)
    end.

'merge_msg_Environment.Variable'(#'Environment.Variable'{name
							     = PFname,
							 value = PFvalue},
				 #'Environment.Variable'{name = NFname,
							 value = NFvalue}) ->
    #'Environment.Variable'{name =
				if NFname =:= undefined -> PFname;
				   true -> NFname
				end,
			    value =
				if NFvalue =:= undefined -> PFvalue;
				   true -> NFvalue
				end}.

merge_msg_Environment(Prev, undefined) -> Prev;
merge_msg_Environment(undefined, New) -> New;
merge_msg_Environment(#'Environment'{variables =
					 PFvariables},
		      #'Environment'{variables = NFvariables}) ->
    #'Environment'{variables =
		       'erlang_++'(PFvariables, NFvariables)}.

'merge_msg_CommandInfo.URI'(#'CommandInfo.URI'{value =
						   PFvalue,
					       executable = PFexecutable,
					       extract = PFextract,
					       cache = PFcache,
					       output_file = PFoutput_file},
			    #'CommandInfo.URI'{value = NFvalue,
					       executable = NFexecutable,
					       extract = NFextract,
					       cache = NFcache,
					       output_file = NFoutput_file}) ->
    #'CommandInfo.URI'{value =
			   if NFvalue =:= undefined -> PFvalue;
			      true -> NFvalue
			   end,
		       executable =
			   if NFexecutable =:= undefined -> PFexecutable;
			      true -> NFexecutable
			   end,
		       extract =
			   if NFextract =:= undefined -> PFextract;
			      true -> NFextract
			   end,
		       cache =
			   if NFcache =:= undefined -> PFcache;
			      true -> NFcache
			   end,
		       output_file =
			   if NFoutput_file =:= undefined -> PFoutput_file;
			      true -> NFoutput_file
			   end}.

merge_msg_CommandInfo(Prev, undefined) -> Prev;
merge_msg_CommandInfo(undefined, New) -> New;
merge_msg_CommandInfo(#'CommandInfo'{uris = PFuris,
				     environment = PFenvironment,
				     shell = PFshell, value = PFvalue,
				     arguments = PFarguments, user = PFuser},
		      #'CommandInfo'{uris = NFuris,
				     environment = NFenvironment,
				     shell = NFshell, value = NFvalue,
				     arguments = NFarguments, user = NFuser}) ->
    #'CommandInfo'{uris = 'erlang_++'(PFuris, NFuris),
		   environment =
		       merge_msg_Environment(PFenvironment, NFenvironment),
		   shell =
		       if NFshell =:= undefined -> PFshell;
			  true -> NFshell
		       end,
		   value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end,
		   arguments = 'erlang_++'(PFarguments, NFarguments),
		   user =
		       if NFuser =:= undefined -> PFuser;
			  true -> NFuser
		       end}.

merge_msg_Parameter(#'Parameter'{key = PFkey,
				 value = PFvalue},
		    #'Parameter'{key = NFkey, value = NFvalue}) ->
    #'Parameter'{key =
		     if NFkey =:= undefined -> PFkey;
			true -> NFkey
		     end,
		 value =
		     if NFvalue =:= undefined -> PFvalue;
			true -> NFvalue
		     end}.

'merge_msg_ContainerInfo.DockerInfo.PortMapping'(#'ContainerInfo.DockerInfo.PortMapping'{host_port
											     =
											     PFhost_port,
											 container_port
											     =
											     PFcontainer_port,
											 protocol
											     =
											     PFprotocol},
						 #'ContainerInfo.DockerInfo.PortMapping'{host_port
											     =
											     NFhost_port,
											 container_port
											     =
											     NFcontainer_port,
											 protocol
											     =
											     NFprotocol}) ->
    #'ContainerInfo.DockerInfo.PortMapping'{host_port =
						if NFhost_port =:= undefined ->
						       PFhost_port;
						   true -> NFhost_port
						end,
					    container_port =
						if NFcontainer_port =:=
						     undefined ->
						       PFcontainer_port;
						   true -> NFcontainer_port
						end,
					    protocol =
						if NFprotocol =:= undefined ->
						       PFprotocol;
						   true -> NFprotocol
						end}.

'merge_msg_ContainerInfo.DockerInfo'(Prev, undefined) ->
    Prev;
'merge_msg_ContainerInfo.DockerInfo'(undefined, New) ->
    New;
'merge_msg_ContainerInfo.DockerInfo'(#'ContainerInfo.DockerInfo'{image
								     = PFimage,
								 network =
								     PFnetwork,
								 port_mappings =
								     PFport_mappings,
								 privileged =
								     PFprivileged,
								 parameters =
								     PFparameters,
								 force_pull_image
								     =
								     PFforce_pull_image,
								 volume_driver =
								     PFvolume_driver},
				     #'ContainerInfo.DockerInfo'{image =
								     NFimage,
								 network =
								     NFnetwork,
								 port_mappings =
								     NFport_mappings,
								 privileged =
								     NFprivileged,
								 parameters =
								     NFparameters,
								 force_pull_image
								     =
								     NFforce_pull_image,
								 volume_driver =
								     NFvolume_driver}) ->
    #'ContainerInfo.DockerInfo'{image =
				    if NFimage =:= undefined -> PFimage;
				       true -> NFimage
				    end,
				network =
				    if NFnetwork =:= undefined -> PFnetwork;
				       true -> NFnetwork
				    end,
				port_mappings =
				    'erlang_++'(PFport_mappings,
						NFport_mappings),
				privileged =
				    if NFprivileged =:= undefined ->
					   PFprivileged;
				       true -> NFprivileged
				    end,
				parameters =
				    'erlang_++'(PFparameters, NFparameters),
				force_pull_image =
				    if NFforce_pull_image =:= undefined ->
					   PFforce_pull_image;
				       true -> NFforce_pull_image
				    end,
				volume_driver =
				    if NFvolume_driver =:= undefined ->
					   PFvolume_driver;
				       true -> NFvolume_driver
				    end}.

merge_msg_TimeInfo(Prev, undefined) -> Prev;
merge_msg_TimeInfo(undefined, New) -> New;
merge_msg_TimeInfo(#'TimeInfo'{nanoseconds =
				   PFnanoseconds},
		   #'TimeInfo'{nanoseconds = NFnanoseconds}) ->
    #'TimeInfo'{nanoseconds =
		    if NFnanoseconds =:= undefined -> PFnanoseconds;
		       true -> NFnanoseconds
		    end}.

merge_msg_WeightInfo(#'WeightInfo'{weight = PFweight,
				   role = PFrole},
		     #'WeightInfo'{weight = NFweight, role = NFrole}) ->
    #'WeightInfo'{weight =
		      if NFweight =:= undefined -> PFweight;
			 true -> NFweight
		      end,
		  role =
		      if NFrole =:= undefined -> PFrole;
			 true -> NFrole
		      end}.

merge_msg_DurationInfo(Prev, undefined) -> Prev;
merge_msg_DurationInfo(undefined, New) -> New;
merge_msg_DurationInfo(#'DurationInfo'{nanoseconds =
					   PFnanoseconds},
		       #'DurationInfo'{nanoseconds = NFnanoseconds}) ->
    #'DurationInfo'{nanoseconds =
			if NFnanoseconds =:= undefined -> PFnanoseconds;
			   true -> NFnanoseconds
			end}.

merge_msg_Unavailability(Prev, undefined) -> Prev;
merge_msg_Unavailability(undefined, New) -> New;
merge_msg_Unavailability(#'Unavailability'{start =
					       PFstart,
					   duration = PFduration},
			 #'Unavailability'{start = NFstart,
					   duration = NFduration}) ->
    #'Unavailability'{start =
			  merge_msg_TimeInfo(PFstart, NFstart),
		      duration =
			  merge_msg_DurationInfo(PFduration, NFduration)}.

merge_msg_MachineID(#'MachineID'{hostname = PFhostname,
				 ip = PFip},
		    #'MachineID'{hostname = NFhostname, ip = NFip}) ->
    #'MachineID'{hostname =
		     if NFhostname =:= undefined -> PFhostname;
			true -> NFhostname
		     end,
		 ip =
		     if NFip =:= undefined -> PFip;
			true -> NFip
		     end}.

merge_msg_MachineInfo(#'MachineInfo'{id = PFid,
				     mode = PFmode,
				     unavailability = PFunavailability},
		      #'MachineInfo'{id = NFid, mode = NFmode,
				     unavailability = NFunavailability}) ->
    #'MachineInfo'{id = merge_msg_MachineID(PFid, NFid),
		   mode =
		       if NFmode =:= undefined -> PFmode;
			  true -> NFmode
		       end,
		   unavailability =
		       merge_msg_Unavailability(PFunavailability,
						NFunavailability)}.

'merge_msg_Resource.RevocableInfo'(_Prev, New) -> New.

'merge_msg_Resource.DiskInfo.Source.Mount'(Prev,
					   undefined) ->
    Prev;
'merge_msg_Resource.DiskInfo.Source.Mount'(undefined,
					   New) ->
    New;
'merge_msg_Resource.DiskInfo.Source.Mount'(#'Resource.DiskInfo.Source.Mount'{root
										 =
										 PFroot},
					   #'Resource.DiskInfo.Source.Mount'{root
										 =
										 NFroot}) ->
    #'Resource.DiskInfo.Source.Mount'{root =
					  if NFroot =:= undefined -> PFroot;
					     true -> NFroot
					  end}.

'merge_msg_Resource.DiskInfo.Source.Path'(Prev,
					  undefined) ->
    Prev;
'merge_msg_Resource.DiskInfo.Source.Path'(undefined,
					  New) ->
    New;
'merge_msg_Resource.DiskInfo.Source.Path'(#'Resource.DiskInfo.Source.Path'{root
									       =
									       PFroot},
					  #'Resource.DiskInfo.Source.Path'{root
									       =
									       NFroot}) ->
    #'Resource.DiskInfo.Source.Path'{root =
					 if NFroot =:= undefined -> PFroot;
					    true -> NFroot
					 end}.

'merge_msg_Resource.DiskInfo.Source'(Prev, undefined) ->
    Prev;
'merge_msg_Resource.DiskInfo.Source'(undefined, New) ->
    New;
'merge_msg_Resource.DiskInfo.Source'(#'Resource.DiskInfo.Source'{type
								     = PFtype,
								 path = PFpath,
								 mount =
								     PFmount},
				     #'Resource.DiskInfo.Source'{type = NFtype,
								 path = NFpath,
								 mount =
								     NFmount}) ->
    #'Resource.DiskInfo.Source'{type =
				    if NFtype =:= undefined -> PFtype;
				       true -> NFtype
				    end,
				path =
				    'merge_msg_Resource.DiskInfo.Source.Path'(PFpath,
									      NFpath),
				mount =
				    'merge_msg_Resource.DiskInfo.Source.Mount'(PFmount,
									       NFmount)}.

merge_msg_Parameters(Prev, undefined) -> Prev;
merge_msg_Parameters(undefined, New) -> New;
merge_msg_Parameters(#'Parameters'{parameter =
				       PFparameter},
		     #'Parameters'{parameter = NFparameter}) ->
    #'Parameters'{parameter =
		      'erlang_++'(PFparameter, NFparameter)}.

'merge_msg_Volume.Source.DockerVolume'(Prev,
				       undefined) ->
    Prev;
'merge_msg_Volume.Source.DockerVolume'(undefined,
				       New) ->
    New;
'merge_msg_Volume.Source.DockerVolume'(#'Volume.Source.DockerVolume'{driver
									 =
									 PFdriver,
								     name =
									 PFname,
								     driver_options
									 =
									 PFdriver_options},
				       #'Volume.Source.DockerVolume'{driver =
									 NFdriver,
								     name =
									 NFname,
								     driver_options
									 =
									 NFdriver_options}) ->
    #'Volume.Source.DockerVolume'{driver =
				      if NFdriver =:= undefined -> PFdriver;
					 true -> NFdriver
				      end,
				  name =
				      if NFname =:= undefined -> PFname;
					 true -> NFname
				      end,
				  driver_options =
				      merge_msg_Parameters(PFdriver_options,
							   NFdriver_options)}.

'merge_msg_Volume.Source'(Prev, undefined) -> Prev;
'merge_msg_Volume.Source'(undefined, New) -> New;
'merge_msg_Volume.Source'(#'Volume.Source'{type =
					       PFtype,
					   docker_volume = PFdocker_volume},
			  #'Volume.Source'{type = NFtype,
					   docker_volume = NFdocker_volume}) ->
    #'Volume.Source'{type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end,
		     docker_volume =
			 'merge_msg_Volume.Source.DockerVolume'(PFdocker_volume,
								NFdocker_volume)}.

merge_msg_Credential(Prev, undefined) -> Prev;
merge_msg_Credential(undefined, New) -> New;
merge_msg_Credential(#'Credential'{principal =
				       PFprincipal,
				   secret = PFsecret},
		     #'Credential'{principal = NFprincipal,
				   secret = NFsecret}) ->
    #'Credential'{principal =
		      if NFprincipal =:= undefined -> PFprincipal;
			 true -> NFprincipal
		      end,
		  secret =
		      if NFsecret =:= undefined -> PFsecret;
			 true -> NFsecret
		      end}.

'merge_msg_Image.Docker'(Prev, undefined) -> Prev;
'merge_msg_Image.Docker'(undefined, New) -> New;
'merge_msg_Image.Docker'(#'Image.Docker'{name = PFname,
					 credential = PFcredential},
			 #'Image.Docker'{name = NFname,
					 credential = NFcredential}) ->
    #'Image.Docker'{name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    credential =
			merge_msg_Credential(PFcredential, NFcredential)}.

merge_msg_Label(#'Label'{key = PFkey, value = PFvalue},
		#'Label'{key = NFkey, value = NFvalue}) ->
    #'Label'{key =
		 if NFkey =:= undefined -> PFkey;
		    true -> NFkey
		 end,
	     value =
		 if NFvalue =:= undefined -> PFvalue;
		    true -> NFvalue
		 end}.

merge_msg_Labels(Prev, undefined) -> Prev;
merge_msg_Labels(undefined, New) -> New;
merge_msg_Labels(#'Labels'{labels = PFlabels},
		 #'Labels'{labels = NFlabels}) ->
    #'Labels'{labels = 'erlang_++'(PFlabels, NFlabels)}.

'merge_msg_Image.Appc'(Prev, undefined) -> Prev;
'merge_msg_Image.Appc'(undefined, New) -> New;
'merge_msg_Image.Appc'(#'Image.Appc'{name = PFname,
				     id = PFid, labels = PFlabels},
		       #'Image.Appc'{name = NFname, id = NFid,
				     labels = NFlabels}) ->
    #'Image.Appc'{name =
		      if NFname =:= undefined -> PFname;
			 true -> NFname
		      end,
		  id =
		      if NFid =:= undefined -> PFid;
			 true -> NFid
		      end,
		  labels = merge_msg_Labels(PFlabels, NFlabels)}.

merge_msg_Image(Prev, undefined) -> Prev;
merge_msg_Image(undefined, New) -> New;
merge_msg_Image(#'Image'{type = PFtype, appc = PFappc,
			 docker = PFdocker, cached = PFcached},
		#'Image'{type = NFtype, appc = NFappc,
			 docker = NFdocker, cached = NFcached}) ->
    #'Image'{type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     appc = 'merge_msg_Image.Appc'(PFappc, NFappc),
	     docker = 'merge_msg_Image.Docker'(PFdocker, NFdocker),
	     cached =
		 if NFcached =:= undefined -> PFcached;
		    true -> NFcached
		 end}.

merge_msg_Volume(Prev, undefined) -> Prev;
merge_msg_Volume(undefined, New) -> New;
merge_msg_Volume(#'Volume'{mode = PFmode,
			   container_path = PFcontainer_path,
			   host_path = PFhost_path, image = PFimage,
			   source = PFsource},
		 #'Volume'{mode = NFmode,
			   container_path = NFcontainer_path,
			   host_path = NFhost_path, image = NFimage,
			   source = NFsource}) ->
    #'Volume'{mode =
		  if NFmode =:= undefined -> PFmode;
		     true -> NFmode
		  end,
	      container_path =
		  if NFcontainer_path =:= undefined -> PFcontainer_path;
		     true -> NFcontainer_path
		  end,
	      host_path =
		  if NFhost_path =:= undefined -> PFhost_path;
		     true -> NFhost_path
		  end,
	      image = merge_msg_Image(PFimage, NFimage),
	      source = 'merge_msg_Volume.Source'(PFsource, NFsource)}.

'merge_msg_Resource.DiskInfo.Persistence'(Prev,
					  undefined) ->
    Prev;
'merge_msg_Resource.DiskInfo.Persistence'(undefined,
					  New) ->
    New;
'merge_msg_Resource.DiskInfo.Persistence'(#'Resource.DiskInfo.Persistence'{id
									       =
									       PFid,
									   principal
									       =
									       PFprincipal},
					  #'Resource.DiskInfo.Persistence'{id =
									       NFid,
									   principal
									       =
									       NFprincipal}) ->
    #'Resource.DiskInfo.Persistence'{id =
					 if NFid =:= undefined -> PFid;
					    true -> NFid
					 end,
				     principal =
					 if NFprincipal =:= undefined ->
						PFprincipal;
					    true -> NFprincipal
					 end}.

'merge_msg_Resource.DiskInfo'(Prev, undefined) -> Prev;
'merge_msg_Resource.DiskInfo'(undefined, New) -> New;
'merge_msg_Resource.DiskInfo'(#'Resource.DiskInfo'{persistence
						       = PFpersistence,
						   volume = PFvolume,
						   source = PFsource},
			      #'Resource.DiskInfo'{persistence = NFpersistence,
						   volume = NFvolume,
						   source = NFsource}) ->
    #'Resource.DiskInfo'{persistence =
			     'merge_msg_Resource.DiskInfo.Persistence'(PFpersistence,
								       NFpersistence),
			 volume = merge_msg_Volume(PFvolume, NFvolume),
			 source =
			     'merge_msg_Resource.DiskInfo.Source'(PFsource,
								  NFsource)}.

'merge_msg_Resource.ReservationInfo'(Prev, undefined) ->
    Prev;
'merge_msg_Resource.ReservationInfo'(undefined, New) ->
    New;
'merge_msg_Resource.ReservationInfo'(#'Resource.ReservationInfo'{principal
								     =
								     PFprincipal,
								 labels =
								     PFlabels},
				     #'Resource.ReservationInfo'{principal =
								     NFprincipal,
								 labels =
								     NFlabels}) ->
    #'Resource.ReservationInfo'{principal =
				    if NFprincipal =:= undefined -> PFprincipal;
				       true -> NFprincipal
				    end,
				labels = merge_msg_Labels(PFlabels, NFlabels)}.

'merge_msg_Value.Set'(Prev, undefined) -> Prev;
'merge_msg_Value.Set'(undefined, New) -> New;
'merge_msg_Value.Set'(#'Value.Set'{item = PFitem},
		      #'Value.Set'{item = NFitem}) ->
    #'Value.Set'{item = 'erlang_++'(PFitem, NFitem)}.

'merge_msg_Value.Range'(#'Value.Range'{'begin' =
					   PFbegin,
				       'end' = PFend},
			#'Value.Range'{'begin' = NFbegin, 'end' = NFend}) ->
    #'Value.Range'{'begin' =
		       if NFbegin =:= undefined -> PFbegin;
			  true -> NFbegin
		       end,
		   'end' =
		       if NFend =:= undefined -> PFend;
			  true -> NFend
		       end}.

'merge_msg_Value.Ranges'(Prev, undefined) -> Prev;
'merge_msg_Value.Ranges'(undefined, New) -> New;
'merge_msg_Value.Ranges'(#'Value.Ranges'{range =
					     PFrange},
			 #'Value.Ranges'{range = NFrange}) ->
    #'Value.Ranges'{range = 'erlang_++'(PFrange, NFrange)}.

'merge_msg_Value.Scalar'(Prev, undefined) -> Prev;
'merge_msg_Value.Scalar'(undefined, New) -> New;
'merge_msg_Value.Scalar'(#'Value.Scalar'{value =
					     PFvalue},
			 #'Value.Scalar'{value = NFvalue}) ->
    #'Value.Scalar'{value =
			if NFvalue =:= undefined -> PFvalue;
			   true -> NFvalue
			end}.

merge_msg_Resource(#'Resource'{name = PFname,
			       type = PFtype, scalar = PFscalar,
			       ranges = PFranges, set = PFset, role = PFrole,
			       reservation = PFreservation, disk = PFdisk,
			       revocable = PFrevocable},
		   #'Resource'{name = NFname, type = NFtype,
			       scalar = NFscalar, ranges = NFranges,
			       set = NFset, role = NFrole,
			       reservation = NFreservation, disk = NFdisk,
			       revocable = NFrevocable}) ->
    #'Resource'{name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		type =
		    if NFtype =:= undefined -> PFtype;
		       true -> NFtype
		    end,
		scalar = 'merge_msg_Value.Scalar'(PFscalar, NFscalar),
		ranges = 'merge_msg_Value.Ranges'(PFranges, NFranges),
		set = 'merge_msg_Value.Set'(PFset, NFset),
		role =
		    if NFrole =:= undefined -> PFrole;
		       true -> NFrole
		    end,
		reservation =
		    'merge_msg_Resource.ReservationInfo'(PFreservation,
							 NFreservation),
		disk = 'merge_msg_Resource.DiskInfo'(PFdisk, NFdisk),
		revocable =
		    'merge_msg_Resource.RevocableInfo'(PFrevocable,
						       NFrevocable)}.

'merge_msg_Offer.Operation.Destroy'(Prev, undefined) ->
    Prev;
'merge_msg_Offer.Operation.Destroy'(undefined, New) ->
    New;
'merge_msg_Offer.Operation.Destroy'(#'Offer.Operation.Destroy'{volumes
								   = PFvolumes},
				    #'Offer.Operation.Destroy'{volumes =
								   NFvolumes}) ->
    #'Offer.Operation.Destroy'{volumes =
				   'erlang_++'(PFvolumes, NFvolumes)}.

'merge_msg_Offer.Operation.Create'(Prev, undefined) ->
    Prev;
'merge_msg_Offer.Operation.Create'(undefined, New) ->
    New;
'merge_msg_Offer.Operation.Create'(#'Offer.Operation.Create'{volumes
								 = PFvolumes},
				   #'Offer.Operation.Create'{volumes =
								 NFvolumes}) ->
    #'Offer.Operation.Create'{volumes =
				  'erlang_++'(PFvolumes, NFvolumes)}.

'merge_msg_Offer.Operation.Unreserve'(Prev,
				      undefined) ->
    Prev;
'merge_msg_Offer.Operation.Unreserve'(undefined, New) ->
    New;
'merge_msg_Offer.Operation.Unreserve'(#'Offer.Operation.Unreserve'{resources
								       =
								       PFresources},
				      #'Offer.Operation.Unreserve'{resources =
								       NFresources}) ->
    #'Offer.Operation.Unreserve'{resources =
				     'erlang_++'(PFresources, NFresources)}.

'merge_msg_Offer.Operation.Reserve'(Prev, undefined) ->
    Prev;
'merge_msg_Offer.Operation.Reserve'(undefined, New) ->
    New;
'merge_msg_Offer.Operation.Reserve'(#'Offer.Operation.Reserve'{resources
								   =
								   PFresources},
				    #'Offer.Operation.Reserve'{resources =
								   NFresources}) ->
    #'Offer.Operation.Reserve'{resources =
				   'erlang_++'(PFresources, NFresources)}.

merge_msg_Port(#'Port'{number = PFnumber, name = PFname,
		       protocol = PFprotocol, visibility = PFvisibility,
		       labels = PFlabels},
	       #'Port'{number = NFnumber, name = NFname,
		       protocol = NFprotocol, visibility = NFvisibility,
		       labels = NFlabels}) ->
    #'Port'{number =
		if NFnumber =:= undefined -> PFnumber;
		   true -> NFnumber
		end,
	    name =
		if NFname =:= undefined -> PFname;
		   true -> NFname
		end,
	    protocol =
		if NFprotocol =:= undefined -> PFprotocol;
		   true -> NFprotocol
		end,
	    visibility =
		if NFvisibility =:= undefined -> PFvisibility;
		   true -> NFvisibility
		end,
	    labels = merge_msg_Labels(PFlabels, NFlabels)}.

merge_msg_Ports(Prev, undefined) -> Prev;
merge_msg_Ports(undefined, New) -> New;
merge_msg_Ports(#'Ports'{ports = PFports},
		#'Ports'{ports = NFports}) ->
    #'Ports'{ports = 'erlang_++'(PFports, NFports)}.

merge_msg_DiscoveryInfo(Prev, undefined) -> Prev;
merge_msg_DiscoveryInfo(undefined, New) -> New;
merge_msg_DiscoveryInfo(#'DiscoveryInfo'{visibility =
					     PFvisibility,
					 name = PFname,
					 environment = PFenvironment,
					 location = PFlocation,
					 version = PFversion, ports = PFports,
					 labels = PFlabels},
			#'DiscoveryInfo'{visibility = NFvisibility,
					 name = NFname,
					 environment = NFenvironment,
					 location = NFlocation,
					 version = NFversion, ports = NFports,
					 labels = NFlabels}) ->
    #'DiscoveryInfo'{visibility =
			 if NFvisibility =:= undefined -> PFvisibility;
			    true -> NFvisibility
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     environment =
			 if NFenvironment =:= undefined -> PFenvironment;
			    true -> NFenvironment
			 end,
		     location =
			 if NFlocation =:= undefined -> PFlocation;
			    true -> NFlocation
			 end,
		     version =
			 if NFversion =:= undefined -> PFversion;
			    true -> NFversion
			 end,
		     ports = merge_msg_Ports(PFports, NFports),
		     labels = merge_msg_Labels(PFlabels, NFlabels)}.

merge_msg_KillPolicy(Prev, undefined) -> Prev;
merge_msg_KillPolicy(undefined, New) -> New;
merge_msg_KillPolicy(#'KillPolicy'{grace_period =
				       PFgrace_period},
		     #'KillPolicy'{grace_period = NFgrace_period}) ->
    #'KillPolicy'{grace_period =
		      merge_msg_DurationInfo(PFgrace_period, NFgrace_period)}.

'merge_msg_HealthCheck.HTTP'(Prev, undefined) -> Prev;
'merge_msg_HealthCheck.HTTP'(undefined, New) -> New;
'merge_msg_HealthCheck.HTTP'(#'HealthCheck.HTTP'{port =
						     PFport,
						 path = PFpath,
						 statuses = PFstatuses},
			     #'HealthCheck.HTTP'{port = NFport, path = NFpath,
						 statuses = NFstatuses}) ->
    #'HealthCheck.HTTP'{port =
			    if NFport =:= undefined -> PFport;
			       true -> NFport
			    end,
			path =
			    if NFpath =:= undefined -> PFpath;
			       true -> NFpath
			    end,
			statuses = 'erlang_++'(PFstatuses, NFstatuses)}.

merge_msg_HealthCheck(Prev, undefined) -> Prev;
merge_msg_HealthCheck(undefined, New) -> New;
merge_msg_HealthCheck(#'HealthCheck'{http = PFhttp,
				     delay_seconds = PFdelay_seconds,
				     interval_seconds = PFinterval_seconds,
				     timeout_seconds = PFtimeout_seconds,
				     consecutive_failures =
					 PFconsecutive_failures,
				     grace_period_seconds =
					 PFgrace_period_seconds,
				     command = PFcommand},
		      #'HealthCheck'{http = NFhttp,
				     delay_seconds = NFdelay_seconds,
				     interval_seconds = NFinterval_seconds,
				     timeout_seconds = NFtimeout_seconds,
				     consecutive_failures =
					 NFconsecutive_failures,
				     grace_period_seconds =
					 NFgrace_period_seconds,
				     command = NFcommand}) ->
    #'HealthCheck'{http =
		       'merge_msg_HealthCheck.HTTP'(PFhttp, NFhttp),
		   delay_seconds =
		       if NFdelay_seconds =:= undefined -> PFdelay_seconds;
			  true -> NFdelay_seconds
		       end,
		   interval_seconds =
		       if NFinterval_seconds =:= undefined ->
			      PFinterval_seconds;
			  true -> NFinterval_seconds
		       end,
		   timeout_seconds =
		       if NFtimeout_seconds =:= undefined -> PFtimeout_seconds;
			  true -> NFtimeout_seconds
		       end,
		   consecutive_failures =
		       if NFconsecutive_failures =:= undefined ->
			      PFconsecutive_failures;
			  true -> NFconsecutive_failures
		       end,
		   grace_period_seconds =
		       if NFgrace_period_seconds =:= undefined ->
			      PFgrace_period_seconds;
			  true -> NFgrace_period_seconds
		       end,
		   command = merge_msg_CommandInfo(PFcommand, NFcommand)}.

'merge_msg_NetworkInfo.IPAddress'(#'NetworkInfo.IPAddress'{protocol
							       = PFprotocol,
							   ip_address =
							       PFip_address},
				  #'NetworkInfo.IPAddress'{protocol =
							       NFprotocol,
							   ip_address =
							       NFip_address}) ->
    #'NetworkInfo.IPAddress'{protocol =
				 if NFprotocol =:= undefined -> PFprotocol;
				    true -> NFprotocol
				 end,
			     ip_address =
				 if NFip_address =:= undefined -> PFip_address;
				    true -> NFip_address
				 end}.

merge_msg_NetworkInfo(#'NetworkInfo'{ip_addresses =
					 PFip_addresses,
				     name = PFname, groups = PFgroups,
				     labels = PFlabels},
		      #'NetworkInfo'{ip_addresses = NFip_addresses,
				     name = NFname, groups = NFgroups,
				     labels = NFlabels}) ->
    #'NetworkInfo'{ip_addresses =
		       'erlang_++'(PFip_addresses, NFip_addresses),
		   name =
		       if NFname =:= undefined -> PFname;
			  true -> NFname
		       end,
		   groups = 'erlang_++'(PFgroups, NFgroups),
		   labels = merge_msg_Labels(PFlabels, NFlabels)}.

'merge_msg_ContainerInfo.MesosInfo'(Prev, undefined) ->
    Prev;
'merge_msg_ContainerInfo.MesosInfo'(undefined, New) ->
    New;
'merge_msg_ContainerInfo.MesosInfo'(#'ContainerInfo.MesosInfo'{image
								   = PFimage},
				    #'ContainerInfo.MesosInfo'{image =
								   NFimage}) ->
    #'ContainerInfo.MesosInfo'{image =
				   merge_msg_Image(PFimage, NFimage)}.

merge_msg_ContainerInfo(Prev, undefined) -> Prev;
merge_msg_ContainerInfo(undefined, New) -> New;
merge_msg_ContainerInfo(#'ContainerInfo'{type = PFtype,
					 volumes = PFvolumes,
					 hostname = PFhostname,
					 docker = PFdocker, mesos = PFmesos,
					 network_infos = PFnetwork_infos},
			#'ContainerInfo'{type = NFtype, volumes = NFvolumes,
					 hostname = NFhostname,
					 docker = NFdocker, mesos = NFmesos,
					 network_infos = NFnetwork_infos}) ->
    #'ContainerInfo'{type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end,
		     volumes = 'erlang_++'(PFvolumes, NFvolumes),
		     hostname =
			 if NFhostname =:= undefined -> PFhostname;
			    true -> NFhostname
			 end,
		     docker =
			 'merge_msg_ContainerInfo.DockerInfo'(PFdocker,
							      NFdocker),
		     mesos =
			 'merge_msg_ContainerInfo.MesosInfo'(PFmesos, NFmesos),
		     network_infos =
			 'erlang_++'(PFnetwork_infos, NFnetwork_infos)}.

merge_msg_FrameworkID(Prev, undefined) -> Prev;
merge_msg_FrameworkID(undefined, New) -> New;
merge_msg_FrameworkID(#'FrameworkID'{value = PFvalue},
		      #'FrameworkID'{value = NFvalue}) ->
    #'FrameworkID'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

merge_msg_ExecutorID(Prev, undefined) -> Prev;
merge_msg_ExecutorID(undefined, New) -> New;
merge_msg_ExecutorID(#'ExecutorID'{value = PFvalue},
		     #'ExecutorID'{value = NFvalue}) ->
    #'ExecutorID'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

merge_msg_ExecutorInfo(Prev, undefined) -> Prev;
merge_msg_ExecutorInfo(undefined, New) -> New;
merge_msg_ExecutorInfo(#'ExecutorInfo'{executor_id =
					   PFexecutor_id,
				       framework_id = PFframework_id,
				       command = PFcommand,
				       container = PFcontainer,
				       resources = PFresources, name = PFname,
				       source = PFsource, data = PFdata,
				       discovery = PFdiscovery,
				       shutdown_grace_period =
					   PFshutdown_grace_period,
				       labels = PFlabels},
		       #'ExecutorInfo'{executor_id = NFexecutor_id,
				       framework_id = NFframework_id,
				       command = NFcommand,
				       container = NFcontainer,
				       resources = NFresources, name = NFname,
				       source = NFsource, data = NFdata,
				       discovery = NFdiscovery,
				       shutdown_grace_period =
					   NFshutdown_grace_period,
				       labels = NFlabels}) ->
    #'ExecutorInfo'{executor_id =
			merge_msg_ExecutorID(PFexecutor_id, NFexecutor_id),
		    framework_id =
			merge_msg_FrameworkID(PFframework_id, NFframework_id),
		    command = merge_msg_CommandInfo(PFcommand, NFcommand),
		    container =
			merge_msg_ContainerInfo(PFcontainer, NFcontainer),
		    resources = 'erlang_++'(PFresources, NFresources),
		    name =
			if NFname =:= undefined -> PFname;
			   true -> NFname
			end,
		    source =
			if NFsource =:= undefined -> PFsource;
			   true -> NFsource
			end,
		    data =
			if NFdata =:= undefined -> PFdata;
			   true -> NFdata
			end,
		    discovery =
			merge_msg_DiscoveryInfo(PFdiscovery, NFdiscovery),
		    shutdown_grace_period =
			merge_msg_DurationInfo(PFshutdown_grace_period,
					       NFshutdown_grace_period),
		    labels = merge_msg_Labels(PFlabels, NFlabels)}.

merge_msg_AgentID(Prev, undefined) -> Prev;
merge_msg_AgentID(undefined, New) -> New;
merge_msg_AgentID(#'AgentID'{value = PFvalue},
		  #'AgentID'{value = NFvalue}) ->
    #'AgentID'{value =
		   if NFvalue =:= undefined -> PFvalue;
		      true -> NFvalue
		   end}.

merge_msg_TaskID(#'TaskID'{value = PFvalue},
		 #'TaskID'{value = NFvalue}) ->
    #'TaskID'{value =
		  if NFvalue =:= undefined -> PFvalue;
		     true -> NFvalue
		  end}.

merge_msg_TaskInfo(#'TaskInfo'{name = PFname,
			       task_id = PFtask_id, agent_id = PFagent_id,
			       resources = PFresources, executor = PFexecutor,
			       command = PFcommand, container = PFcontainer,
			       health_check = PFhealth_check,
			       kill_policy = PFkill_policy, data = PFdata,
			       labels = PFlabels, discovery = PFdiscovery},
		   #'TaskInfo'{name = NFname, task_id = NFtask_id,
			       agent_id = NFagent_id, resources = NFresources,
			       executor = NFexecutor, command = NFcommand,
			       container = NFcontainer,
			       health_check = NFhealth_check,
			       kill_policy = NFkill_policy, data = NFdata,
			       labels = NFlabels, discovery = NFdiscovery}) ->
    #'TaskInfo'{name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		task_id = merge_msg_TaskID(PFtask_id, NFtask_id),
		agent_id = merge_msg_AgentID(PFagent_id, NFagent_id),
		resources = 'erlang_++'(PFresources, NFresources),
		executor =
		    merge_msg_ExecutorInfo(PFexecutor, NFexecutor),
		command = merge_msg_CommandInfo(PFcommand, NFcommand),
		container =
		    merge_msg_ContainerInfo(PFcontainer, NFcontainer),
		health_check =
		    merge_msg_HealthCheck(PFhealth_check, NFhealth_check),
		kill_policy =
		    merge_msg_KillPolicy(PFkill_policy, NFkill_policy),
		data =
		    if NFdata =:= undefined -> PFdata;
		       true -> NFdata
		    end,
		labels = merge_msg_Labels(PFlabels, NFlabels),
		discovery =
		    merge_msg_DiscoveryInfo(PFdiscovery, NFdiscovery)}.

'merge_msg_Offer.Operation.Launch'(Prev, undefined) ->
    Prev;
'merge_msg_Offer.Operation.Launch'(undefined, New) ->
    New;
'merge_msg_Offer.Operation.Launch'(#'Offer.Operation.Launch'{task_infos
								 =
								 PFtask_infos},
				   #'Offer.Operation.Launch'{task_infos =
								 NFtask_infos}) ->
    #'Offer.Operation.Launch'{task_infos =
				  'erlang_++'(PFtask_infos, NFtask_infos)}.

'merge_msg_Offer.Operation'(#'Offer.Operation'{type =
						   PFtype,
					       launch = PFlaunch,
					       reserve = PFreserve,
					       unreserve = PFunreserve,
					       create = PFcreate,
					       destroy = PFdestroy},
			    #'Offer.Operation'{type = NFtype, launch = NFlaunch,
					       reserve = NFreserve,
					       unreserve = NFunreserve,
					       create = NFcreate,
					       destroy = NFdestroy}) ->
    #'Offer.Operation'{type =
			   if NFtype =:= undefined -> PFtype;
			      true -> NFtype
			   end,
		       launch =
			   'merge_msg_Offer.Operation.Launch'(PFlaunch,
							      NFlaunch),
		       reserve =
			   'merge_msg_Offer.Operation.Reserve'(PFreserve,
							       NFreserve),
		       unreserve =
			   'merge_msg_Offer.Operation.Unreserve'(PFunreserve,
								 NFunreserve),
		       create =
			   'merge_msg_Offer.Operation.Create'(PFcreate,
							      NFcreate),
		       destroy =
			   'merge_msg_Offer.Operation.Destroy'(PFdestroy,
							       NFdestroy)}.

merge_msg_Flag(#'Flag'{name = PFname, value = PFvalue},
	       #'Flag'{name = NFname, value = NFvalue}) ->
    #'Flag'{name =
		if NFname =:= undefined -> PFname;
		   true -> NFname
		end,
	    value =
		if NFvalue =:= undefined -> PFvalue;
		   true -> NFvalue
		end}.

'merge_msg_Value.Text'(Prev, undefined) -> Prev;
'merge_msg_Value.Text'(undefined, New) -> New;
'merge_msg_Value.Text'(#'Value.Text'{value = PFvalue},
		       #'Value.Text'{value = NFvalue}) ->
    #'Value.Text'{value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end}.

merge_msg_Value(#'Value'{type = PFtype,
			 scalar = PFscalar, ranges = PFranges, set = PFset,
			 text = PFtext},
		#'Value'{type = NFtype, scalar = NFscalar,
			 ranges = NFranges, set = NFset, text = NFtext}) ->
    #'Value'{type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     scalar = 'merge_msg_Value.Scalar'(PFscalar, NFscalar),
	     ranges = 'merge_msg_Value.Ranges'(PFranges, NFranges),
	     set = 'merge_msg_Value.Set'(PFset, NFset),
	     text = 'merge_msg_Value.Text'(PFtext, NFtext)}.

merge_msg_Request(#'Request'{agent_id = PFagent_id,
			     resources = PFresources},
		  #'Request'{agent_id = NFagent_id,
			     resources = NFresources}) ->
    #'Request'{agent_id =
		   merge_msg_AgentID(PFagent_id, NFagent_id),
	       resources = 'erlang_++'(PFresources, NFresources)}.

merge_msg_ContainerID(#'ContainerID'{value = PFvalue},
		      #'ContainerID'{value = NFvalue}) ->
    #'ContainerID'{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

merge_msg_Metric(#'Metric'{name = PFname,
			   value = PFvalue},
		 #'Metric'{name = NFname, value = NFvalue}) ->
    #'Metric'{name =
		  if NFname =:= undefined -> PFname;
		     true -> NFname
		  end,
	      value =
		  if NFvalue =:= undefined -> PFvalue;
		     true -> NFvalue
		  end}.

'merge_msg_Response.GetFileContents'(Prev, undefined) ->
    Prev;
'merge_msg_Response.GetFileContents'(undefined, New) ->
    New;
'merge_msg_Response.GetFileContents'(#'Response.GetFileContents'{data
								     = PFdata},
				     #'Response.GetFileContents'{data =
								     NFdata}) ->
    #'Response.GetFileContents'{data =
				    'erlang_++'(PFdata, NFdata)}.

'merge_msg_CgroupInfo.NetCls'(Prev, undefined) -> Prev;
'merge_msg_CgroupInfo.NetCls'(undefined, New) -> New;
'merge_msg_CgroupInfo.NetCls'(#'CgroupInfo.NetCls'{classid
						       = PFclassid},
			      #'CgroupInfo.NetCls'{classid = NFclassid}) ->
    #'CgroupInfo.NetCls'{classid =
			     if NFclassid =:= undefined -> PFclassid;
				true -> NFclassid
			     end}.

'merge_msg_Call.GetMetrics'(Prev, undefined) -> Prev;
'merge_msg_Call.GetMetrics'(undefined, New) -> New;
'merge_msg_Call.GetMetrics'(#'Call.GetMetrics'{timeout =
						   PFtimeout},
			    #'Call.GetMetrics'{timeout = NFtimeout}) ->
    #'Call.GetMetrics'{timeout =
			   merge_msg_DurationInfo(PFtimeout, NFtimeout)}.

merge_msg_UdpStatistics(Prev, undefined) -> Prev;
merge_msg_UdpStatistics(undefined, New) -> New;
merge_msg_UdpStatistics(#'UdpStatistics'{'InDatagrams' =
					     PFInDatagrams,
					 'NoPorts' = PFNoPorts,
					 'InErrors' = PFInErrors,
					 'OutDatagrams' = PFOutDatagrams,
					 'RcvbufErrors' = PFRcvbufErrors,
					 'SndbufErrors' = PFSndbufErrors,
					 'InCsumErrors' = PFInCsumErrors,
					 'IgnoredMulti' = PFIgnoredMulti},
			#'UdpStatistics'{'InDatagrams' = NFInDatagrams,
					 'NoPorts' = NFNoPorts,
					 'InErrors' = NFInErrors,
					 'OutDatagrams' = NFOutDatagrams,
					 'RcvbufErrors' = NFRcvbufErrors,
					 'SndbufErrors' = NFSndbufErrors,
					 'InCsumErrors' = NFInCsumErrors,
					 'IgnoredMulti' = NFIgnoredMulti}) ->
    #'UdpStatistics'{'InDatagrams' =
			 if NFInDatagrams =:= undefined -> PFInDatagrams;
			    true -> NFInDatagrams
			 end,
		     'NoPorts' =
			 if NFNoPorts =:= undefined -> PFNoPorts;
			    true -> NFNoPorts
			 end,
		     'InErrors' =
			 if NFInErrors =:= undefined -> PFInErrors;
			    true -> NFInErrors
			 end,
		     'OutDatagrams' =
			 if NFOutDatagrams =:= undefined -> PFOutDatagrams;
			    true -> NFOutDatagrams
			 end,
		     'RcvbufErrors' =
			 if NFRcvbufErrors =:= undefined -> PFRcvbufErrors;
			    true -> NFRcvbufErrors
			 end,
		     'SndbufErrors' =
			 if NFSndbufErrors =:= undefined -> PFSndbufErrors;
			    true -> NFSndbufErrors
			 end,
		     'InCsumErrors' =
			 if NFInCsumErrors =:= undefined -> PFInCsumErrors;
			    true -> NFInCsumErrors
			 end,
		     'IgnoredMulti' =
			 if NFIgnoredMulti =:= undefined -> PFIgnoredMulti;
			    true -> NFIgnoredMulti
			 end}.

merge_msg_TcpStatistics(Prev, undefined) -> Prev;
merge_msg_TcpStatistics(undefined, New) -> New;
merge_msg_TcpStatistics(#'TcpStatistics'{'RtoAlgorithm'
					     = PFRtoAlgorithm,
					 'RtoMin' = PFRtoMin,
					 'RtoMax' = PFRtoMax,
					 'MaxConn' = PFMaxConn,
					 'ActiveOpens' = PFActiveOpens,
					 'PassiveOpens' = PFPassiveOpens,
					 'AttemptFails' = PFAttemptFails,
					 'EstabResets' = PFEstabResets,
					 'CurrEstab' = PFCurrEstab,
					 'InSegs' = PFInSegs,
					 'OutSegs' = PFOutSegs,
					 'RetransSegs' = PFRetransSegs,
					 'InErrs' = PFInErrs,
					 'OutRsts' = PFOutRsts,
					 'InCsumErrors' = PFInCsumErrors},
			#'TcpStatistics'{'RtoAlgorithm' = NFRtoAlgorithm,
					 'RtoMin' = NFRtoMin,
					 'RtoMax' = NFRtoMax,
					 'MaxConn' = NFMaxConn,
					 'ActiveOpens' = NFActiveOpens,
					 'PassiveOpens' = NFPassiveOpens,
					 'AttemptFails' = NFAttemptFails,
					 'EstabResets' = NFEstabResets,
					 'CurrEstab' = NFCurrEstab,
					 'InSegs' = NFInSegs,
					 'OutSegs' = NFOutSegs,
					 'RetransSegs' = NFRetransSegs,
					 'InErrs' = NFInErrs,
					 'OutRsts' = NFOutRsts,
					 'InCsumErrors' = NFInCsumErrors}) ->
    #'TcpStatistics'{'RtoAlgorithm' =
			 if NFRtoAlgorithm =:= undefined -> PFRtoAlgorithm;
			    true -> NFRtoAlgorithm
			 end,
		     'RtoMin' =
			 if NFRtoMin =:= undefined -> PFRtoMin;
			    true -> NFRtoMin
			 end,
		     'RtoMax' =
			 if NFRtoMax =:= undefined -> PFRtoMax;
			    true -> NFRtoMax
			 end,
		     'MaxConn' =
			 if NFMaxConn =:= undefined -> PFMaxConn;
			    true -> NFMaxConn
			 end,
		     'ActiveOpens' =
			 if NFActiveOpens =:= undefined -> PFActiveOpens;
			    true -> NFActiveOpens
			 end,
		     'PassiveOpens' =
			 if NFPassiveOpens =:= undefined -> PFPassiveOpens;
			    true -> NFPassiveOpens
			 end,
		     'AttemptFails' =
			 if NFAttemptFails =:= undefined -> PFAttemptFails;
			    true -> NFAttemptFails
			 end,
		     'EstabResets' =
			 if NFEstabResets =:= undefined -> PFEstabResets;
			    true -> NFEstabResets
			 end,
		     'CurrEstab' =
			 if NFCurrEstab =:= undefined -> PFCurrEstab;
			    true -> NFCurrEstab
			 end,
		     'InSegs' =
			 if NFInSegs =:= undefined -> PFInSegs;
			    true -> NFInSegs
			 end,
		     'OutSegs' =
			 if NFOutSegs =:= undefined -> PFOutSegs;
			    true -> NFOutSegs
			 end,
		     'RetransSegs' =
			 if NFRetransSegs =:= undefined -> PFRetransSegs;
			    true -> NFRetransSegs
			 end,
		     'InErrs' =
			 if NFInErrs =:= undefined -> PFInErrs;
			    true -> NFInErrs
			 end,
		     'OutRsts' =
			 if NFOutRsts =:= undefined -> PFOutRsts;
			    true -> NFOutRsts
			 end,
		     'InCsumErrors' =
			 if NFInCsumErrors =:= undefined -> PFInCsumErrors;
			    true -> NFInCsumErrors
			 end}.

merge_msg_IpStatistics(Prev, undefined) -> Prev;
merge_msg_IpStatistics(undefined, New) -> New;
merge_msg_IpStatistics(#'IpStatistics'{'Forwarding' =
					   PFForwarding,
				       'DefaultTTL' = PFDefaultTTL,
				       'InReceives' = PFInReceives,
				       'InHdrErrors' = PFInHdrErrors,
				       'InAddrErrors' = PFInAddrErrors,
				       'ForwDatagrams' = PFForwDatagrams,
				       'InUnknownProtos' = PFInUnknownProtos,
				       'InDiscards' = PFInDiscards,
				       'InDelivers' = PFInDelivers,
				       'OutRequests' = PFOutRequests,
				       'OutDiscards' = PFOutDiscards,
				       'OutNoRoutes' = PFOutNoRoutes,
				       'ReasmTimeout' = PFReasmTimeout,
				       'ReasmReqds' = PFReasmReqds,
				       'ReasmOKs' = PFReasmOKs,
				       'ReasmFails' = PFReasmFails,
				       'FragOKs' = PFFragOKs,
				       'FragFails' = PFFragFails,
				       'FragCreates' = PFFragCreates},
		       #'IpStatistics'{'Forwarding' = NFForwarding,
				       'DefaultTTL' = NFDefaultTTL,
				       'InReceives' = NFInReceives,
				       'InHdrErrors' = NFInHdrErrors,
				       'InAddrErrors' = NFInAddrErrors,
				       'ForwDatagrams' = NFForwDatagrams,
				       'InUnknownProtos' = NFInUnknownProtos,
				       'InDiscards' = NFInDiscards,
				       'InDelivers' = NFInDelivers,
				       'OutRequests' = NFOutRequests,
				       'OutDiscards' = NFOutDiscards,
				       'OutNoRoutes' = NFOutNoRoutes,
				       'ReasmTimeout' = NFReasmTimeout,
				       'ReasmReqds' = NFReasmReqds,
				       'ReasmOKs' = NFReasmOKs,
				       'ReasmFails' = NFReasmFails,
				       'FragOKs' = NFFragOKs,
				       'FragFails' = NFFragFails,
				       'FragCreates' = NFFragCreates}) ->
    #'IpStatistics'{'Forwarding' =
			if NFForwarding =:= undefined -> PFForwarding;
			   true -> NFForwarding
			end,
		    'DefaultTTL' =
			if NFDefaultTTL =:= undefined -> PFDefaultTTL;
			   true -> NFDefaultTTL
			end,
		    'InReceives' =
			if NFInReceives =:= undefined -> PFInReceives;
			   true -> NFInReceives
			end,
		    'InHdrErrors' =
			if NFInHdrErrors =:= undefined -> PFInHdrErrors;
			   true -> NFInHdrErrors
			end,
		    'InAddrErrors' =
			if NFInAddrErrors =:= undefined -> PFInAddrErrors;
			   true -> NFInAddrErrors
			end,
		    'ForwDatagrams' =
			if NFForwDatagrams =:= undefined -> PFForwDatagrams;
			   true -> NFForwDatagrams
			end,
		    'InUnknownProtos' =
			if NFInUnknownProtos =:= undefined -> PFInUnknownProtos;
			   true -> NFInUnknownProtos
			end,
		    'InDiscards' =
			if NFInDiscards =:= undefined -> PFInDiscards;
			   true -> NFInDiscards
			end,
		    'InDelivers' =
			if NFInDelivers =:= undefined -> PFInDelivers;
			   true -> NFInDelivers
			end,
		    'OutRequests' =
			if NFOutRequests =:= undefined -> PFOutRequests;
			   true -> NFOutRequests
			end,
		    'OutDiscards' =
			if NFOutDiscards =:= undefined -> PFOutDiscards;
			   true -> NFOutDiscards
			end,
		    'OutNoRoutes' =
			if NFOutNoRoutes =:= undefined -> PFOutNoRoutes;
			   true -> NFOutNoRoutes
			end,
		    'ReasmTimeout' =
			if NFReasmTimeout =:= undefined -> PFReasmTimeout;
			   true -> NFReasmTimeout
			end,
		    'ReasmReqds' =
			if NFReasmReqds =:= undefined -> PFReasmReqds;
			   true -> NFReasmReqds
			end,
		    'ReasmOKs' =
			if NFReasmOKs =:= undefined -> PFReasmOKs;
			   true -> NFReasmOKs
			end,
		    'ReasmFails' =
			if NFReasmFails =:= undefined -> PFReasmFails;
			   true -> NFReasmFails
			end,
		    'FragOKs' =
			if NFFragOKs =:= undefined -> PFFragOKs;
			   true -> NFFragOKs
			end,
		    'FragFails' =
			if NFFragFails =:= undefined -> PFFragFails;
			   true -> NFFragFails
			end,
		    'FragCreates' =
			if NFFragCreates =:= undefined -> PFFragCreates;
			   true -> NFFragCreates
			end}.

'merge_msg_Response.GetMetrics'(Prev, undefined) ->
    Prev;
'merge_msg_Response.GetMetrics'(undefined, New) -> New;
'merge_msg_Response.GetMetrics'(#'Response.GetMetrics'{metrics
							   = PFmetrics},
				#'Response.GetMetrics'{metrics = NFmetrics}) ->
    #'Response.GetMetrics'{metrics =
			       'erlang_++'(PFmetrics, NFmetrics)}.

merge_msg_VersionInfo(#'VersionInfo'{version =
					 PFversion,
				     build_date = PFbuild_date,
				     build_time = PFbuild_time,
				     build_user = PFbuild_user,
				     git_sha = PFgit_sha,
				     git_branch = PFgit_branch,
				     git_tag = PFgit_tag},
		      #'VersionInfo'{version = NFversion,
				     build_date = NFbuild_date,
				     build_time = NFbuild_time,
				     build_user = NFbuild_user,
				     git_sha = NFgit_sha,
				     git_branch = NFgit_branch,
				     git_tag = NFgit_tag}) ->
    #'VersionInfo'{version =
		       if NFversion =:= undefined -> PFversion;
			  true -> NFversion
		       end,
		   build_date =
		       if NFbuild_date =:= undefined -> PFbuild_date;
			  true -> NFbuild_date
		       end,
		   build_time =
		       if NFbuild_time =:= undefined -> PFbuild_time;
			  true -> NFbuild_time
		       end,
		   build_user =
		       if NFbuild_user =:= undefined -> PFbuild_user;
			  true -> NFbuild_user
		       end,
		   git_sha =
		       if NFgit_sha =:= undefined -> PFgit_sha;
			  true -> NFgit_sha
		       end,
		   git_branch =
		       if NFgit_branch =:= undefined -> PFgit_branch;
			  true -> NFgit_branch
		       end,
		   git_tag =
		       if NFgit_tag =:= undefined -> PFgit_tag;
			  true -> NFgit_tag
		       end}.

merge_msg_Address(Prev, undefined) -> Prev;
merge_msg_Address(undefined, New) -> New;
merge_msg_Address(#'Address'{hostname = PFhostname,
			     ip = PFip, port = PFport},
		  #'Address'{hostname = NFhostname, ip = NFip,
			     port = NFport}) ->
    #'Address'{hostname =
		   if NFhostname =:= undefined -> PFhostname;
		      true -> NFhostname
		   end,
	       ip =
		   if NFip =:= undefined -> PFip;
		      true -> NFip
		   end,
	       port =
		   if NFport =:= undefined -> PFport;
		      true -> NFport
		   end}.

merge_msg_MasterInfo(#'MasterInfo'{id = PFid, ip = PFip,
				   port = PFport, pid = PFpid,
				   hostname = PFhostname, version = PFversion,
				   address = PFaddress},
		     #'MasterInfo'{id = NFid, ip = NFip, port = NFport,
				   pid = NFpid, hostname = NFhostname,
				   version = NFversion, address = NFaddress}) ->
    #'MasterInfo'{id =
		      if NFid =:= undefined -> PFid;
			 true -> NFid
		      end,
		  ip =
		      if NFip =:= undefined -> PFip;
			 true -> NFip
		      end,
		  port =
		      if NFport =:= undefined -> PFport;
			 true -> NFport
		      end,
		  pid =
		      if NFpid =:= undefined -> PFpid;
			 true -> NFpid
		      end,
		  hostname =
		      if NFhostname =:= undefined -> PFhostname;
			 true -> NFhostname
		      end,
		  version =
		      if NFversion =:= undefined -> PFversion;
			 true -> NFversion
		      end,
		  address = merge_msg_Address(PFaddress, NFaddress)}.

'merge_msg_FrameworkInfo.Capability'(#'FrameworkInfo.Capability'{type
								     = PFtype},
				     #'FrameworkInfo.Capability'{type =
								     NFtype}) ->
    #'FrameworkInfo.Capability'{type =
				    if NFtype =:= undefined -> PFtype;
				       true -> NFtype
				    end}.

merge_msg_FrameworkInfo(#'FrameworkInfo'{user = PFuser,
					 name = PFname, id = PFid,
					 failover_timeout = PFfailover_timeout,
					 checkpoint = PFcheckpoint,
					 role = PFrole, hostname = PFhostname,
					 principal = PFprincipal,
					 webui_url = PFwebui_url,
					 capabilities = PFcapabilities,
					 labels = PFlabels},
			#'FrameworkInfo'{user = NFuser, name = NFname,
					 id = NFid,
					 failover_timeout = NFfailover_timeout,
					 checkpoint = NFcheckpoint,
					 role = NFrole, hostname = NFhostname,
					 principal = NFprincipal,
					 webui_url = NFwebui_url,
					 capabilities = NFcapabilities,
					 labels = NFlabels}) ->
    #'FrameworkInfo'{user =
			 if NFuser =:= undefined -> PFuser;
			    true -> NFuser
			 end,
		     name =
			 if NFname =:= undefined -> PFname;
			    true -> NFname
			 end,
		     id = merge_msg_FrameworkID(PFid, NFid),
		     failover_timeout =
			 if NFfailover_timeout =:= undefined ->
				PFfailover_timeout;
			    true -> NFfailover_timeout
			 end,
		     checkpoint =
			 if NFcheckpoint =:= undefined -> PFcheckpoint;
			    true -> NFcheckpoint
			 end,
		     role =
			 if NFrole =:= undefined -> PFrole;
			    true -> NFrole
			 end,
		     hostname =
			 if NFhostname =:= undefined -> PFhostname;
			    true -> NFhostname
			 end,
		     principal =
			 if NFprincipal =:= undefined -> PFprincipal;
			    true -> NFprincipal
			 end,
		     webui_url =
			 if NFwebui_url =:= undefined -> PFwebui_url;
			    true -> NFwebui_url
			 end,
		     capabilities =
			 'erlang_++'(PFcapabilities, NFcapabilities),
		     labels = merge_msg_Labels(PFlabels, NFlabels)}.

merge_msg_URL(Prev, undefined) -> Prev;
merge_msg_URL(undefined, New) -> New;
merge_msg_URL(#'URL'{scheme = PFscheme,
		     address = PFaddress, path = PFpath, query = PFquery,
		     fragment = PFfragment},
	      #'URL'{scheme = NFscheme, address = NFaddress,
		     path = NFpath, query = NFquery,
		     fragment = NFfragment}) ->
    #'URL'{scheme =
	       if NFscheme =:= undefined -> PFscheme;
		  true -> NFscheme
	       end,
	   address = merge_msg_Address(PFaddress, NFaddress),
	   path =
	       if NFpath =:= undefined -> PFpath;
		  true -> NFpath
	       end,
	   query = 'erlang_++'(PFquery, NFquery),
	   fragment =
	       if NFfragment =:= undefined -> PFfragment;
		  true -> NFfragment
	       end}.

'merge_msg_Call.ReadFile'(Prev, undefined) -> Prev;
'merge_msg_Call.ReadFile'(undefined, New) -> New;
'merge_msg_Call.ReadFile'(#'Call.ReadFile'{path =
					       PFpath,
					   offset = PFoffset,
					   length = PFlength},
			  #'Call.ReadFile'{path = NFpath, offset = NFoffset,
					   length = NFlength}) ->
    #'Call.ReadFile'{path =
			 if NFpath =:= undefined -> PFpath;
			    true -> NFpath
			 end,
		     offset =
			 if NFoffset =:= undefined -> PFoffset;
			    true -> NFoffset
			 end,
		     length =
			 if NFlength =:= undefined -> PFlength;
			    true -> NFlength
			 end}.

'merge_msg_Call.ListFiles'(Prev, undefined) -> Prev;
'merge_msg_Call.ListFiles'(undefined, New) -> New;
'merge_msg_Call.ListFiles'(#'Call.ListFiles'{path =
						 PFpath},
			   #'Call.ListFiles'{path = NFpath}) ->
    #'Call.ListFiles'{path =
			  if NFpath =:= undefined -> PFpath;
			     true -> NFpath
			  end}.

'merge_msg_Call.SetLoggingLevel'(Prev, undefined) ->
    Prev;
'merge_msg_Call.SetLoggingLevel'(undefined, New) -> New;
'merge_msg_Call.SetLoggingLevel'(#'Call.SetLoggingLevel'{level
							     = PFlevel,
							 duration = PFduration},
				 #'Call.SetLoggingLevel'{level = NFlevel,
							 duration =
							     NFduration}) ->
    #'Call.SetLoggingLevel'{level =
				if NFlevel =:= undefined -> PFlevel;
				   true -> NFlevel
				end,
			    duration =
				merge_msg_DurationInfo(PFduration, NFduration)}.

merge_msg_Call(#'Call'{type = PFtype,
		       get_metrics = PFget_metrics,
		       set_logging_level = PFset_logging_level,
		       list_files = PFlist_files, read_file = PFread_file},
	       #'Call'{type = NFtype, get_metrics = NFget_metrics,
		       set_logging_level = NFset_logging_level,
		       list_files = NFlist_files, read_file = NFread_file}) ->
    #'Call'{type =
		if NFtype =:= undefined -> PFtype;
		   true -> NFtype
		end,
	    get_metrics =
		'merge_msg_Call.GetMetrics'(PFget_metrics,
					    NFget_metrics),
	    set_logging_level =
		'merge_msg_Call.SetLoggingLevel'(PFset_logging_level,
						 NFset_logging_level),
	    list_files =
		'merge_msg_Call.ListFiles'(PFlist_files, NFlist_files),
	    read_file =
		'merge_msg_Call.ReadFile'(PFread_file, NFread_file)}.

'merge_msg_ResourceUsage.Executor.Task'(#'ResourceUsage.Executor.Task'{name
									   =
									   PFname,
								       id =
									   PFid,
								       resources
									   =
									   PFresources,
								       labels =
									   PFlabels},
					#'ResourceUsage.Executor.Task'{name =
									   NFname,
								       id =
									   NFid,
								       resources
									   =
									   NFresources,
								       labels =
									   NFlabels}) ->
    #'ResourceUsage.Executor.Task'{name =
				       if NFname =:= undefined -> PFname;
					  true -> NFname
				       end,
				   id = merge_msg_TaskID(PFid, NFid),
				   resources =
				       'erlang_++'(PFresources, NFresources),
				   labels =
				       merge_msg_Labels(PFlabels, NFlabels)}.

merge_msg_Role(#'Role'{name = PFname, weight = PFweight,
		       frameworks = PFframeworks, resources = PFresources},
	       #'Role'{name = NFname, weight = NFweight,
		       frameworks = NFframeworks, resources = NFresources}) ->
    #'Role'{name =
		if NFname =:= undefined -> PFname;
		   true -> NFname
		end,
	    weight =
		if NFweight =:= undefined -> PFweight;
		   true -> NFweight
		end,
	    frameworks = 'erlang_++'(PFframeworks, NFframeworks),
	    resources = 'erlang_++'(PFresources, NFresources)}.

merge_msg_IcmpStatistics(Prev, undefined) -> Prev;
merge_msg_IcmpStatistics(undefined, New) -> New;
merge_msg_IcmpStatistics(#'IcmpStatistics'{'InMsgs' =
					       PFInMsgs,
					   'InErrors' = PFInErrors,
					   'InCsumErrors' = PFInCsumErrors,
					   'InDestUnreachs' = PFInDestUnreachs,
					   'InTimeExcds' = PFInTimeExcds,
					   'InParmProbs' = PFInParmProbs,
					   'InSrcQuenchs' = PFInSrcQuenchs,
					   'InRedirects' = PFInRedirects,
					   'InEchos' = PFInEchos,
					   'InEchoReps' = PFInEchoReps,
					   'InTimestamps' = PFInTimestamps,
					   'InTimestampReps' =
					       PFInTimestampReps,
					   'InAddrMasks' = PFInAddrMasks,
					   'InAddrMaskReps' = PFInAddrMaskReps,
					   'OutMsgs' = PFOutMsgs,
					   'OutErrors' = PFOutErrors,
					   'OutDestUnreachs' =
					       PFOutDestUnreachs,
					   'OutTimeExcds' = PFOutTimeExcds,
					   'OutParmProbs' = PFOutParmProbs,
					   'OutSrcQuenchs' = PFOutSrcQuenchs,
					   'OutRedirects' = PFOutRedirects,
					   'OutEchos' = PFOutEchos,
					   'OutEchoReps' = PFOutEchoReps,
					   'OutTimestamps' = PFOutTimestamps,
					   'OutTimestampReps' =
					       PFOutTimestampReps,
					   'OutAddrMasks' = PFOutAddrMasks,
					   'OutAddrMaskReps' =
					       PFOutAddrMaskReps},
			 #'IcmpStatistics'{'InMsgs' = NFInMsgs,
					   'InErrors' = NFInErrors,
					   'InCsumErrors' = NFInCsumErrors,
					   'InDestUnreachs' = NFInDestUnreachs,
					   'InTimeExcds' = NFInTimeExcds,
					   'InParmProbs' = NFInParmProbs,
					   'InSrcQuenchs' = NFInSrcQuenchs,
					   'InRedirects' = NFInRedirects,
					   'InEchos' = NFInEchos,
					   'InEchoReps' = NFInEchoReps,
					   'InTimestamps' = NFInTimestamps,
					   'InTimestampReps' =
					       NFInTimestampReps,
					   'InAddrMasks' = NFInAddrMasks,
					   'InAddrMaskReps' = NFInAddrMaskReps,
					   'OutMsgs' = NFOutMsgs,
					   'OutErrors' = NFOutErrors,
					   'OutDestUnreachs' =
					       NFOutDestUnreachs,
					   'OutTimeExcds' = NFOutTimeExcds,
					   'OutParmProbs' = NFOutParmProbs,
					   'OutSrcQuenchs' = NFOutSrcQuenchs,
					   'OutRedirects' = NFOutRedirects,
					   'OutEchos' = NFOutEchos,
					   'OutEchoReps' = NFOutEchoReps,
					   'OutTimestamps' = NFOutTimestamps,
					   'OutTimestampReps' =
					       NFOutTimestampReps,
					   'OutAddrMasks' = NFOutAddrMasks,
					   'OutAddrMaskReps' =
					       NFOutAddrMaskReps}) ->
    #'IcmpStatistics'{'InMsgs' =
			  if NFInMsgs =:= undefined -> PFInMsgs;
			     true -> NFInMsgs
			  end,
		      'InErrors' =
			  if NFInErrors =:= undefined -> PFInErrors;
			     true -> NFInErrors
			  end,
		      'InCsumErrors' =
			  if NFInCsumErrors =:= undefined -> PFInCsumErrors;
			     true -> NFInCsumErrors
			  end,
		      'InDestUnreachs' =
			  if NFInDestUnreachs =:= undefined -> PFInDestUnreachs;
			     true -> NFInDestUnreachs
			  end,
		      'InTimeExcds' =
			  if NFInTimeExcds =:= undefined -> PFInTimeExcds;
			     true -> NFInTimeExcds
			  end,
		      'InParmProbs' =
			  if NFInParmProbs =:= undefined -> PFInParmProbs;
			     true -> NFInParmProbs
			  end,
		      'InSrcQuenchs' =
			  if NFInSrcQuenchs =:= undefined -> PFInSrcQuenchs;
			     true -> NFInSrcQuenchs
			  end,
		      'InRedirects' =
			  if NFInRedirects =:= undefined -> PFInRedirects;
			     true -> NFInRedirects
			  end,
		      'InEchos' =
			  if NFInEchos =:= undefined -> PFInEchos;
			     true -> NFInEchos
			  end,
		      'InEchoReps' =
			  if NFInEchoReps =:= undefined -> PFInEchoReps;
			     true -> NFInEchoReps
			  end,
		      'InTimestamps' =
			  if NFInTimestamps =:= undefined -> PFInTimestamps;
			     true -> NFInTimestamps
			  end,
		      'InTimestampReps' =
			  if NFInTimestampReps =:= undefined ->
				 PFInTimestampReps;
			     true -> NFInTimestampReps
			  end,
		      'InAddrMasks' =
			  if NFInAddrMasks =:= undefined -> PFInAddrMasks;
			     true -> NFInAddrMasks
			  end,
		      'InAddrMaskReps' =
			  if NFInAddrMaskReps =:= undefined -> PFInAddrMaskReps;
			     true -> NFInAddrMaskReps
			  end,
		      'OutMsgs' =
			  if NFOutMsgs =:= undefined -> PFOutMsgs;
			     true -> NFOutMsgs
			  end,
		      'OutErrors' =
			  if NFOutErrors =:= undefined -> PFOutErrors;
			     true -> NFOutErrors
			  end,
		      'OutDestUnreachs' =
			  if NFOutDestUnreachs =:= undefined ->
				 PFOutDestUnreachs;
			     true -> NFOutDestUnreachs
			  end,
		      'OutTimeExcds' =
			  if NFOutTimeExcds =:= undefined -> PFOutTimeExcds;
			     true -> NFOutTimeExcds
			  end,
		      'OutParmProbs' =
			  if NFOutParmProbs =:= undefined -> PFOutParmProbs;
			     true -> NFOutParmProbs
			  end,
		      'OutSrcQuenchs' =
			  if NFOutSrcQuenchs =:= undefined -> PFOutSrcQuenchs;
			     true -> NFOutSrcQuenchs
			  end,
		      'OutRedirects' =
			  if NFOutRedirects =:= undefined -> PFOutRedirects;
			     true -> NFOutRedirects
			  end,
		      'OutEchos' =
			  if NFOutEchos =:= undefined -> PFOutEchos;
			     true -> NFOutEchos
			  end,
		      'OutEchoReps' =
			  if NFOutEchoReps =:= undefined -> PFOutEchoReps;
			     true -> NFOutEchoReps
			  end,
		      'OutTimestamps' =
			  if NFOutTimestamps =:= undefined -> PFOutTimestamps;
			     true -> NFOutTimestamps
			  end,
		      'OutTimestampReps' =
			  if NFOutTimestampReps =:= undefined ->
				 PFOutTimestampReps;
			     true -> NFOutTimestampReps
			  end,
		      'OutAddrMasks' =
			  if NFOutAddrMasks =:= undefined -> PFOutAddrMasks;
			     true -> NFOutAddrMasks
			  end,
		      'OutAddrMaskReps' =
			  if NFOutAddrMaskReps =:= undefined ->
				 PFOutAddrMaskReps;
			     true -> NFOutAddrMaskReps
			  end}.

merge_msg_SNMPStatistics(Prev, undefined) -> Prev;
merge_msg_SNMPStatistics(undefined, New) -> New;
merge_msg_SNMPStatistics(#'SNMPStatistics'{ip_stats =
					       PFip_stats,
					   icmp_stats = PFicmp_stats,
					   tcp_stats = PFtcp_stats,
					   udp_stats = PFudp_stats},
			 #'SNMPStatistics'{ip_stats = NFip_stats,
					   icmp_stats = NFicmp_stats,
					   tcp_stats = NFtcp_stats,
					   udp_stats = NFudp_stats}) ->
    #'SNMPStatistics'{ip_stats =
			  merge_msg_IpStatistics(PFip_stats, NFip_stats),
		      icmp_stats =
			  merge_msg_IcmpStatistics(PFicmp_stats, NFicmp_stats),
		      tcp_stats =
			  merge_msg_TcpStatistics(PFtcp_stats, NFtcp_stats),
		      udp_stats =
			  merge_msg_UdpStatistics(PFudp_stats, NFudp_stats)}.

merge_msg_TrafficControlStatistics(#'TrafficControlStatistics'{id
								   = PFid,
							       backlog =
								   PFbacklog,
							       bytes = PFbytes,
							       drops = PFdrops,
							       overlimits =
								   PFoverlimits,
							       packets =
								   PFpackets,
							       qlen = PFqlen,
							       ratebps =
								   PFratebps,
							       ratepps =
								   PFratepps,
							       requeues =
								   PFrequeues},
				   #'TrafficControlStatistics'{id = NFid,
							       backlog =
								   NFbacklog,
							       bytes = NFbytes,
							       drops = NFdrops,
							       overlimits =
								   NFoverlimits,
							       packets =
								   NFpackets,
							       qlen = NFqlen,
							       ratebps =
								   NFratebps,
							       ratepps =
								   NFratepps,
							       requeues =
								   NFrequeues}) ->
    #'TrafficControlStatistics'{id =
				    if NFid =:= undefined -> PFid;
				       true -> NFid
				    end,
				backlog =
				    if NFbacklog =:= undefined -> PFbacklog;
				       true -> NFbacklog
				    end,
				bytes =
				    if NFbytes =:= undefined -> PFbytes;
				       true -> NFbytes
				    end,
				drops =
				    if NFdrops =:= undefined -> PFdrops;
				       true -> NFdrops
				    end,
				overlimits =
				    if NFoverlimits =:= undefined ->
					   PFoverlimits;
				       true -> NFoverlimits
				    end,
				packets =
				    if NFpackets =:= undefined -> PFpackets;
				       true -> NFpackets
				    end,
				qlen =
				    if NFqlen =:= undefined -> PFqlen;
				       true -> NFqlen
				    end,
				ratebps =
				    if NFratebps =:= undefined -> PFratebps;
				       true -> NFratebps
				    end,
				ratepps =
				    if NFratepps =:= undefined -> PFratepps;
				       true -> NFratepps
				    end,
				requeues =
				    if NFrequeues =:= undefined -> PFrequeues;
				       true -> NFrequeues
				    end}.

merge_msg_PerfStatistics(Prev, undefined) -> Prev;
merge_msg_PerfStatistics(undefined, New) -> New;
merge_msg_PerfStatistics(#'PerfStatistics'{timestamp =
					       PFtimestamp,
					   duration = PFduration,
					   cycles = PFcycles,
					   stalled_cycles_frontend =
					       PFstalled_cycles_frontend,
					   stalled_cycles_backend =
					       PFstalled_cycles_backend,
					   instructions = PFinstructions,
					   cache_references =
					       PFcache_references,
					   cache_misses = PFcache_misses,
					   branches = PFbranches,
					   branch_misses = PFbranch_misses,
					   bus_cycles = PFbus_cycles,
					   ref_cycles = PFref_cycles,
					   cpu_clock = PFcpu_clock,
					   task_clock = PFtask_clock,
					   page_faults = PFpage_faults,
					   minor_faults = PFminor_faults,
					   major_faults = PFmajor_faults,
					   context_switches =
					       PFcontext_switches,
					   cpu_migrations = PFcpu_migrations,
					   alignment_faults =
					       PFalignment_faults,
					   emulation_faults =
					       PFemulation_faults,
					   l1_dcache_loads = PFl1_dcache_loads,
					   l1_dcache_load_misses =
					       PFl1_dcache_load_misses,
					   l1_dcache_stores =
					       PFl1_dcache_stores,
					   l1_dcache_store_misses =
					       PFl1_dcache_store_misses,
					   l1_dcache_prefetches =
					       PFl1_dcache_prefetches,
					   l1_dcache_prefetch_misses =
					       PFl1_dcache_prefetch_misses,
					   l1_icache_loads = PFl1_icache_loads,
					   l1_icache_load_misses =
					       PFl1_icache_load_misses,
					   l1_icache_prefetches =
					       PFl1_icache_prefetches,
					   l1_icache_prefetch_misses =
					       PFl1_icache_prefetch_misses,
					   llc_loads = PFllc_loads,
					   llc_load_misses = PFllc_load_misses,
					   llc_stores = PFllc_stores,
					   llc_store_misses =
					       PFllc_store_misses,
					   llc_prefetches = PFllc_prefetches,
					   llc_prefetch_misses =
					       PFllc_prefetch_misses,
					   dtlb_loads = PFdtlb_loads,
					   dtlb_load_misses =
					       PFdtlb_load_misses,
					   dtlb_stores = PFdtlb_stores,
					   dtlb_store_misses =
					       PFdtlb_store_misses,
					   dtlb_prefetches = PFdtlb_prefetches,
					   dtlb_prefetch_misses =
					       PFdtlb_prefetch_misses,
					   itlb_loads = PFitlb_loads,
					   itlb_load_misses =
					       PFitlb_load_misses,
					   branch_loads = PFbranch_loads,
					   branch_load_misses =
					       PFbranch_load_misses,
					   node_loads = PFnode_loads,
					   node_load_misses =
					       PFnode_load_misses,
					   node_stores = PFnode_stores,
					   node_store_misses =
					       PFnode_store_misses,
					   node_prefetches = PFnode_prefetches,
					   node_prefetch_misses =
					       PFnode_prefetch_misses},
			 #'PerfStatistics'{timestamp = NFtimestamp,
					   duration = NFduration,
					   cycles = NFcycles,
					   stalled_cycles_frontend =
					       NFstalled_cycles_frontend,
					   stalled_cycles_backend =
					       NFstalled_cycles_backend,
					   instructions = NFinstructions,
					   cache_references =
					       NFcache_references,
					   cache_misses = NFcache_misses,
					   branches = NFbranches,
					   branch_misses = NFbranch_misses,
					   bus_cycles = NFbus_cycles,
					   ref_cycles = NFref_cycles,
					   cpu_clock = NFcpu_clock,
					   task_clock = NFtask_clock,
					   page_faults = NFpage_faults,
					   minor_faults = NFminor_faults,
					   major_faults = NFmajor_faults,
					   context_switches =
					       NFcontext_switches,
					   cpu_migrations = NFcpu_migrations,
					   alignment_faults =
					       NFalignment_faults,
					   emulation_faults =
					       NFemulation_faults,
					   l1_dcache_loads = NFl1_dcache_loads,
					   l1_dcache_load_misses =
					       NFl1_dcache_load_misses,
					   l1_dcache_stores =
					       NFl1_dcache_stores,
					   l1_dcache_store_misses =
					       NFl1_dcache_store_misses,
					   l1_dcache_prefetches =
					       NFl1_dcache_prefetches,
					   l1_dcache_prefetch_misses =
					       NFl1_dcache_prefetch_misses,
					   l1_icache_loads = NFl1_icache_loads,
					   l1_icache_load_misses =
					       NFl1_icache_load_misses,
					   l1_icache_prefetches =
					       NFl1_icache_prefetches,
					   l1_icache_prefetch_misses =
					       NFl1_icache_prefetch_misses,
					   llc_loads = NFllc_loads,
					   llc_load_misses = NFllc_load_misses,
					   llc_stores = NFllc_stores,
					   llc_store_misses =
					       NFllc_store_misses,
					   llc_prefetches = NFllc_prefetches,
					   llc_prefetch_misses =
					       NFllc_prefetch_misses,
					   dtlb_loads = NFdtlb_loads,
					   dtlb_load_misses =
					       NFdtlb_load_misses,
					   dtlb_stores = NFdtlb_stores,
					   dtlb_store_misses =
					       NFdtlb_store_misses,
					   dtlb_prefetches = NFdtlb_prefetches,
					   dtlb_prefetch_misses =
					       NFdtlb_prefetch_misses,
					   itlb_loads = NFitlb_loads,
					   itlb_load_misses =
					       NFitlb_load_misses,
					   branch_loads = NFbranch_loads,
					   branch_load_misses =
					       NFbranch_load_misses,
					   node_loads = NFnode_loads,
					   node_load_misses =
					       NFnode_load_misses,
					   node_stores = NFnode_stores,
					   node_store_misses =
					       NFnode_store_misses,
					   node_prefetches = NFnode_prefetches,
					   node_prefetch_misses =
					       NFnode_prefetch_misses}) ->
    #'PerfStatistics'{timestamp =
			  if NFtimestamp =:= undefined -> PFtimestamp;
			     true -> NFtimestamp
			  end,
		      duration =
			  if NFduration =:= undefined -> PFduration;
			     true -> NFduration
			  end,
		      cycles =
			  if NFcycles =:= undefined -> PFcycles;
			     true -> NFcycles
			  end,
		      stalled_cycles_frontend =
			  if NFstalled_cycles_frontend =:= undefined ->
				 PFstalled_cycles_frontend;
			     true -> NFstalled_cycles_frontend
			  end,
		      stalled_cycles_backend =
			  if NFstalled_cycles_backend =:= undefined ->
				 PFstalled_cycles_backend;
			     true -> NFstalled_cycles_backend
			  end,
		      instructions =
			  if NFinstructions =:= undefined -> PFinstructions;
			     true -> NFinstructions
			  end,
		      cache_references =
			  if NFcache_references =:= undefined ->
				 PFcache_references;
			     true -> NFcache_references
			  end,
		      cache_misses =
			  if NFcache_misses =:= undefined -> PFcache_misses;
			     true -> NFcache_misses
			  end,
		      branches =
			  if NFbranches =:= undefined -> PFbranches;
			     true -> NFbranches
			  end,
		      branch_misses =
			  if NFbranch_misses =:= undefined -> PFbranch_misses;
			     true -> NFbranch_misses
			  end,
		      bus_cycles =
			  if NFbus_cycles =:= undefined -> PFbus_cycles;
			     true -> NFbus_cycles
			  end,
		      ref_cycles =
			  if NFref_cycles =:= undefined -> PFref_cycles;
			     true -> NFref_cycles
			  end,
		      cpu_clock =
			  if NFcpu_clock =:= undefined -> PFcpu_clock;
			     true -> NFcpu_clock
			  end,
		      task_clock =
			  if NFtask_clock =:= undefined -> PFtask_clock;
			     true -> NFtask_clock
			  end,
		      page_faults =
			  if NFpage_faults =:= undefined -> PFpage_faults;
			     true -> NFpage_faults
			  end,
		      minor_faults =
			  if NFminor_faults =:= undefined -> PFminor_faults;
			     true -> NFminor_faults
			  end,
		      major_faults =
			  if NFmajor_faults =:= undefined -> PFmajor_faults;
			     true -> NFmajor_faults
			  end,
		      context_switches =
			  if NFcontext_switches =:= undefined ->
				 PFcontext_switches;
			     true -> NFcontext_switches
			  end,
		      cpu_migrations =
			  if NFcpu_migrations =:= undefined -> PFcpu_migrations;
			     true -> NFcpu_migrations
			  end,
		      alignment_faults =
			  if NFalignment_faults =:= undefined ->
				 PFalignment_faults;
			     true -> NFalignment_faults
			  end,
		      emulation_faults =
			  if NFemulation_faults =:= undefined ->
				 PFemulation_faults;
			     true -> NFemulation_faults
			  end,
		      l1_dcache_loads =
			  if NFl1_dcache_loads =:= undefined ->
				 PFl1_dcache_loads;
			     true -> NFl1_dcache_loads
			  end,
		      l1_dcache_load_misses =
			  if NFl1_dcache_load_misses =:= undefined ->
				 PFl1_dcache_load_misses;
			     true -> NFl1_dcache_load_misses
			  end,
		      l1_dcache_stores =
			  if NFl1_dcache_stores =:= undefined ->
				 PFl1_dcache_stores;
			     true -> NFl1_dcache_stores
			  end,
		      l1_dcache_store_misses =
			  if NFl1_dcache_store_misses =:= undefined ->
				 PFl1_dcache_store_misses;
			     true -> NFl1_dcache_store_misses
			  end,
		      l1_dcache_prefetches =
			  if NFl1_dcache_prefetches =:= undefined ->
				 PFl1_dcache_prefetches;
			     true -> NFl1_dcache_prefetches
			  end,
		      l1_dcache_prefetch_misses =
			  if NFl1_dcache_prefetch_misses =:= undefined ->
				 PFl1_dcache_prefetch_misses;
			     true -> NFl1_dcache_prefetch_misses
			  end,
		      l1_icache_loads =
			  if NFl1_icache_loads =:= undefined ->
				 PFl1_icache_loads;
			     true -> NFl1_icache_loads
			  end,
		      l1_icache_load_misses =
			  if NFl1_icache_load_misses =:= undefined ->
				 PFl1_icache_load_misses;
			     true -> NFl1_icache_load_misses
			  end,
		      l1_icache_prefetches =
			  if NFl1_icache_prefetches =:= undefined ->
				 PFl1_icache_prefetches;
			     true -> NFl1_icache_prefetches
			  end,
		      l1_icache_prefetch_misses =
			  if NFl1_icache_prefetch_misses =:= undefined ->
				 PFl1_icache_prefetch_misses;
			     true -> NFl1_icache_prefetch_misses
			  end,
		      llc_loads =
			  if NFllc_loads =:= undefined -> PFllc_loads;
			     true -> NFllc_loads
			  end,
		      llc_load_misses =
			  if NFllc_load_misses =:= undefined ->
				 PFllc_load_misses;
			     true -> NFllc_load_misses
			  end,
		      llc_stores =
			  if NFllc_stores =:= undefined -> PFllc_stores;
			     true -> NFllc_stores
			  end,
		      llc_store_misses =
			  if NFllc_store_misses =:= undefined ->
				 PFllc_store_misses;
			     true -> NFllc_store_misses
			  end,
		      llc_prefetches =
			  if NFllc_prefetches =:= undefined -> PFllc_prefetches;
			     true -> NFllc_prefetches
			  end,
		      llc_prefetch_misses =
			  if NFllc_prefetch_misses =:= undefined ->
				 PFllc_prefetch_misses;
			     true -> NFllc_prefetch_misses
			  end,
		      dtlb_loads =
			  if NFdtlb_loads =:= undefined -> PFdtlb_loads;
			     true -> NFdtlb_loads
			  end,
		      dtlb_load_misses =
			  if NFdtlb_load_misses =:= undefined ->
				 PFdtlb_load_misses;
			     true -> NFdtlb_load_misses
			  end,
		      dtlb_stores =
			  if NFdtlb_stores =:= undefined -> PFdtlb_stores;
			     true -> NFdtlb_stores
			  end,
		      dtlb_store_misses =
			  if NFdtlb_store_misses =:= undefined ->
				 PFdtlb_store_misses;
			     true -> NFdtlb_store_misses
			  end,
		      dtlb_prefetches =
			  if NFdtlb_prefetches =:= undefined ->
				 PFdtlb_prefetches;
			     true -> NFdtlb_prefetches
			  end,
		      dtlb_prefetch_misses =
			  if NFdtlb_prefetch_misses =:= undefined ->
				 PFdtlb_prefetch_misses;
			     true -> NFdtlb_prefetch_misses
			  end,
		      itlb_loads =
			  if NFitlb_loads =:= undefined -> PFitlb_loads;
			     true -> NFitlb_loads
			  end,
		      itlb_load_misses =
			  if NFitlb_load_misses =:= undefined ->
				 PFitlb_load_misses;
			     true -> NFitlb_load_misses
			  end,
		      branch_loads =
			  if NFbranch_loads =:= undefined -> PFbranch_loads;
			     true -> NFbranch_loads
			  end,
		      branch_load_misses =
			  if NFbranch_load_misses =:= undefined ->
				 PFbranch_load_misses;
			     true -> NFbranch_load_misses
			  end,
		      node_loads =
			  if NFnode_loads =:= undefined -> PFnode_loads;
			     true -> NFnode_loads
			  end,
		      node_load_misses =
			  if NFnode_load_misses =:= undefined ->
				 PFnode_load_misses;
			     true -> NFnode_load_misses
			  end,
		      node_stores =
			  if NFnode_stores =:= undefined -> PFnode_stores;
			     true -> NFnode_stores
			  end,
		      node_store_misses =
			  if NFnode_store_misses =:= undefined ->
				 PFnode_store_misses;
			     true -> NFnode_store_misses
			  end,
		      node_prefetches =
			  if NFnode_prefetches =:= undefined ->
				 PFnode_prefetches;
			     true -> NFnode_prefetches
			  end,
		      node_prefetch_misses =
			  if NFnode_prefetch_misses =:= undefined ->
				 PFnode_prefetch_misses;
			     true -> NFnode_prefetch_misses
			  end}.

merge_msg_ResourceStatistics(Prev, undefined) -> Prev;
merge_msg_ResourceStatistics(undefined, New) -> New;
merge_msg_ResourceStatistics(#'ResourceStatistics'{timestamp
						       = PFtimestamp,
						   processes = PFprocesses,
						   threads = PFthreads,
						   cpus_user_time_secs =
						       PFcpus_user_time_secs,
						   cpus_system_time_secs =
						       PFcpus_system_time_secs,
						   cpus_limit = PFcpus_limit,
						   cpus_nr_periods =
						       PFcpus_nr_periods,
						   cpus_nr_throttled =
						       PFcpus_nr_throttled,
						   cpus_throttled_time_secs =
						       PFcpus_throttled_time_secs,
						   mem_total_bytes =
						       PFmem_total_bytes,
						   mem_total_memsw_bytes =
						       PFmem_total_memsw_bytes,
						   mem_limit_bytes =
						       PFmem_limit_bytes,
						   mem_soft_limit_bytes =
						       PFmem_soft_limit_bytes,
						   mem_file_bytes =
						       PFmem_file_bytes,
						   mem_anon_bytes =
						       PFmem_anon_bytes,
						   mem_cache_bytes =
						       PFmem_cache_bytes,
						   mem_rss_bytes =
						       PFmem_rss_bytes,
						   mem_mapped_file_bytes =
						       PFmem_mapped_file_bytes,
						   mem_swap_bytes =
						       PFmem_swap_bytes,
						   mem_unevictable_bytes =
						       PFmem_unevictable_bytes,
						   mem_low_pressure_counter =
						       PFmem_low_pressure_counter,
						   mem_medium_pressure_counter =
						       PFmem_medium_pressure_counter,
						   mem_critical_pressure_counter
						       =
						       PFmem_critical_pressure_counter,
						   disk_limit_bytes =
						       PFdisk_limit_bytes,
						   disk_used_bytes =
						       PFdisk_used_bytes,
						   perf = PFperf,
						   net_rx_packets =
						       PFnet_rx_packets,
						   net_rx_bytes =
						       PFnet_rx_bytes,
						   net_rx_errors =
						       PFnet_rx_errors,
						   net_rx_dropped =
						       PFnet_rx_dropped,
						   net_tx_packets =
						       PFnet_tx_packets,
						   net_tx_bytes =
						       PFnet_tx_bytes,
						   net_tx_errors =
						       PFnet_tx_errors,
						   net_tx_dropped =
						       PFnet_tx_dropped,
						   net_tcp_rtt_microsecs_p50 =
						       PFnet_tcp_rtt_microsecs_p50,
						   net_tcp_rtt_microsecs_p90 =
						       PFnet_tcp_rtt_microsecs_p90,
						   net_tcp_rtt_microsecs_p95 =
						       PFnet_tcp_rtt_microsecs_p95,
						   net_tcp_rtt_microsecs_p99 =
						       PFnet_tcp_rtt_microsecs_p99,
						   net_tcp_active_connections =
						       PFnet_tcp_active_connections,
						   net_tcp_time_wait_connections
						       =
						       PFnet_tcp_time_wait_connections,
						   net_traffic_control_statistics
						       =
						       PFnet_traffic_control_statistics,
						   net_snmp_statistics =
						       PFnet_snmp_statistics},
			     #'ResourceStatistics'{timestamp = NFtimestamp,
						   processes = NFprocesses,
						   threads = NFthreads,
						   cpus_user_time_secs =
						       NFcpus_user_time_secs,
						   cpus_system_time_secs =
						       NFcpus_system_time_secs,
						   cpus_limit = NFcpus_limit,
						   cpus_nr_periods =
						       NFcpus_nr_periods,
						   cpus_nr_throttled =
						       NFcpus_nr_throttled,
						   cpus_throttled_time_secs =
						       NFcpus_throttled_time_secs,
						   mem_total_bytes =
						       NFmem_total_bytes,
						   mem_total_memsw_bytes =
						       NFmem_total_memsw_bytes,
						   mem_limit_bytes =
						       NFmem_limit_bytes,
						   mem_soft_limit_bytes =
						       NFmem_soft_limit_bytes,
						   mem_file_bytes =
						       NFmem_file_bytes,
						   mem_anon_bytes =
						       NFmem_anon_bytes,
						   mem_cache_bytes =
						       NFmem_cache_bytes,
						   mem_rss_bytes =
						       NFmem_rss_bytes,
						   mem_mapped_file_bytes =
						       NFmem_mapped_file_bytes,
						   mem_swap_bytes =
						       NFmem_swap_bytes,
						   mem_unevictable_bytes =
						       NFmem_unevictable_bytes,
						   mem_low_pressure_counter =
						       NFmem_low_pressure_counter,
						   mem_medium_pressure_counter =
						       NFmem_medium_pressure_counter,
						   mem_critical_pressure_counter
						       =
						       NFmem_critical_pressure_counter,
						   disk_limit_bytes =
						       NFdisk_limit_bytes,
						   disk_used_bytes =
						       NFdisk_used_bytes,
						   perf = NFperf,
						   net_rx_packets =
						       NFnet_rx_packets,
						   net_rx_bytes =
						       NFnet_rx_bytes,
						   net_rx_errors =
						       NFnet_rx_errors,
						   net_rx_dropped =
						       NFnet_rx_dropped,
						   net_tx_packets =
						       NFnet_tx_packets,
						   net_tx_bytes =
						       NFnet_tx_bytes,
						   net_tx_errors =
						       NFnet_tx_errors,
						   net_tx_dropped =
						       NFnet_tx_dropped,
						   net_tcp_rtt_microsecs_p50 =
						       NFnet_tcp_rtt_microsecs_p50,
						   net_tcp_rtt_microsecs_p90 =
						       NFnet_tcp_rtt_microsecs_p90,
						   net_tcp_rtt_microsecs_p95 =
						       NFnet_tcp_rtt_microsecs_p95,
						   net_tcp_rtt_microsecs_p99 =
						       NFnet_tcp_rtt_microsecs_p99,
						   net_tcp_active_connections =
						       NFnet_tcp_active_connections,
						   net_tcp_time_wait_connections
						       =
						       NFnet_tcp_time_wait_connections,
						   net_traffic_control_statistics
						       =
						       NFnet_traffic_control_statistics,
						   net_snmp_statistics =
						       NFnet_snmp_statistics}) ->
    #'ResourceStatistics'{timestamp =
			      if NFtimestamp =:= undefined -> PFtimestamp;
				 true -> NFtimestamp
			      end,
			  processes =
			      if NFprocesses =:= undefined -> PFprocesses;
				 true -> NFprocesses
			      end,
			  threads =
			      if NFthreads =:= undefined -> PFthreads;
				 true -> NFthreads
			      end,
			  cpus_user_time_secs =
			      if NFcpus_user_time_secs =:= undefined ->
				     PFcpus_user_time_secs;
				 true -> NFcpus_user_time_secs
			      end,
			  cpus_system_time_secs =
			      if NFcpus_system_time_secs =:= undefined ->
				     PFcpus_system_time_secs;
				 true -> NFcpus_system_time_secs
			      end,
			  cpus_limit =
			      if NFcpus_limit =:= undefined -> PFcpus_limit;
				 true -> NFcpus_limit
			      end,
			  cpus_nr_periods =
			      if NFcpus_nr_periods =:= undefined ->
				     PFcpus_nr_periods;
				 true -> NFcpus_nr_periods
			      end,
			  cpus_nr_throttled =
			      if NFcpus_nr_throttled =:= undefined ->
				     PFcpus_nr_throttled;
				 true -> NFcpus_nr_throttled
			      end,
			  cpus_throttled_time_secs =
			      if NFcpus_throttled_time_secs =:= undefined ->
				     PFcpus_throttled_time_secs;
				 true -> NFcpus_throttled_time_secs
			      end,
			  mem_total_bytes =
			      if NFmem_total_bytes =:= undefined ->
				     PFmem_total_bytes;
				 true -> NFmem_total_bytes
			      end,
			  mem_total_memsw_bytes =
			      if NFmem_total_memsw_bytes =:= undefined ->
				     PFmem_total_memsw_bytes;
				 true -> NFmem_total_memsw_bytes
			      end,
			  mem_limit_bytes =
			      if NFmem_limit_bytes =:= undefined ->
				     PFmem_limit_bytes;
				 true -> NFmem_limit_bytes
			      end,
			  mem_soft_limit_bytes =
			      if NFmem_soft_limit_bytes =:= undefined ->
				     PFmem_soft_limit_bytes;
				 true -> NFmem_soft_limit_bytes
			      end,
			  mem_file_bytes =
			      if NFmem_file_bytes =:= undefined ->
				     PFmem_file_bytes;
				 true -> NFmem_file_bytes
			      end,
			  mem_anon_bytes =
			      if NFmem_anon_bytes =:= undefined ->
				     PFmem_anon_bytes;
				 true -> NFmem_anon_bytes
			      end,
			  mem_cache_bytes =
			      if NFmem_cache_bytes =:= undefined ->
				     PFmem_cache_bytes;
				 true -> NFmem_cache_bytes
			      end,
			  mem_rss_bytes =
			      if NFmem_rss_bytes =:= undefined ->
				     PFmem_rss_bytes;
				 true -> NFmem_rss_bytes
			      end,
			  mem_mapped_file_bytes =
			      if NFmem_mapped_file_bytes =:= undefined ->
				     PFmem_mapped_file_bytes;
				 true -> NFmem_mapped_file_bytes
			      end,
			  mem_swap_bytes =
			      if NFmem_swap_bytes =:= undefined ->
				     PFmem_swap_bytes;
				 true -> NFmem_swap_bytes
			      end,
			  mem_unevictable_bytes =
			      if NFmem_unevictable_bytes =:= undefined ->
				     PFmem_unevictable_bytes;
				 true -> NFmem_unevictable_bytes
			      end,
			  mem_low_pressure_counter =
			      if NFmem_low_pressure_counter =:= undefined ->
				     PFmem_low_pressure_counter;
				 true -> NFmem_low_pressure_counter
			      end,
			  mem_medium_pressure_counter =
			      if NFmem_medium_pressure_counter =:= undefined ->
				     PFmem_medium_pressure_counter;
				 true -> NFmem_medium_pressure_counter
			      end,
			  mem_critical_pressure_counter =
			      if NFmem_critical_pressure_counter =:=
				   undefined ->
				     PFmem_critical_pressure_counter;
				 true -> NFmem_critical_pressure_counter
			      end,
			  disk_limit_bytes =
			      if NFdisk_limit_bytes =:= undefined ->
				     PFdisk_limit_bytes;
				 true -> NFdisk_limit_bytes
			      end,
			  disk_used_bytes =
			      if NFdisk_used_bytes =:= undefined ->
				     PFdisk_used_bytes;
				 true -> NFdisk_used_bytes
			      end,
			  perf = merge_msg_PerfStatistics(PFperf, NFperf),
			  net_rx_packets =
			      if NFnet_rx_packets =:= undefined ->
				     PFnet_rx_packets;
				 true -> NFnet_rx_packets
			      end,
			  net_rx_bytes =
			      if NFnet_rx_bytes =:= undefined -> PFnet_rx_bytes;
				 true -> NFnet_rx_bytes
			      end,
			  net_rx_errors =
			      if NFnet_rx_errors =:= undefined ->
				     PFnet_rx_errors;
				 true -> NFnet_rx_errors
			      end,
			  net_rx_dropped =
			      if NFnet_rx_dropped =:= undefined ->
				     PFnet_rx_dropped;
				 true -> NFnet_rx_dropped
			      end,
			  net_tx_packets =
			      if NFnet_tx_packets =:= undefined ->
				     PFnet_tx_packets;
				 true -> NFnet_tx_packets
			      end,
			  net_tx_bytes =
			      if NFnet_tx_bytes =:= undefined -> PFnet_tx_bytes;
				 true -> NFnet_tx_bytes
			      end,
			  net_tx_errors =
			      if NFnet_tx_errors =:= undefined ->
				     PFnet_tx_errors;
				 true -> NFnet_tx_errors
			      end,
			  net_tx_dropped =
			      if NFnet_tx_dropped =:= undefined ->
				     PFnet_tx_dropped;
				 true -> NFnet_tx_dropped
			      end,
			  net_tcp_rtt_microsecs_p50 =
			      if NFnet_tcp_rtt_microsecs_p50 =:= undefined ->
				     PFnet_tcp_rtt_microsecs_p50;
				 true -> NFnet_tcp_rtt_microsecs_p50
			      end,
			  net_tcp_rtt_microsecs_p90 =
			      if NFnet_tcp_rtt_microsecs_p90 =:= undefined ->
				     PFnet_tcp_rtt_microsecs_p90;
				 true -> NFnet_tcp_rtt_microsecs_p90
			      end,
			  net_tcp_rtt_microsecs_p95 =
			      if NFnet_tcp_rtt_microsecs_p95 =:= undefined ->
				     PFnet_tcp_rtt_microsecs_p95;
				 true -> NFnet_tcp_rtt_microsecs_p95
			      end,
			  net_tcp_rtt_microsecs_p99 =
			      if NFnet_tcp_rtt_microsecs_p99 =:= undefined ->
				     PFnet_tcp_rtt_microsecs_p99;
				 true -> NFnet_tcp_rtt_microsecs_p99
			      end,
			  net_tcp_active_connections =
			      if NFnet_tcp_active_connections =:= undefined ->
				     PFnet_tcp_active_connections;
				 true -> NFnet_tcp_active_connections
			      end,
			  net_tcp_time_wait_connections =
			      if NFnet_tcp_time_wait_connections =:=
				   undefined ->
				     PFnet_tcp_time_wait_connections;
				 true -> NFnet_tcp_time_wait_connections
			      end,
			  net_traffic_control_statistics =
			      'erlang_++'(PFnet_traffic_control_statistics,
					  NFnet_traffic_control_statistics),
			  net_snmp_statistics =
			      merge_msg_SNMPStatistics(PFnet_snmp_statistics,
						       NFnet_snmp_statistics)}.

merge_msg_FileInfo(#'FileInfo'{path = PFpath,
			       nlink = PFnlink, size = PFsize, mtime = PFmtime,
			       mode = PFmode, uid = PFuid, gid = PFgid},
		   #'FileInfo'{path = NFpath, nlink = NFnlink,
			       size = NFsize, mtime = NFmtime, mode = NFmode,
			       uid = NFuid, gid = NFgid}) ->
    #'FileInfo'{path =
		    if NFpath =:= undefined -> PFpath;
		       true -> NFpath
		    end,
		nlink =
		    if NFnlink =:= undefined -> PFnlink;
		       true -> NFnlink
		    end,
		size =
		    if NFsize =:= undefined -> PFsize;
		       true -> NFsize
		    end,
		mtime = merge_msg_TimeInfo(PFmtime, NFmtime),
		mode =
		    if NFmode =:= undefined -> PFmode;
		       true -> NFmode
		    end,
		uid =
		    if NFuid =:= undefined -> PFuid;
		       true -> NFuid
		    end,
		gid =
		    if NFgid =:= undefined -> PFgid;
		       true -> NFgid
		    end}.

'merge_msg_Response.ListFiles'(Prev, undefined) -> Prev;
'merge_msg_Response.ListFiles'(undefined, New) -> New;
'merge_msg_Response.ListFiles'(#'Response.ListFiles'{file_infos
							 = PFfile_infos},
			       #'Response.ListFiles'{file_infos =
							 NFfile_infos}) ->
    #'Response.ListFiles'{file_infos =
			      'erlang_++'(PFfile_infos, NFfile_infos)}.

merge_msg_CgroupInfo(Prev, undefined) -> Prev;
merge_msg_CgroupInfo(undefined, New) -> New;
merge_msg_CgroupInfo(#'CgroupInfo'{net_cls = PFnet_cls},
		     #'CgroupInfo'{net_cls = NFnet_cls}) ->
    #'CgroupInfo'{net_cls =
		      'merge_msg_CgroupInfo.NetCls'(PFnet_cls, NFnet_cls)}.

merge_msg_ContainerStatus(Prev, undefined) -> Prev;
merge_msg_ContainerStatus(undefined, New) -> New;
merge_msg_ContainerStatus(#'ContainerStatus'{network_infos
						 = PFnetwork_infos,
					     cgroup_info = PFcgroup_info,
					     executor_pid = PFexecutor_pid},
			  #'ContainerStatus'{network_infos = NFnetwork_infos,
					     cgroup_info = NFcgroup_info,
					     executor_pid = NFexecutor_pid}) ->
    #'ContainerStatus'{network_infos =
			   'erlang_++'(PFnetwork_infos, NFnetwork_infos),
		       cgroup_info =
			   merge_msg_CgroupInfo(PFcgroup_info, NFcgroup_info),
		       executor_pid =
			   if NFexecutor_pid =:= undefined -> PFexecutor_pid;
			      true -> NFexecutor_pid
			   end}.

merge_msg_TaskStatus(#'TaskStatus'{task_id = PFtask_id,
				   state = PFstate, message = PFmessage,
				   source = PFsource, reason = PFreason,
				   data = PFdata, agent_id = PFagent_id,
				   executor_id = PFexecutor_id,
				   timestamp = PFtimestamp, uuid = PFuuid,
				   healthy = PFhealthy, labels = PFlabels,
				   container_status = PFcontainer_status},
		     #'TaskStatus'{task_id = NFtask_id, state = NFstate,
				   message = NFmessage, source = NFsource,
				   reason = NFreason, data = NFdata,
				   agent_id = NFagent_id,
				   executor_id = NFexecutor_id,
				   timestamp = NFtimestamp, uuid = NFuuid,
				   healthy = NFhealthy, labels = NFlabels,
				   container_status = NFcontainer_status}) ->
    #'TaskStatus'{task_id =
		      merge_msg_TaskID(PFtask_id, NFtask_id),
		  state =
		      if NFstate =:= undefined -> PFstate;
			 true -> NFstate
		      end,
		  message =
		      if NFmessage =:= undefined -> PFmessage;
			 true -> NFmessage
		      end,
		  source =
		      if NFsource =:= undefined -> PFsource;
			 true -> NFsource
		      end,
		  reason =
		      if NFreason =:= undefined -> PFreason;
			 true -> NFreason
		      end,
		  data =
		      if NFdata =:= undefined -> PFdata;
			 true -> NFdata
		      end,
		  agent_id = merge_msg_AgentID(PFagent_id, NFagent_id),
		  executor_id =
		      merge_msg_ExecutorID(PFexecutor_id, NFexecutor_id),
		  timestamp =
		      if NFtimestamp =:= undefined -> PFtimestamp;
			 true -> NFtimestamp
		      end,
		  uuid =
		      if NFuuid =:= undefined -> PFuuid;
			 true -> NFuuid
		      end,
		  healthy =
		      if NFhealthy =:= undefined -> PFhealthy;
			 true -> NFhealthy
		      end,
		  labels = merge_msg_Labels(PFlabels, NFlabels),
		  container_status =
		      merge_msg_ContainerStatus(PFcontainer_status,
						NFcontainer_status)}.

merge_msg_Attribute(#'Attribute'{name = PFname,
				 type = PFtype, scalar = PFscalar,
				 ranges = PFranges, set = PFset, text = PFtext},
		    #'Attribute'{name = NFname, type = NFtype,
				 scalar = NFscalar, ranges = NFranges,
				 set = NFset, text = NFtext}) ->
    #'Attribute'{name =
		     if NFname =:= undefined -> PFname;
			true -> NFname
		     end,
		 type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end,
		 scalar = 'merge_msg_Value.Scalar'(PFscalar, NFscalar),
		 ranges = 'merge_msg_Value.Ranges'(PFranges, NFranges),
		 set = 'merge_msg_Value.Set'(PFset, NFset),
		 text = 'merge_msg_Value.Text'(PFtext, NFtext)}.

merge_msg_AgentInfo(#'AgentInfo'{hostname = PFhostname,
				 port = PFport, resources = PFresources,
				 attributes = PFattributes, id = PFid},
		    #'AgentInfo'{hostname = NFhostname, port = NFport,
				 resources = NFresources,
				 attributes = NFattributes, id = NFid}) ->
    #'AgentInfo'{hostname =
		     if NFhostname =:= undefined -> PFhostname;
			true -> NFhostname
		     end,
		 port =
		     if NFport =:= undefined -> PFport;
			true -> NFport
		     end,
		 resources = 'erlang_++'(PFresources, NFresources),
		 attributes = 'erlang_++'(PFattributes, NFattributes),
		 id = merge_msg_AgentID(PFid, NFid)}.

'merge_msg_Response.GetLoggingLevel'(Prev, undefined) ->
    Prev;
'merge_msg_Response.GetLoggingLevel'(undefined, New) ->
    New;
'merge_msg_Response.GetLoggingLevel'(#'Response.GetLoggingLevel'{level
								     = PFlevel},
				     #'Response.GetLoggingLevel'{level =
								     NFlevel}) ->
    #'Response.GetLoggingLevel'{level =
				    if NFlevel =:= undefined -> PFlevel;
				       true -> NFlevel
				    end}.

merge_msg_Task(#'Task'{name = PFname,
		       task_id = PFtask_id, framework_id = PFframework_id,
		       executor_id = PFexecutor_id, agent_id = PFagent_id,
		       state = PFstate, resources = PFresources,
		       statuses = PFstatuses,
		       status_update_state = PFstatus_update_state,
		       status_update_uuid = PFstatus_update_uuid,
		       labels = PFlabels, discovery = PFdiscovery,
		       container = PFcontainer, user = PFuser},
	       #'Task'{name = NFname, task_id = NFtask_id,
		       framework_id = NFframework_id,
		       executor_id = NFexecutor_id, agent_id = NFagent_id,
		       state = NFstate, resources = NFresources,
		       statuses = NFstatuses,
		       status_update_state = NFstatus_update_state,
		       status_update_uuid = NFstatus_update_uuid,
		       labels = NFlabels, discovery = NFdiscovery,
		       container = NFcontainer, user = NFuser}) ->
    #'Task'{name =
		if NFname =:= undefined -> PFname;
		   true -> NFname
		end,
	    task_id = merge_msg_TaskID(PFtask_id, NFtask_id),
	    framework_id =
		merge_msg_FrameworkID(PFframework_id, NFframework_id),
	    executor_id =
		merge_msg_ExecutorID(PFexecutor_id, NFexecutor_id),
	    agent_id = merge_msg_AgentID(PFagent_id, NFagent_id),
	    state =
		if NFstate =:= undefined -> PFstate;
		   true -> NFstate
		end,
	    resources = 'erlang_++'(PFresources, NFresources),
	    statuses = 'erlang_++'(PFstatuses, NFstatuses),
	    status_update_state =
		if NFstatus_update_state =:= undefined ->
		       PFstatus_update_state;
		   true -> NFstatus_update_state
		end,
	    status_update_uuid =
		if NFstatus_update_uuid =:= undefined ->
		       PFstatus_update_uuid;
		   true -> NFstatus_update_uuid
		end,
	    labels = merge_msg_Labels(PFlabels, NFlabels),
	    discovery =
		merge_msg_DiscoveryInfo(PFdiscovery, NFdiscovery),
	    container =
		merge_msg_ContainerInfo(PFcontainer, NFcontainer),
	    user =
		if NFuser =:= undefined -> PFuser;
		   true -> NFuser
		end}.

'merge_msg_Response.GetContainers.Container'(#'Response.GetContainers.Container'{framework_id
										     =
										     PFframework_id,
										 executor_id
										     =
										     PFexecutor_id,
										 executor_name
										     =
										     PFexecutor_name,
										 container_id
										     =
										     PFcontainer_id,
										 container_status
										     =
										     PFcontainer_status,
										 resource_statistics
										     =
										     PFresource_statistics},
					     #'Response.GetContainers.Container'{framework_id
										     =
										     NFframework_id,
										 executor_id
										     =
										     NFexecutor_id,
										 executor_name
										     =
										     NFexecutor_name,
										 container_id
										     =
										     NFcontainer_id,
										 container_status
										     =
										     NFcontainer_status,
										 resource_statistics
										     =
										     NFresource_statistics}) ->
    #'Response.GetContainers.Container'{framework_id =
					    merge_msg_FrameworkID(PFframework_id,
								  NFframework_id),
					executor_id =
					    merge_msg_ExecutorID(PFexecutor_id,
								 NFexecutor_id),
					executor_name =
					    if NFexecutor_name =:= undefined ->
						   PFexecutor_name;
					       true -> NFexecutor_name
					    end,
					container_id =
					    merge_msg_ContainerID(PFcontainer_id,
								  NFcontainer_id),
					container_status =
					    merge_msg_ContainerStatus(PFcontainer_status,
								      NFcontainer_status),
					resource_statistics =
					    merge_msg_ResourceStatistics(PFresource_statistics,
									 NFresource_statistics)}.

'merge_msg_Response.GetContainers'(Prev, undefined) ->
    Prev;
'merge_msg_Response.GetContainers'(undefined, New) ->
    New;
'merge_msg_Response.GetContainers'(#'Response.GetContainers'{containers
								 =
								 PFcontainers},
				   #'Response.GetContainers'{containers =
								 NFcontainers}) ->
    #'Response.GetContainers'{containers =
				  'erlang_++'(PFcontainers, NFcontainers)}.

'merge_msg_Response.GetState'(_Prev, New) -> New.

'merge_msg_Response.GetVersion'(Prev, undefined) ->
    Prev;
'merge_msg_Response.GetVersion'(undefined, New) -> New;
'merge_msg_Response.GetVersion'(#'Response.GetVersion'{version_info
							   = PFversion_info},
				#'Response.GetVersion'{version_info =
							   NFversion_info}) ->
    #'Response.GetVersion'{version_info =
			       merge_msg_VersionInfo(PFversion_info,
						     NFversion_info)}.

'merge_msg_Response.GetFlags'(Prev, undefined) -> Prev;
'merge_msg_Response.GetFlags'(undefined, New) -> New;
'merge_msg_Response.GetFlags'(#'Response.GetFlags'{flags
						       = PFflags},
			      #'Response.GetFlags'{flags = NFflags}) ->
    #'Response.GetFlags'{flags =
			     'erlang_++'(PFflags, NFflags)}.

'merge_msg_Response.GetHealth'(Prev, undefined) -> Prev;
'merge_msg_Response.GetHealth'(undefined, New) -> New;
'merge_msg_Response.GetHealth'(#'Response.GetHealth'{healthy
							 = PFhealthy},
			       #'Response.GetHealth'{healthy = NFhealthy}) ->
    #'Response.GetHealth'{healthy =
			      if NFhealthy =:= undefined -> PFhealthy;
				 true -> NFhealthy
			      end}.

merge_msg_Response(#'Response'{type = PFtype,
			       get_health = PFget_health,
			       get_flags = PFget_flags,
			       get_version = PFget_version,
			       get_metrics = PFget_metrics,
			       get_logging_level = PFget_logging_level,
			       list_files = PFlist_files,
			       get_file_contents = PFget_file_contents,
			       get_state = PFget_state,
			       get_containers = PFget_containers},
		   #'Response'{type = NFtype, get_health = NFget_health,
			       get_flags = NFget_flags,
			       get_version = NFget_version,
			       get_metrics = NFget_metrics,
			       get_logging_level = NFget_logging_level,
			       list_files = NFlist_files,
			       get_file_contents = NFget_file_contents,
			       get_state = NFget_state,
			       get_containers = NFget_containers}) ->
    #'Response'{type =
		    if NFtype =:= undefined -> PFtype;
		       true -> NFtype
		    end,
		get_health =
		    'merge_msg_Response.GetHealth'(PFget_health,
						   NFget_health),
		get_flags =
		    'merge_msg_Response.GetFlags'(PFget_flags, NFget_flags),
		get_version =
		    'merge_msg_Response.GetVersion'(PFget_version,
						    NFget_version),
		get_metrics =
		    'merge_msg_Response.GetMetrics'(PFget_metrics,
						    NFget_metrics),
		get_logging_level =
		    'merge_msg_Response.GetLoggingLevel'(PFget_logging_level,
							 NFget_logging_level),
		list_files =
		    'merge_msg_Response.ListFiles'(PFlist_files,
						   NFlist_files),
		get_file_contents =
		    'merge_msg_Response.GetFileContents'(PFget_file_contents,
							 NFget_file_contents),
		get_state =
		    'merge_msg_Response.GetState'(PFget_state, NFget_state),
		get_containers =
		    'merge_msg_Response.GetContainers'(PFget_containers,
						       NFget_containers)}.

merge_msg_Filters(#'Filters'{refuse_seconds =
				 PFrefuse_seconds},
		  #'Filters'{refuse_seconds = NFrefuse_seconds}) ->
    #'Filters'{refuse_seconds =
		   if NFrefuse_seconds =:= undefined -> PFrefuse_seconds;
		      true -> NFrefuse_seconds
		   end}.

merge_msg_Credentials(#'Credentials'{credentials =
					 PFcredentials},
		      #'Credentials'{credentials = NFcredentials}) ->
    #'Credentials'{credentials =
		       'erlang_++'(PFcredentials, NFcredentials)}.

merge_msg_RateLimit(#'RateLimit'{qps = PFqps,
				 principal = PFprincipal,
				 capacity = PFcapacity},
		    #'RateLimit'{qps = NFqps, principal = NFprincipal,
				 capacity = NFcapacity}) ->
    #'RateLimit'{qps =
		     if NFqps =:= undefined -> PFqps;
			true -> NFqps
		     end,
		 principal =
		     if NFprincipal =:= undefined -> PFprincipal;
			true -> NFprincipal
		     end,
		 capacity =
		     if NFcapacity =:= undefined -> PFcapacity;
			true -> NFcapacity
		     end}.

merge_msg_RateLimits(#'RateLimits'{limits = PFlimits,
				   aggregate_default_qps =
				       PFaggregate_default_qps,
				   aggregate_default_capacity =
				       PFaggregate_default_capacity},
		     #'RateLimits'{limits = NFlimits,
				   aggregate_default_qps =
				       NFaggregate_default_qps,
				   aggregate_default_capacity =
				       NFaggregate_default_capacity}) ->
    #'RateLimits'{limits = 'erlang_++'(PFlimits, NFlimits),
		  aggregate_default_qps =
		      if NFaggregate_default_qps =:= undefined ->
			     PFaggregate_default_qps;
			 true -> NFaggregate_default_qps
		      end,
		  aggregate_default_capacity =
		      if NFaggregate_default_capacity =:= undefined ->
			     PFaggregate_default_capacity;
			 true -> NFaggregate_default_capacity
		      end}.

merge_msg_OfferID(#'OfferID'{value = PFvalue},
		  #'OfferID'{value = NFvalue}) ->
    #'OfferID'{value =
		   if NFvalue =:= undefined -> PFvalue;
		      true -> NFvalue
		   end}.

merge_msg_InverseOffer(#'InverseOffer'{id = PFid,
				       url = PFurl,
				       framework_id = PFframework_id,
				       agent_id = PFagent_id,
				       unavailability = PFunavailability,
				       resources = PFresources},
		       #'InverseOffer'{id = NFid, url = NFurl,
				       framework_id = NFframework_id,
				       agent_id = NFagent_id,
				       unavailability = NFunavailability,
				       resources = NFresources}) ->
    #'InverseOffer'{id = merge_msg_OfferID(PFid, NFid),
		    url = merge_msg_URL(PFurl, NFurl),
		    framework_id =
			merge_msg_FrameworkID(PFframework_id, NFframework_id),
		    agent_id = merge_msg_AgentID(PFagent_id, NFagent_id),
		    unavailability =
			merge_msg_Unavailability(PFunavailability,
						 NFunavailability),
		    resources = 'erlang_++'(PFresources, NFresources)}.

'merge_msg_ResourceUsage.Executor'(#'ResourceUsage.Executor'{executor_info
								 =
								 PFexecutor_info,
							     allocated =
								 PFallocated,
							     statistics =
								 PFstatistics,
							     container_id =
								 PFcontainer_id,
							     tasks = PFtasks},
				   #'ResourceUsage.Executor'{executor_info =
								 NFexecutor_info,
							     allocated =
								 NFallocated,
							     statistics =
								 NFstatistics,
							     container_id =
								 NFcontainer_id,
							     tasks =
								 NFtasks}) ->
    #'ResourceUsage.Executor'{executor_info =
				  merge_msg_ExecutorInfo(PFexecutor_info,
							 NFexecutor_info),
			      allocated = 'erlang_++'(PFallocated, NFallocated),
			      statistics =
				  merge_msg_ResourceStatistics(PFstatistics,
							       NFstatistics),
			      container_id =
				  merge_msg_ContainerID(PFcontainer_id,
							NFcontainer_id),
			      tasks = 'erlang_++'(PFtasks, NFtasks)}.

merge_msg_ResourceUsage(#'ResourceUsage'{executors =
					     PFexecutors,
					 total = PFtotal},
			#'ResourceUsage'{executors = NFexecutors,
					 total = NFtotal}) ->
    #'ResourceUsage'{executors =
			 'erlang_++'(PFexecutors, NFexecutors),
		     total = 'erlang_++'(PFtotal, NFtotal)}.

merge_msg_Offer(#'Offer'{id = PFid,
			 framework_id = PFframework_id, agent_id = PFagent_id,
			 hostname = PFhostname, url = PFurl,
			 resources = PFresources, attributes = PFattributes,
			 executor_ids = PFexecutor_ids,
			 unavailability = PFunavailability},
		#'Offer'{id = NFid, framework_id = NFframework_id,
			 agent_id = NFagent_id, hostname = NFhostname,
			 url = NFurl, resources = NFresources,
			 attributes = NFattributes,
			 executor_ids = NFexecutor_ids,
			 unavailability = NFunavailability}) ->
    #'Offer'{id = merge_msg_OfferID(PFid, NFid),
	     framework_id =
		 merge_msg_FrameworkID(PFframework_id, NFframework_id),
	     agent_id = merge_msg_AgentID(PFagent_id, NFagent_id),
	     hostname =
		 if NFhostname =:= undefined -> PFhostname;
		    true -> NFhostname
		 end,
	     url = merge_msg_URL(PFurl, NFurl),
	     resources = 'erlang_++'(PFresources, NFresources),
	     attributes = 'erlang_++'(PFattributes, NFattributes),
	     executor_ids =
		 'erlang_++'(PFexecutor_ids, NFexecutor_ids),
	     unavailability =
		 merge_msg_Unavailability(PFunavailability,
					  NFunavailability)}.



verify_msg(Msg) ->
    case Msg of
      #'Environment.Variable'{} ->
	  'v_msg_Environment.Variable'(Msg,
				       ['Environment.Variable']);
      #'Environment'{} ->
	  v_msg_Environment(Msg, ['Environment']);
      #'CommandInfo.URI'{} ->
	  'v_msg_CommandInfo.URI'(Msg, ['CommandInfo.URI']);
      #'CommandInfo'{} ->
	  v_msg_CommandInfo(Msg, ['CommandInfo']);
      #'Parameter'{} -> v_msg_Parameter(Msg, ['Parameter']);
      #'ContainerInfo.DockerInfo.PortMapping'{} ->
	  'v_msg_ContainerInfo.DockerInfo.PortMapping'(Msg,
						       ['ContainerInfo.DockerInfo.PortMapping']);
      #'ContainerInfo.DockerInfo'{} ->
	  'v_msg_ContainerInfo.DockerInfo'(Msg,
					   ['ContainerInfo.DockerInfo']);
      #'TimeInfo'{} -> v_msg_TimeInfo(Msg, ['TimeInfo']);
      #'WeightInfo'{} ->
	  v_msg_WeightInfo(Msg, ['WeightInfo']);
      #'DurationInfo'{} ->
	  v_msg_DurationInfo(Msg, ['DurationInfo']);
      #'Unavailability'{} ->
	  v_msg_Unavailability(Msg, ['Unavailability']);
      #'MachineID'{} -> v_msg_MachineID(Msg, ['MachineID']);
      #'MachineInfo'{} ->
	  v_msg_MachineInfo(Msg, ['MachineInfo']);
      #'Resource.RevocableInfo'{} ->
	  'v_msg_Resource.RevocableInfo'(Msg,
					 ['Resource.RevocableInfo']);
      #'Resource.DiskInfo.Source.Mount'{} ->
	  'v_msg_Resource.DiskInfo.Source.Mount'(Msg,
						 ['Resource.DiskInfo.Source.Mount']);
      #'Resource.DiskInfo.Source.Path'{} ->
	  'v_msg_Resource.DiskInfo.Source.Path'(Msg,
						['Resource.DiskInfo.Source.Path']);
      #'Resource.DiskInfo.Source'{} ->
	  'v_msg_Resource.DiskInfo.Source'(Msg,
					   ['Resource.DiskInfo.Source']);
      #'Parameters'{} ->
	  v_msg_Parameters(Msg, ['Parameters']);
      #'Volume.Source.DockerVolume'{} ->
	  'v_msg_Volume.Source.DockerVolume'(Msg,
					     ['Volume.Source.DockerVolume']);
      #'Volume.Source'{} ->
	  'v_msg_Volume.Source'(Msg, ['Volume.Source']);
      #'Credential'{} ->
	  v_msg_Credential(Msg, ['Credential']);
      #'Image.Docker'{} ->
	  'v_msg_Image.Docker'(Msg, ['Image.Docker']);
      #'Label'{} -> v_msg_Label(Msg, ['Label']);
      #'Labels'{} -> v_msg_Labels(Msg, ['Labels']);
      #'Image.Appc'{} ->
	  'v_msg_Image.Appc'(Msg, ['Image.Appc']);
      #'Image'{} -> v_msg_Image(Msg, ['Image']);
      #'Volume'{} -> v_msg_Volume(Msg, ['Volume']);
      #'Resource.DiskInfo.Persistence'{} ->
	  'v_msg_Resource.DiskInfo.Persistence'(Msg,
						['Resource.DiskInfo.Persistence']);
      #'Resource.DiskInfo'{} ->
	  'v_msg_Resource.DiskInfo'(Msg, ['Resource.DiskInfo']);
      #'Resource.ReservationInfo'{} ->
	  'v_msg_Resource.ReservationInfo'(Msg,
					   ['Resource.ReservationInfo']);
      #'Value.Set'{} -> 'v_msg_Value.Set'(Msg, ['Value.Set']);
      #'Value.Range'{} ->
	  'v_msg_Value.Range'(Msg, ['Value.Range']);
      #'Value.Ranges'{} ->
	  'v_msg_Value.Ranges'(Msg, ['Value.Ranges']);
      #'Value.Scalar'{} ->
	  'v_msg_Value.Scalar'(Msg, ['Value.Scalar']);
      #'Resource'{} -> v_msg_Resource(Msg, ['Resource']);
      #'Offer.Operation.Destroy'{} ->
	  'v_msg_Offer.Operation.Destroy'(Msg,
					  ['Offer.Operation.Destroy']);
      #'Offer.Operation.Create'{} ->
	  'v_msg_Offer.Operation.Create'(Msg,
					 ['Offer.Operation.Create']);
      #'Offer.Operation.Unreserve'{} ->
	  'v_msg_Offer.Operation.Unreserve'(Msg,
					    ['Offer.Operation.Unreserve']);
      #'Offer.Operation.Reserve'{} ->
	  'v_msg_Offer.Operation.Reserve'(Msg,
					  ['Offer.Operation.Reserve']);
      #'Port'{} -> v_msg_Port(Msg, ['Port']);
      #'Ports'{} -> v_msg_Ports(Msg, ['Ports']);
      #'DiscoveryInfo'{} ->
	  v_msg_DiscoveryInfo(Msg, ['DiscoveryInfo']);
      #'KillPolicy'{} ->
	  v_msg_KillPolicy(Msg, ['KillPolicy']);
      #'HealthCheck.HTTP'{} ->
	  'v_msg_HealthCheck.HTTP'(Msg, ['HealthCheck.HTTP']);
      #'HealthCheck'{} ->
	  v_msg_HealthCheck(Msg, ['HealthCheck']);
      #'NetworkInfo.IPAddress'{} ->
	  'v_msg_NetworkInfo.IPAddress'(Msg,
					['NetworkInfo.IPAddress']);
      #'NetworkInfo'{} ->
	  v_msg_NetworkInfo(Msg, ['NetworkInfo']);
      #'ContainerInfo.MesosInfo'{} ->
	  'v_msg_ContainerInfo.MesosInfo'(Msg,
					  ['ContainerInfo.MesosInfo']);
      #'ContainerInfo'{} ->
	  v_msg_ContainerInfo(Msg, ['ContainerInfo']);
      #'FrameworkID'{} ->
	  v_msg_FrameworkID(Msg, ['FrameworkID']);
      #'ExecutorID'{} ->
	  v_msg_ExecutorID(Msg, ['ExecutorID']);
      #'ExecutorInfo'{} ->
	  v_msg_ExecutorInfo(Msg, ['ExecutorInfo']);
      #'AgentID'{} -> v_msg_AgentID(Msg, ['AgentID']);
      #'TaskID'{} -> v_msg_TaskID(Msg, ['TaskID']);
      #'TaskInfo'{} -> v_msg_TaskInfo(Msg, ['TaskInfo']);
      #'Offer.Operation.Launch'{} ->
	  'v_msg_Offer.Operation.Launch'(Msg,
					 ['Offer.Operation.Launch']);
      #'Offer.Operation'{} ->
	  'v_msg_Offer.Operation'(Msg, ['Offer.Operation']);
      #'Flag'{} -> v_msg_Flag(Msg, ['Flag']);
      #'Value.Text'{} ->
	  'v_msg_Value.Text'(Msg, ['Value.Text']);
      #'Value'{} -> v_msg_Value(Msg, ['Value']);
      #'Request'{} -> v_msg_Request(Msg, ['Request']);
      #'ContainerID'{} ->
	  v_msg_ContainerID(Msg, ['ContainerID']);
      #'Metric'{} -> v_msg_Metric(Msg, ['Metric']);
      #'Response.GetFileContents'{} ->
	  'v_msg_Response.GetFileContents'(Msg,
					   ['Response.GetFileContents']);
      #'CgroupInfo.NetCls'{} ->
	  'v_msg_CgroupInfo.NetCls'(Msg, ['CgroupInfo.NetCls']);
      #'Call.GetMetrics'{} ->
	  'v_msg_Call.GetMetrics'(Msg, ['Call.GetMetrics']);
      #'UdpStatistics'{} ->
	  v_msg_UdpStatistics(Msg, ['UdpStatistics']);
      #'TcpStatistics'{} ->
	  v_msg_TcpStatistics(Msg, ['TcpStatistics']);
      #'IpStatistics'{} ->
	  v_msg_IpStatistics(Msg, ['IpStatistics']);
      #'Response.GetMetrics'{} ->
	  'v_msg_Response.GetMetrics'(Msg,
				      ['Response.GetMetrics']);
      #'VersionInfo'{} ->
	  v_msg_VersionInfo(Msg, ['VersionInfo']);
      #'Address'{} -> v_msg_Address(Msg, ['Address']);
      #'MasterInfo'{} ->
	  v_msg_MasterInfo(Msg, ['MasterInfo']);
      #'FrameworkInfo.Capability'{} ->
	  'v_msg_FrameworkInfo.Capability'(Msg,
					   ['FrameworkInfo.Capability']);
      #'FrameworkInfo'{} ->
	  v_msg_FrameworkInfo(Msg, ['FrameworkInfo']);
      #'URL'{} -> v_msg_URL(Msg, ['URL']);
      #'Call.ReadFile'{} ->
	  'v_msg_Call.ReadFile'(Msg, ['Call.ReadFile']);
      #'Call.ListFiles'{} ->
	  'v_msg_Call.ListFiles'(Msg, ['Call.ListFiles']);
      #'Call.SetLoggingLevel'{} ->
	  'v_msg_Call.SetLoggingLevel'(Msg,
				       ['Call.SetLoggingLevel']);
      #'Call'{} -> v_msg_Call(Msg, ['Call']);
      #'ResourceUsage.Executor.Task'{} ->
	  'v_msg_ResourceUsage.Executor.Task'(Msg,
					      ['ResourceUsage.Executor.Task']);
      #'Role'{} -> v_msg_Role(Msg, ['Role']);
      #'IcmpStatistics'{} ->
	  v_msg_IcmpStatistics(Msg, ['IcmpStatistics']);
      #'SNMPStatistics'{} ->
	  v_msg_SNMPStatistics(Msg, ['SNMPStatistics']);
      #'TrafficControlStatistics'{} ->
	  v_msg_TrafficControlStatistics(Msg,
					 ['TrafficControlStatistics']);
      #'PerfStatistics'{} ->
	  v_msg_PerfStatistics(Msg, ['PerfStatistics']);
      #'ResourceStatistics'{} ->
	  v_msg_ResourceStatistics(Msg, ['ResourceStatistics']);
      #'FileInfo'{} -> v_msg_FileInfo(Msg, ['FileInfo']);
      #'Response.ListFiles'{} ->
	  'v_msg_Response.ListFiles'(Msg, ['Response.ListFiles']);
      #'CgroupInfo'{} ->
	  v_msg_CgroupInfo(Msg, ['CgroupInfo']);
      #'ContainerStatus'{} ->
	  v_msg_ContainerStatus(Msg, ['ContainerStatus']);
      #'TaskStatus'{} ->
	  v_msg_TaskStatus(Msg, ['TaskStatus']);
      #'Attribute'{} -> v_msg_Attribute(Msg, ['Attribute']);
      #'AgentInfo'{} -> v_msg_AgentInfo(Msg, ['AgentInfo']);
      #'Response.GetLoggingLevel'{} ->
	  'v_msg_Response.GetLoggingLevel'(Msg,
					   ['Response.GetLoggingLevel']);
      #'Task'{} -> v_msg_Task(Msg, ['Task']);
      #'Response.GetContainers.Container'{} ->
	  'v_msg_Response.GetContainers.Container'(Msg,
						   ['Response.GetContainers.Container']);
      #'Response.GetContainers'{} ->
	  'v_msg_Response.GetContainers'(Msg,
					 ['Response.GetContainers']);
      #'Response.GetState'{} ->
	  'v_msg_Response.GetState'(Msg, ['Response.GetState']);
      #'Response.GetVersion'{} ->
	  'v_msg_Response.GetVersion'(Msg,
				      ['Response.GetVersion']);
      #'Response.GetFlags'{} ->
	  'v_msg_Response.GetFlags'(Msg, ['Response.GetFlags']);
      #'Response.GetHealth'{} ->
	  'v_msg_Response.GetHealth'(Msg, ['Response.GetHealth']);
      #'Response'{} -> v_msg_Response(Msg, ['Response']);
      #'Filters'{} -> v_msg_Filters(Msg, ['Filters']);
      #'Credentials'{} ->
	  v_msg_Credentials(Msg, ['Credentials']);
      #'RateLimit'{} -> v_msg_RateLimit(Msg, ['RateLimit']);
      #'RateLimits'{} ->
	  v_msg_RateLimits(Msg, ['RateLimits']);
      #'OfferID'{} -> v_msg_OfferID(Msg, ['OfferID']);
      #'InverseOffer'{} ->
	  v_msg_InverseOffer(Msg, ['InverseOffer']);
      #'ResourceUsage.Executor'{} ->
	  'v_msg_ResourceUsage.Executor'(Msg,
					 ['ResourceUsage.Executor']);
      #'ResourceUsage'{} ->
	  v_msg_ResourceUsage(Msg, ['ResourceUsage']);
      #'Offer'{} -> v_msg_Offer(Msg, ['Offer']);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,'v_msg_Environment.Variable'/2}).
'v_msg_Environment.Variable'(#'Environment.Variable'{name
							 = F1,
						     value = F2},
			     Path) ->
    v_type_string(F1, [name | Path]),
    v_type_string(F2, [value | Path]),
    ok;
'v_msg_Environment.Variable'(X, Path) ->
    mk_type_error({expected_msg, 'Environment.Variable'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Environment/2}).
v_msg_Environment(#'Environment'{variables = F1},
		  Path) ->
    if is_list(F1) ->
	   _ = ['v_msg_Environment.Variable'(Elem,
					     [variables | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Environment.Variable'}},
			 F1, Path)
    end,
    ok;
v_msg_Environment(X, Path) ->
    mk_type_error({expected_msg, 'Environment'}, X, Path).

-dialyzer({nowarn_function,'v_msg_CommandInfo.URI'/2}).
'v_msg_CommandInfo.URI'(#'CommandInfo.URI'{value = F1,
					   executable = F2, extract = F3,
					   cache = F4, output_file = F5},
			Path) ->
    v_type_string(F1, [value | Path]),
    if F2 == undefined -> ok;
       true -> v_type_bool(F2, [executable | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [extract | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [cache | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [output_file | Path])
    end,
    ok;
'v_msg_CommandInfo.URI'(X, Path) ->
    mk_type_error({expected_msg, 'CommandInfo.URI'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_CommandInfo/2}).
v_msg_CommandInfo(#'CommandInfo'{uris = F1,
				 environment = F2, shell = F3, value = F4,
				 arguments = F5, user = F6},
		  Path) ->
    if is_list(F1) ->
	   _ = ['v_msg_CommandInfo.URI'(Elem, [uris | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'CommandInfo.URI'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Environment(F2, [environment | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [shell | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [value | Path])
    end,
    if is_list(F5) ->
	   _ = [v_type_string(Elem, [arguments | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F5, Path)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [user | Path])
    end,
    ok;
v_msg_CommandInfo(X, Path) ->
    mk_type_error({expected_msg, 'CommandInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_Parameter/2}).
v_msg_Parameter(#'Parameter'{key = F1, value = F2},
		Path) ->
    v_type_string(F1, [key | Path]),
    v_type_string(F2, [value | Path]),
    ok;
v_msg_Parameter(X, Path) ->
    mk_type_error({expected_msg, 'Parameter'}, X, Path).

-dialyzer({nowarn_function,'v_msg_ContainerInfo.DockerInfo.PortMapping'/2}).
'v_msg_ContainerInfo.DockerInfo.PortMapping'(#'ContainerInfo.DockerInfo.PortMapping'{host_port
											 =
											 F1,
										     container_port
											 =
											 F2,
										     protocol
											 =
											 F3},
					     Path) ->
    v_type_uint32(F1, [host_port | Path]),
    v_type_uint32(F2, [container_port | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [protocol | Path])
    end,
    ok;
'v_msg_ContainerInfo.DockerInfo.PortMapping'(X, Path) ->
    mk_type_error({expected_msg,
		   'ContainerInfo.DockerInfo.PortMapping'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_ContainerInfo.DockerInfo'/2}).
'v_msg_ContainerInfo.DockerInfo'(#'ContainerInfo.DockerInfo'{image
								 = F1,
							     network = F2,
							     port_mappings = F3,
							     privileged = F4,
							     parameters = F5,
							     force_pull_image =
								 F6,
							     volume_driver =
								 F7},
				 Path) ->
    v_type_string(F1, [image | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_enum_ContainerInfo.DockerInfo.Network'(F2,
						     [network | Path])
    end,
    if is_list(F3) ->
	   _ = ['v_msg_ContainerInfo.DockerInfo.PortMapping'(Elem,
							     [port_mappings
							      | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ContainerInfo.DockerInfo.PortMapping'}},
			 F3, Path)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [privileged | Path])
    end,
    if is_list(F5) ->
	   _ = [v_msg_Parameter(Elem, [parameters | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Parameter'}}, F5,
			 Path)
    end,
    if F6 == undefined -> ok;
       true -> v_type_bool(F6, [force_pull_image | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [volume_driver | Path])
    end,
    ok;
'v_msg_ContainerInfo.DockerInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'ContainerInfo.DockerInfo'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_TimeInfo/2}).
v_msg_TimeInfo(#'TimeInfo'{nanoseconds = F1}, Path) ->
    v_type_int64(F1, [nanoseconds | Path]), ok;
v_msg_TimeInfo(X, Path) ->
    mk_type_error({expected_msg, 'TimeInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_WeightInfo/2}).
v_msg_WeightInfo(#'WeightInfo'{weight = F1, role = F2},
		 Path) ->
    v_type_double(F1, [weight | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [role | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_DurationInfo/2}).
v_msg_DurationInfo(#'DurationInfo'{nanoseconds = F1},
		   Path) ->
    v_type_int64(F1, [nanoseconds | Path]), ok;
v_msg_DurationInfo(X, Path) ->
    mk_type_error({expected_msg, 'DurationInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_Unavailability/2}).
v_msg_Unavailability(#'Unavailability'{start = F1,
				       duration = F2},
		     Path) ->
    v_msg_TimeInfo(F1, [start | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_DurationInfo(F2, [duration | Path])
    end,
    ok;
v_msg_Unavailability(X, Path) ->
    mk_type_error({expected_msg, 'Unavailability'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_MachineID/2}).
v_msg_MachineID(#'MachineID'{hostname = F1, ip = F2},
		Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [hostname | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ip | Path])
    end,
    ok;
v_msg_MachineID(X, Path) ->
    mk_type_error({expected_msg, 'MachineID'}, X, Path).

-dialyzer({nowarn_function,v_msg_MachineInfo/2}).
v_msg_MachineInfo(#'MachineInfo'{id = F1, mode = F2,
				 unavailability = F3},
		  Path) ->
    v_msg_MachineID(F1, [id | Path]),
    if F2 == undefined -> ok;
       true -> 'v_enum_MachineInfo.Mode'(F2, [mode | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_Unavailability(F3, [unavailability | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_Resource.RevocableInfo'/2}).
'v_msg_Resource.RevocableInfo'(#'Resource.RevocableInfo'{},
			       _Path) ->
    ok;
'v_msg_Resource.RevocableInfo'(X, Path) ->
    mk_type_error({expected_msg, 'Resource.RevocableInfo'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Resource.DiskInfo.Source.Mount'/2}).
'v_msg_Resource.DiskInfo.Source.Mount'(#'Resource.DiskInfo.Source.Mount'{root
									     =
									     F1},
				       Path) ->
    v_type_string(F1, [root | Path]), ok;
'v_msg_Resource.DiskInfo.Source.Mount'(X, Path) ->
    mk_type_error({expected_msg,
		   'Resource.DiskInfo.Source.Mount'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Resource.DiskInfo.Source.Path'/2}).
'v_msg_Resource.DiskInfo.Source.Path'(#'Resource.DiskInfo.Source.Path'{root
									   =
									   F1},
				      Path) ->
    v_type_string(F1, [root | Path]), ok;
'v_msg_Resource.DiskInfo.Source.Path'(X, Path) ->
    mk_type_error({expected_msg,
		   'Resource.DiskInfo.Source.Path'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Resource.DiskInfo.Source'/2}).
'v_msg_Resource.DiskInfo.Source'(#'Resource.DiskInfo.Source'{type
								 = F1,
							     path = F2,
							     mount = F3},
				 Path) ->
    'v_enum_Resource.DiskInfo.Source.Type'(F1,
					   [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_Resource.DiskInfo.Source.Path'(F2, [path | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_Resource.DiskInfo.Source.Mount'(F3,
						  [mount | Path])
    end,
    ok;
'v_msg_Resource.DiskInfo.Source'(X, Path) ->
    mk_type_error({expected_msg,
		   'Resource.DiskInfo.Source'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_Parameters/2}).
v_msg_Parameters(#'Parameters'{parameter = F1}, Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Parameter(Elem, [parameter | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Parameter'}}, F1,
			 Path)
    end,
    ok;
v_msg_Parameters(X, Path) ->
    mk_type_error({expected_msg, 'Parameters'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Volume.Source.DockerVolume'/2}).
'v_msg_Volume.Source.DockerVolume'(#'Volume.Source.DockerVolume'{driver
								     = F1,
								 name = F2,
								 driver_options
								     = F3},
				   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [driver | Path])
    end,
    v_type_string(F2, [name | Path]),
    if F3 == undefined -> ok;
       true -> v_msg_Parameters(F3, [driver_options | Path])
    end,
    ok;
'v_msg_Volume.Source.DockerVolume'(X, Path) ->
    mk_type_error({expected_msg,
		   'Volume.Source.DockerVolume'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Volume.Source'/2}).
'v_msg_Volume.Source'(#'Volume.Source'{type = F1,
				       docker_volume = F2},
		      Path) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Volume.Source.Type'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_Volume.Source.DockerVolume'(F2,
					      [docker_volume | Path])
    end,
    ok;
'v_msg_Volume.Source'(X, Path) ->
    mk_type_error({expected_msg, 'Volume.Source'}, X, Path).

-dialyzer({nowarn_function,v_msg_Credential/2}).
v_msg_Credential(#'Credential'{principal = F1,
			       secret = F2},
		 Path) ->
    v_type_string(F1, [principal | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [secret | Path])
    end,
    ok;
v_msg_Credential(X, Path) ->
    mk_type_error({expected_msg, 'Credential'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Image.Docker'/2}).
'v_msg_Image.Docker'(#'Image.Docker'{name = F1,
				     credential = F2},
		     Path) ->
    v_type_string(F1, [name | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_Credential(F2, [credential | Path])
    end,
    ok;
'v_msg_Image.Docker'(X, Path) ->
    mk_type_error({expected_msg, 'Image.Docker'}, X, Path).

-dialyzer({nowarn_function,v_msg_Label/2}).
v_msg_Label(#'Label'{key = F1, value = F2}, Path) ->
    v_type_string(F1, [key | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path])
    end,
    ok;
v_msg_Label(X, Path) ->
    mk_type_error({expected_msg, 'Label'}, X, Path).

-dialyzer({nowarn_function,v_msg_Labels/2}).
v_msg_Labels(#'Labels'{labels = F1}, Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Label(Elem, [labels | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Label'}}, F1,
			 Path)
    end,
    ok;
v_msg_Labels(X, Path) ->
    mk_type_error({expected_msg, 'Labels'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Image.Appc'/2}).
'v_msg_Image.Appc'(#'Image.Appc'{name = F1, id = F2,
				 labels = F3},
		   Path) ->
    v_type_string(F1, [name | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [id | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_msg_Labels(F3, [labels | Path])
    end,
    ok;
'v_msg_Image.Appc'(X, Path) ->
    mk_type_error({expected_msg, 'Image.Appc'}, X, Path).

-dialyzer({nowarn_function,v_msg_Image/2}).
v_msg_Image(#'Image'{type = F1, appc = F2, docker = F3,
		     cached = F4},
	    Path) ->
    'v_enum_Image.Type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true -> 'v_msg_Image.Appc'(F2, [appc | Path])
    end,
    if F3 == undefined -> ok;
       true -> 'v_msg_Image.Docker'(F3, [docker | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [cached | Path])
    end,
    ok;
v_msg_Image(X, Path) ->
    mk_type_error({expected_msg, 'Image'}, X, Path).

-dialyzer({nowarn_function,v_msg_Volume/2}).
v_msg_Volume(#'Volume'{mode = F1, container_path = F2,
		       host_path = F3, image = F4, source = F5},
	     Path) ->
    'v_enum_Volume.Mode'(F1, [mode | Path]),
    v_type_string(F2, [container_path | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [host_path | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_Image(F4, [image | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Volume.Source'(F5, [source | Path])
    end,
    ok;
v_msg_Volume(X, Path) ->
    mk_type_error({expected_msg, 'Volume'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Resource.DiskInfo.Persistence'/2}).
'v_msg_Resource.DiskInfo.Persistence'(#'Resource.DiskInfo.Persistence'{id
									   = F1,
								       principal
									   =
									   F2},
				      Path) ->
    v_type_string(F1, [id | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [principal | Path])
    end,
    ok;
'v_msg_Resource.DiskInfo.Persistence'(X, Path) ->
    mk_type_error({expected_msg,
		   'Resource.DiskInfo.Persistence'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Resource.DiskInfo'/2}).
'v_msg_Resource.DiskInfo'(#'Resource.DiskInfo'{persistence
						   = F1,
					       volume = F2, source = F3},
			  Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_msg_Resource.DiskInfo.Persistence'(F1,
						 [persistence | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Volume(F2, [volume | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_Resource.DiskInfo.Source'(F3, [source | Path])
    end,
    ok;
'v_msg_Resource.DiskInfo'(X, Path) ->
    mk_type_error({expected_msg, 'Resource.DiskInfo'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_Resource.ReservationInfo'/2}).
'v_msg_Resource.ReservationInfo'(#'Resource.ReservationInfo'{principal
								 = F1,
							     labels = F2},
				 Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [principal | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_Labels(F2, [labels | Path])
    end,
    ok;
'v_msg_Resource.ReservationInfo'(X, Path) ->
    mk_type_error({expected_msg,
		   'Resource.ReservationInfo'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Value.Set'/2}).
'v_msg_Value.Set'(#'Value.Set'{item = F1}, Path) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [item | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1, Path)
    end,
    ok;
'v_msg_Value.Set'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Set'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Value.Range'/2}).
'v_msg_Value.Range'(#'Value.Range'{'begin' = F1,
				   'end' = F2},
		    Path) ->
    v_type_uint64(F1, ['begin' | Path]),
    v_type_uint64(F2, ['end' | Path]),
    ok;
'v_msg_Value.Range'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Range'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Value.Ranges'/2}).
'v_msg_Value.Ranges'(#'Value.Ranges'{range = F1},
		     Path) ->
    if is_list(F1) ->
	   _ = ['v_msg_Value.Range'(Elem, [range | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Value.Range'}},
			 F1, Path)
    end,
    ok;
'v_msg_Value.Ranges'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Ranges'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Value.Scalar'/2}).
'v_msg_Value.Scalar'(#'Value.Scalar'{value = F1},
		     Path) ->
    v_type_double(F1, [value | Path]), ok;
'v_msg_Value.Scalar'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Scalar'}, X, Path).

-dialyzer({nowarn_function,v_msg_Resource/2}).
v_msg_Resource(#'Resource'{name = F1, type = F2,
			   scalar = F3, ranges = F4, set = F5, role = F6,
			   reservation = F7, disk = F8, revocable = F9},
	       Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_Value.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true -> 'v_msg_Value.Scalar'(F3, [scalar | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Value.Ranges'(F4, [ranges | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Value.Set'(F5, [set | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [role | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_Resource.ReservationInfo'(F7,
					    [reservation | Path])
    end,
    if F8 == undefined -> ok;
       true -> 'v_msg_Resource.DiskInfo'(F8, [disk | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_Resource.RevocableInfo'(F9, [revocable | Path])
    end,
    ok;
v_msg_Resource(X, Path) ->
    mk_type_error({expected_msg, 'Resource'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Offer.Operation.Destroy'/2}).
'v_msg_Offer.Operation.Destroy'(#'Offer.Operation.Destroy'{volumes
							       = F1},
				Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Resource(Elem, [volumes | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Offer.Operation.Destroy'(X, Path) ->
    mk_type_error({expected_msg, 'Offer.Operation.Destroy'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Offer.Operation.Create'/2}).
'v_msg_Offer.Operation.Create'(#'Offer.Operation.Create'{volumes
							     = F1},
			       Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Resource(Elem, [volumes | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Offer.Operation.Create'(X, Path) ->
    mk_type_error({expected_msg, 'Offer.Operation.Create'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Offer.Operation.Unreserve'/2}).
'v_msg_Offer.Operation.Unreserve'(#'Offer.Operation.Unreserve'{resources
								   = F1},
				  Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Offer.Operation.Unreserve'(X, Path) ->
    mk_type_error({expected_msg,
		   'Offer.Operation.Unreserve'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Offer.Operation.Reserve'/2}).
'v_msg_Offer.Operation.Reserve'(#'Offer.Operation.Reserve'{resources
							       = F1},
				Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Offer.Operation.Reserve'(X, Path) ->
    mk_type_error({expected_msg, 'Offer.Operation.Reserve'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_Port/2}).
v_msg_Port(#'Port'{number = F1, name = F2,
		   protocol = F3, visibility = F4, labels = F5},
	   Path) ->
    v_type_uint32(F1, [number | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [protocol | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_enum_DiscoveryInfo.Visibility'(F4,
					     [visibility | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_msg_Labels(F5, [labels | Path])
    end,
    ok;
v_msg_Port(X, Path) ->
    mk_type_error({expected_msg, 'Port'}, X, Path).

-dialyzer({nowarn_function,v_msg_Ports/2}).
v_msg_Ports(#'Ports'{ports = F1}, Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Port(Elem, [ports | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Port'}}, F1,
			 Path)
    end,
    ok;
v_msg_Ports(X, Path) ->
    mk_type_error({expected_msg, 'Ports'}, X, Path).

-dialyzer({nowarn_function,v_msg_DiscoveryInfo/2}).
v_msg_DiscoveryInfo(#'DiscoveryInfo'{visibility = F1,
				     name = F2, environment = F3, location = F4,
				     version = F5, ports = F6, labels = F7},
		    Path) ->
    'v_enum_DiscoveryInfo.Visibility'(F1,
				      [visibility | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [environment | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [location | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [version | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_Ports(F6, [ports | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_msg_Labels(F7, [labels | Path])
    end,
    ok;
v_msg_DiscoveryInfo(X, Path) ->
    mk_type_error({expected_msg, 'DiscoveryInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_KillPolicy/2}).
v_msg_KillPolicy(#'KillPolicy'{grace_period = F1},
		 Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_DurationInfo(F1, [grace_period | Path])
    end,
    ok;
v_msg_KillPolicy(X, Path) ->
    mk_type_error({expected_msg, 'KillPolicy'}, X, Path).

-dialyzer({nowarn_function,'v_msg_HealthCheck.HTTP'/2}).
'v_msg_HealthCheck.HTTP'(#'HealthCheck.HTTP'{port = F1,
					     path = F2, statuses = F3},
			 Path) ->
    v_type_uint32(F1, [port | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [path | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_uint32(Elem, [statuses | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, uint32}, F3, Path)
    end,
    ok;
'v_msg_HealthCheck.HTTP'(X, Path) ->
    mk_type_error({expected_msg, 'HealthCheck.HTTP'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_HealthCheck/2}).
v_msg_HealthCheck(#'HealthCheck'{http = F1,
				 delay_seconds = F2, interval_seconds = F3,
				 timeout_seconds = F4,
				 consecutive_failures = F5,
				 grace_period_seconds = F6, command = F7},
		  Path) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_HealthCheck.HTTP'(F1, [http | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [delay_seconds | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [interval_seconds | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [timeout_seconds | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [consecutive_failures | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_double(F6, [grace_period_seconds | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_msg_CommandInfo(F7, [command | Path])
    end,
    ok;
v_msg_HealthCheck(X, Path) ->
    mk_type_error({expected_msg, 'HealthCheck'}, X, Path).

-dialyzer({nowarn_function,'v_msg_NetworkInfo.IPAddress'/2}).
'v_msg_NetworkInfo.IPAddress'(#'NetworkInfo.IPAddress'{protocol
							   = F1,
						       ip_address = F2},
			      Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_NetworkInfo.Protocol'(F1, [protocol | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ip_address | Path])
    end,
    ok;
'v_msg_NetworkInfo.IPAddress'(X, Path) ->
    mk_type_error({expected_msg, 'NetworkInfo.IPAddress'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_NetworkInfo/2}).
v_msg_NetworkInfo(#'NetworkInfo'{ip_addresses = F1,
				 name = F2, groups = F3, labels = F4},
		  Path) ->
    if is_list(F1) ->
	   _ = ['v_msg_NetworkInfo.IPAddress'(Elem,
					      [ip_addresses | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'NetworkInfo.IPAddress'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if is_list(F3) ->
	   _ = [v_type_string(Elem, [groups | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F3, Path)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_Labels(F4, [labels | Path])
    end,
    ok;
v_msg_NetworkInfo(X, Path) ->
    mk_type_error({expected_msg, 'NetworkInfo'}, X, Path).

-dialyzer({nowarn_function,'v_msg_ContainerInfo.MesosInfo'/2}).
'v_msg_ContainerInfo.MesosInfo'(#'ContainerInfo.MesosInfo'{image
							       = F1},
				Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_Image(F1, [image | Path])
    end,
    ok;
'v_msg_ContainerInfo.MesosInfo'(X, Path) ->
    mk_type_error({expected_msg, 'ContainerInfo.MesosInfo'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ContainerInfo/2}).
v_msg_ContainerInfo(#'ContainerInfo'{type = F1,
				     volumes = F2, hostname = F3, docker = F4,
				     mesos = F5, network_infos = F6},
		    Path) ->
    'v_enum_ContainerInfo.Type'(F1, [type | Path]),
    if is_list(F2) ->
	   _ = [v_msg_Volume(Elem, [volumes | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Volume'}}, F2,
			 Path)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [hostname | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_ContainerInfo.DockerInfo'(F4, [docker | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_ContainerInfo.MesosInfo'(F5, [mesos | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_NetworkInfo(Elem, [network_infos | Path])
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'NetworkInfo'}},
			 F6, Path)
    end,
    ok;
v_msg_ContainerInfo(X, Path) ->
    mk_type_error({expected_msg, 'ContainerInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_FrameworkID/2}).
v_msg_FrameworkID(#'FrameworkID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_FrameworkID(X, Path) ->
    mk_type_error({expected_msg, 'FrameworkID'}, X, Path).

-dialyzer({nowarn_function,v_msg_ExecutorID/2}).
v_msg_ExecutorID(#'ExecutorID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_ExecutorID(X, Path) ->
    mk_type_error({expected_msg, 'ExecutorID'}, X, Path).

-dialyzer({nowarn_function,v_msg_ExecutorInfo/2}).
v_msg_ExecutorInfo(#'ExecutorInfo'{executor_id = F1,
				   framework_id = F2, command = F3,
				   container = F4, resources = F5, name = F6,
				   source = F7, data = F8, discovery = F9,
				   shutdown_grace_period = F10, labels = F11},
		   Path) ->
    v_msg_ExecutorID(F1, [executor_id | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_FrameworkID(F2, [framework_id | Path])
    end,
    v_msg_CommandInfo(F3, [command | Path]),
    if F4 == undefined -> ok;
       true -> v_msg_ContainerInfo(F4, [container | Path])
    end,
    if is_list(F5) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F5,
			 Path)
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [name | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [source | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_bytes(F8, [data | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_msg_DiscoveryInfo(F9, [discovery | Path])
    end,
    if F10 == undefined -> ok;
       true ->
	   v_msg_DurationInfo(F10, [shutdown_grace_period | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_msg_Labels(F11, [labels | Path])
    end,
    ok;
v_msg_ExecutorInfo(X, Path) ->
    mk_type_error({expected_msg, 'ExecutorInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_AgentID/2}).
v_msg_AgentID(#'AgentID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_AgentID(X, Path) ->
    mk_type_error({expected_msg, 'AgentID'}, X, Path).

-dialyzer({nowarn_function,v_msg_TaskID/2}).
v_msg_TaskID(#'TaskID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_TaskID(X, Path) ->
    mk_type_error({expected_msg, 'TaskID'}, X, Path).

-dialyzer({nowarn_function,v_msg_TaskInfo/2}).
v_msg_TaskInfo(#'TaskInfo'{name = F1, task_id = F2,
			   agent_id = F3, resources = F4, executor = F5,
			   command = F6, container = F7, health_check = F8,
			   kill_policy = F9, data = F10, labels = F11,
			   discovery = F12},
	       Path) ->
    v_type_string(F1, [name | Path]),
    v_msg_TaskID(F2, [task_id | Path]),
    v_msg_AgentID(F3, [agent_id | Path]),
    if is_list(F4) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F4,
			 Path)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_ExecutorInfo(F5, [executor | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_msg_CommandInfo(F6, [command | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_msg_ContainerInfo(F7, [container | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_msg_HealthCheck(F8, [health_check | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_msg_KillPolicy(F9, [kill_policy | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [data | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_msg_Labels(F11, [labels | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_msg_DiscoveryInfo(F12, [discovery | Path])
    end,
    ok;
v_msg_TaskInfo(X, Path) ->
    mk_type_error({expected_msg, 'TaskInfo'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Offer.Operation.Launch'/2}).
'v_msg_Offer.Operation.Launch'(#'Offer.Operation.Launch'{task_infos
							     = F1},
			       Path) ->
    if is_list(F1) ->
	   _ = [v_msg_TaskInfo(Elem, [task_infos | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'TaskInfo'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Offer.Operation.Launch'(X, Path) ->
    mk_type_error({expected_msg, 'Offer.Operation.Launch'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Offer.Operation'/2}).
'v_msg_Offer.Operation'(#'Offer.Operation'{type = F1,
					   launch = F2, reserve = F3,
					   unreserve = F4, create = F5,
					   destroy = F6},
			Path) ->
    'v_enum_Offer.Operation.Type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true ->
	   'v_msg_Offer.Operation.Launch'(F2, [launch | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_Offer.Operation.Reserve'(F3, [reserve | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_Offer.Operation.Unreserve'(F4,
					     [unreserve | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_Offer.Operation.Create'(F5, [create | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_Offer.Operation.Destroy'(F6, [destroy | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Flag/2}).
v_msg_Flag(#'Flag'{name = F1, value = F2}, Path) ->
    v_type_string(F1, [name | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path])
    end,
    ok;
v_msg_Flag(X, Path) ->
    mk_type_error({expected_msg, 'Flag'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Value.Text'/2}).
'v_msg_Value.Text'(#'Value.Text'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
'v_msg_Value.Text'(X, Path) ->
    mk_type_error({expected_msg, 'Value.Text'}, X, Path).

-dialyzer({nowarn_function,v_msg_Value/2}).
v_msg_Value(#'Value'{type = F1, scalar = F2,
		     ranges = F3, set = F4, text = F5},
	    Path) ->
    'v_enum_Value.Type'(F1, [type | Path]),
    if F2 == undefined -> ok;
       true -> 'v_msg_Value.Scalar'(F2, [scalar | Path])
    end,
    if F3 == undefined -> ok;
       true -> 'v_msg_Value.Ranges'(F3, [ranges | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Value.Set'(F4, [set | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Value.Text'(F5, [text | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Request/2}).
v_msg_Request(#'Request'{agent_id = F1, resources = F2},
	      Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_AgentID(F1, [agent_id | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F2,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_ContainerID/2}).
v_msg_ContainerID(#'ContainerID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_ContainerID(X, Path) ->
    mk_type_error({expected_msg, 'ContainerID'}, X, Path).

-dialyzer({nowarn_function,v_msg_Metric/2}).
v_msg_Metric(#'Metric'{name = F1, value = F2}, Path) ->
    v_type_string(F1, [name | Path]),
    if F2 == undefined -> ok;
       true -> v_type_double(F2, [value | Path])
    end,
    ok;
v_msg_Metric(X, Path) ->
    mk_type_error({expected_msg, 'Metric'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Response.GetFileContents'/2}).
'v_msg_Response.GetFileContents'(#'Response.GetFileContents'{data
								 = F1},
				 Path) ->
    if is_list(F1) ->
	   _ = [v_type_bytes(Elem, [data | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, bytes}, F1, Path)
    end,
    ok;
'v_msg_Response.GetFileContents'(X, Path) ->
    mk_type_error({expected_msg,
		   'Response.GetFileContents'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_CgroupInfo.NetCls'/2}).
'v_msg_CgroupInfo.NetCls'(#'CgroupInfo.NetCls'{classid =
						   F1},
			  Path) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [classid | Path])
    end,
    ok;
'v_msg_CgroupInfo.NetCls'(X, Path) ->
    mk_type_error({expected_msg, 'CgroupInfo.NetCls'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_Call.GetMetrics'/2}).
'v_msg_Call.GetMetrics'(#'Call.GetMetrics'{timeout =
					       F1},
			Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_DurationInfo(F1, [timeout | Path])
    end,
    ok;
'v_msg_Call.GetMetrics'(X, Path) ->
    mk_type_error({expected_msg, 'Call.GetMetrics'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_UdpStatistics/2}).
v_msg_UdpStatistics(#'UdpStatistics'{'InDatagrams' = F1,
				     'NoPorts' = F2, 'InErrors' = F3,
				     'OutDatagrams' = F4, 'RcvbufErrors' = F5,
				     'SndbufErrors' = F6, 'InCsumErrors' = F7,
				     'IgnoredMulti' = F8},
		    Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, ['InDatagrams' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, ['NoPorts' | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, ['InErrors' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, ['OutDatagrams' | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, ['RcvbufErrors' | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, ['SndbufErrors' | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int64(F7, ['InCsumErrors' | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int64(F8, ['IgnoredMulti' | Path])
    end,
    ok;
v_msg_UdpStatistics(X, Path) ->
    mk_type_error({expected_msg, 'UdpStatistics'}, X, Path).

-dialyzer({nowarn_function,v_msg_TcpStatistics/2}).
v_msg_TcpStatistics(#'TcpStatistics'{'RtoAlgorithm' =
					 F1,
				     'RtoMin' = F2, 'RtoMax' = F3,
				     'MaxConn' = F4, 'ActiveOpens' = F5,
				     'PassiveOpens' = F6, 'AttemptFails' = F7,
				     'EstabResets' = F8, 'CurrEstab' = F9,
				     'InSegs' = F10, 'OutSegs' = F11,
				     'RetransSegs' = F12, 'InErrs' = F13,
				     'OutRsts' = F14, 'InCsumErrors' = F15},
		    Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, ['RtoAlgorithm' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, ['RtoMin' | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, ['RtoMax' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, ['MaxConn' | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, ['ActiveOpens' | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, ['PassiveOpens' | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int64(F7, ['AttemptFails' | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int64(F8, ['EstabResets' | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_int64(F9, ['CurrEstab' | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, ['InSegs' | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, ['OutSegs' | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_int64(F12, ['RetransSegs' | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_int64(F13, ['InErrs' | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_int64(F14, ['OutRsts' | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_int64(F15, ['InCsumErrors' | Path])
    end,
    ok;
v_msg_TcpStatistics(X, Path) ->
    mk_type_error({expected_msg, 'TcpStatistics'}, X, Path).

-dialyzer({nowarn_function,v_msg_IpStatistics/2}).
v_msg_IpStatistics(#'IpStatistics'{'Forwarding' = F1,
				   'DefaultTTL' = F2, 'InReceives' = F3,
				   'InHdrErrors' = F4, 'InAddrErrors' = F5,
				   'ForwDatagrams' = F6, 'InUnknownProtos' = F7,
				   'InDiscards' = F8, 'InDelivers' = F9,
				   'OutRequests' = F10, 'OutDiscards' = F11,
				   'OutNoRoutes' = F12, 'ReasmTimeout' = F13,
				   'ReasmReqds' = F14, 'ReasmOKs' = F15,
				   'ReasmFails' = F16, 'FragOKs' = F17,
				   'FragFails' = F18, 'FragCreates' = F19},
		   Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, ['Forwarding' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, ['DefaultTTL' | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, ['InReceives' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, ['InHdrErrors' | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, ['InAddrErrors' | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, ['ForwDatagrams' | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int64(F7, ['InUnknownProtos' | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int64(F8, ['InDiscards' | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_int64(F9, ['InDelivers' | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, ['OutRequests' | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, ['OutDiscards' | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_int64(F12, ['OutNoRoutes' | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_int64(F13, ['ReasmTimeout' | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_int64(F14, ['ReasmReqds' | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_int64(F15, ['ReasmOKs' | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_int64(F16, ['ReasmFails' | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_int64(F17, ['FragOKs' | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_int64(F18, ['FragFails' | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_int64(F19, ['FragCreates' | Path])
    end,
    ok;
v_msg_IpStatistics(X, Path) ->
    mk_type_error({expected_msg, 'IpStatistics'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Response.GetMetrics'/2}).
'v_msg_Response.GetMetrics'(#'Response.GetMetrics'{metrics
						       = F1},
			    Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Metric(Elem, [metrics | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Metric'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Response.GetMetrics'(X, Path) ->
    mk_type_error({expected_msg, 'Response.GetMetrics'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_VersionInfo/2}).
v_msg_VersionInfo(#'VersionInfo'{version = F1,
				 build_date = F2, build_time = F3,
				 build_user = F4, git_sha = F5, git_branch = F6,
				 git_tag = F7},
		  Path) ->
    v_type_string(F1, [version | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [build_date | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_double(F3, [build_time | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [build_user | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [git_sha | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [git_branch | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [git_tag | Path])
    end,
    ok;
v_msg_VersionInfo(X, Path) ->
    mk_type_error({expected_msg, 'VersionInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_Address/2}).
v_msg_Address(#'Address'{hostname = F1, ip = F2,
			 port = F3},
	      Path) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [hostname | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [ip | Path])
    end,
    v_type_int32(F3, [port | Path]),
    ok;
v_msg_Address(X, Path) ->
    mk_type_error({expected_msg, 'Address'}, X, Path).

-dialyzer({nowarn_function,v_msg_MasterInfo/2}).
v_msg_MasterInfo(#'MasterInfo'{id = F1, ip = F2,
			       port = F3, pid = F4, hostname = F5, version = F6,
			       address = F7},
		 Path) ->
    v_type_string(F1, [id | Path]),
    v_type_uint32(F2, [ip | Path]),
    v_type_uint32(F3, [port | Path]),
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [pid | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [hostname | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [version | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_msg_Address(F7, [address | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_FrameworkInfo.Capability'/2}).
'v_msg_FrameworkInfo.Capability'(#'FrameworkInfo.Capability'{type
								 = F1},
				 Path) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_FrameworkInfo.Capability.Type'(F1,
						  [type | Path])
    end,
    ok;
'v_msg_FrameworkInfo.Capability'(X, Path) ->
    mk_type_error({expected_msg,
		   'FrameworkInfo.Capability'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_FrameworkInfo/2}).
v_msg_FrameworkInfo(#'FrameworkInfo'{user = F1,
				     name = F2, id = F3, failover_timeout = F4,
				     checkpoint = F5, role = F6, hostname = F7,
				     principal = F8, webui_url = F9,
				     capabilities = F10, labels = F11},
		    Path) ->
    v_type_string(F1, [user | Path]),
    v_type_string(F2, [name | Path]),
    if F3 == undefined -> ok;
       true -> v_msg_FrameworkID(F3, [id | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [failover_timeout | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_bool(F5, [checkpoint | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [role | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [hostname | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_string(F8, [principal | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [webui_url | Path])
    end,
    if is_list(F10) ->
	   _ = ['v_msg_FrameworkInfo.Capability'(Elem,
						 [capabilities | Path])
		|| Elem <- F10],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'FrameworkInfo.Capability'}},
			 F10, Path)
    end,
    if F11 == undefined -> ok;
       true -> v_msg_Labels(F11, [labels | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_URL/2}).
v_msg_URL(#'URL'{scheme = F1, address = F2, path = F3,
		 query = F4, fragment = F5},
	  Path) ->
    v_type_string(F1, [scheme | Path]),
    v_msg_Address(F2, [address | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [path | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_Parameter(Elem, [query | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Parameter'}}, F4,
			 Path)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [fragment | Path])
    end,
    ok;
v_msg_URL(X, Path) ->
    mk_type_error({expected_msg, 'URL'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Call.ReadFile'/2}).
'v_msg_Call.ReadFile'(#'Call.ReadFile'{path = F1,
				       offset = F2, length = F3},
		      Path) ->
    v_type_string(F1, [path | Path]),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [offset | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [length | Path])
    end,
    ok;
'v_msg_Call.ReadFile'(X, Path) ->
    mk_type_error({expected_msg, 'Call.ReadFile'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Call.ListFiles'/2}).
'v_msg_Call.ListFiles'(#'Call.ListFiles'{path = F1},
		       Path) ->
    v_type_string(F1, [path | Path]), ok;
'v_msg_Call.ListFiles'(X, Path) ->
    mk_type_error({expected_msg, 'Call.ListFiles'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_Call.SetLoggingLevel'/2}).
'v_msg_Call.SetLoggingLevel'(#'Call.SetLoggingLevel'{level
							 = F1,
						     duration = F2},
			     Path) ->
    v_type_uint32(F1, [level | Path]),
    v_msg_DurationInfo(F2, [duration | Path]),
    ok;
'v_msg_Call.SetLoggingLevel'(X, Path) ->
    mk_type_error({expected_msg, 'Call.SetLoggingLevel'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Call/2}).
v_msg_Call(#'Call'{type = F1, get_metrics = F2,
		   set_logging_level = F3, list_files = F4,
		   read_file = F5},
	   Path) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Call.Type'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_Call.GetMetrics'(F2, [get_metrics | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_Call.SetLoggingLevel'(F3,
					[set_logging_level | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Call.ListFiles'(F4, [list_files | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Call.ReadFile'(F5, [read_file | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_ResourceUsage.Executor.Task'/2}).
'v_msg_ResourceUsage.Executor.Task'(#'ResourceUsage.Executor.Task'{name
								       = F1,
								   id = F2,
								   resources =
								       F3,
								   labels = F4},
				    Path) ->
    v_type_string(F1, [name | Path]),
    v_msg_TaskID(F2, [id | Path]),
    if is_list(F3) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F3,
			 Path)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_Labels(F4, [labels | Path])
    end,
    ok;
'v_msg_ResourceUsage.Executor.Task'(X, Path) ->
    mk_type_error({expected_msg,
		   'ResourceUsage.Executor.Task'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_Role/2}).
v_msg_Role(#'Role'{name = F1, weight = F2,
		   frameworks = F3, resources = F4},
	   Path) ->
    v_type_string(F1, [name | Path]),
    v_type_double(F2, [weight | Path]),
    if is_list(F3) ->
	   _ = [v_msg_FrameworkID(Elem, [frameworks | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'FrameworkID'}},
			 F3, Path)
    end,
    if is_list(F4) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F4,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_IcmpStatistics/2}).
v_msg_IcmpStatistics(#'IcmpStatistics'{'InMsgs' = F1,
				       'InErrors' = F2, 'InCsumErrors' = F3,
				       'InDestUnreachs' = F4,
				       'InTimeExcds' = F5, 'InParmProbs' = F6,
				       'InSrcQuenchs' = F7, 'InRedirects' = F8,
				       'InEchos' = F9, 'InEchoReps' = F10,
				       'InTimestamps' = F11,
				       'InTimestampReps' = F12,
				       'InAddrMasks' = F13,
				       'InAddrMaskReps' = F14, 'OutMsgs' = F15,
				       'OutErrors' = F16,
				       'OutDestUnreachs' = F17,
				       'OutTimeExcds' = F18,
				       'OutParmProbs' = F19,
				       'OutSrcQuenchs' = F20,
				       'OutRedirects' = F21, 'OutEchos' = F22,
				       'OutEchoReps' = F23,
				       'OutTimestamps' = F24,
				       'OutTimestampReps' = F25,
				       'OutAddrMasks' = F26,
				       'OutAddrMaskReps' = F27},
		     Path) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, ['InMsgs' | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_int64(F2, ['InErrors' | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, ['InCsumErrors' | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_int64(F4, ['InDestUnreachs' | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_int64(F5, ['InTimeExcds' | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_int64(F6, ['InParmProbs' | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int64(F7, ['InSrcQuenchs' | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_int64(F8, ['InRedirects' | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_int64(F9, ['InEchos' | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_int64(F10, ['InEchoReps' | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_int64(F11, ['InTimestamps' | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_int64(F12, ['InTimestampReps' | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_int64(F13, ['InAddrMasks' | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_int64(F14, ['InAddrMaskReps' | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_int64(F15, ['OutMsgs' | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_int64(F16, ['OutErrors' | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_int64(F17, ['OutDestUnreachs' | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_int64(F18, ['OutTimeExcds' | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_int64(F19, ['OutParmProbs' | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_int64(F20, ['OutSrcQuenchs' | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_int64(F21, ['OutRedirects' | Path])
    end,
    if F22 == undefined -> ok;
       true -> v_type_int64(F22, ['OutEchos' | Path])
    end,
    if F23 == undefined -> ok;
       true -> v_type_int64(F23, ['OutEchoReps' | Path])
    end,
    if F24 == undefined -> ok;
       true -> v_type_int64(F24, ['OutTimestamps' | Path])
    end,
    if F25 == undefined -> ok;
       true -> v_type_int64(F25, ['OutTimestampReps' | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_type_int64(F26, ['OutAddrMasks' | Path])
    end,
    if F27 == undefined -> ok;
       true -> v_type_int64(F27, ['OutAddrMaskReps' | Path])
    end,
    ok;
v_msg_IcmpStatistics(X, Path) ->
    mk_type_error({expected_msg, 'IcmpStatistics'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_SNMPStatistics/2}).
v_msg_SNMPStatistics(#'SNMPStatistics'{ip_stats = F1,
				       icmp_stats = F2, tcp_stats = F3,
				       udp_stats = F4},
		     Path) ->
    if F1 == undefined -> ok;
       true -> v_msg_IpStatistics(F1, [ip_stats | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_msg_IcmpStatistics(F2, [icmp_stats | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_msg_TcpStatistics(F3, [tcp_stats | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_UdpStatistics(F4, [udp_stats | Path])
    end,
    ok;
v_msg_SNMPStatistics(X, Path) ->
    mk_type_error({expected_msg, 'SNMPStatistics'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_TrafficControlStatistics/2}).
v_msg_TrafficControlStatistics(#'TrafficControlStatistics'{id
							       = F1,
							   backlog = F2,
							   bytes = F3,
							   drops = F4,
							   overlimits = F5,
							   packets = F6,
							   qlen = F7,
							   ratebps = F8,
							   ratepps = F9,
							   requeues = F10},
			       Path) ->
    v_type_string(F1, [id | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [backlog | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [bytes | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [drops | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint64(F5, [overlimits | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [packets | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [qlen | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [ratebps | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [ratepps | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [requeues | Path])
    end,
    ok;
v_msg_TrafficControlStatistics(X, Path) ->
    mk_type_error({expected_msg,
		   'TrafficControlStatistics'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_PerfStatistics/2}).
v_msg_PerfStatistics(#'PerfStatistics'{timestamp = F1,
				       duration = F2, cycles = F3,
				       stalled_cycles_frontend = F4,
				       stalled_cycles_backend = F5,
				       instructions = F6, cache_references = F7,
				       cache_misses = F8, branches = F9,
				       branch_misses = F10, bus_cycles = F11,
				       ref_cycles = F12, cpu_clock = F13,
				       task_clock = F14, page_faults = F15,
				       minor_faults = F16, major_faults = F17,
				       context_switches = F18,
				       cpu_migrations = F19,
				       alignment_faults = F20,
				       emulation_faults = F21,
				       l1_dcache_loads = F22,
				       l1_dcache_load_misses = F23,
				       l1_dcache_stores = F24,
				       l1_dcache_store_misses = F25,
				       l1_dcache_prefetches = F26,
				       l1_dcache_prefetch_misses = F27,
				       l1_icache_loads = F28,
				       l1_icache_load_misses = F29,
				       l1_icache_prefetches = F30,
				       l1_icache_prefetch_misses = F31,
				       llc_loads = F32, llc_load_misses = F33,
				       llc_stores = F34, llc_store_misses = F35,
				       llc_prefetches = F36,
				       llc_prefetch_misses = F37,
				       dtlb_loads = F38, dtlb_load_misses = F39,
				       dtlb_stores = F40,
				       dtlb_store_misses = F41,
				       dtlb_prefetches = F42,
				       dtlb_prefetch_misses = F43,
				       itlb_loads = F44, itlb_load_misses = F45,
				       branch_loads = F46,
				       branch_load_misses = F47,
				       node_loads = F48, node_load_misses = F49,
				       node_stores = F50,
				       node_store_misses = F51,
				       node_prefetches = F52,
				       node_prefetch_misses = F53},
		     Path) ->
    v_type_double(F1, [timestamp | Path]),
    v_type_double(F2, [duration | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [cycles | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4, [stalled_cycles_frontend | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_uint64(F5, [stalled_cycles_backend | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_uint64(F6, [instructions | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint64(F7, [cache_references | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint64(F8, [cache_misses | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_uint64(F9, [branches | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [branch_misses | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_uint64(F11, [bus_cycles | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint64(F12, [ref_cycles | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_type_double(F13, [cpu_clock | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_double(F14, [task_clock | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint64(F15, [page_faults | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint64(F16, [minor_faults | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint64(F17, [major_faults | Path])
    end,
    if F18 == undefined -> ok;
       true -> v_type_uint64(F18, [context_switches | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint64(F19, [cpu_migrations | Path])
    end,
    if F20 == undefined -> ok;
       true -> v_type_uint64(F20, [alignment_faults | Path])
    end,
    if F21 == undefined -> ok;
       true -> v_type_uint64(F21, [emulation_faults | Path])
    end,
    if F22 == undefined -> ok;
       true -> v_type_uint64(F22, [l1_dcache_loads | Path])
    end,
    if F23 == undefined -> ok;
       true ->
	   v_type_uint64(F23, [l1_dcache_load_misses | Path])
    end,
    if F24 == undefined -> ok;
       true -> v_type_uint64(F24, [l1_dcache_stores | Path])
    end,
    if F25 == undefined -> ok;
       true ->
	   v_type_uint64(F25, [l1_dcache_store_misses | Path])
    end,
    if F26 == undefined -> ok;
       true ->
	   v_type_uint64(F26, [l1_dcache_prefetches | Path])
    end,
    if F27 == undefined -> ok;
       true ->
	   v_type_uint64(F27, [l1_dcache_prefetch_misses | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_uint64(F28, [l1_icache_loads | Path])
    end,
    if F29 == undefined -> ok;
       true ->
	   v_type_uint64(F29, [l1_icache_load_misses | Path])
    end,
    if F30 == undefined -> ok;
       true ->
	   v_type_uint64(F30, [l1_icache_prefetches | Path])
    end,
    if F31 == undefined -> ok;
       true ->
	   v_type_uint64(F31, [l1_icache_prefetch_misses | Path])
    end,
    if F32 == undefined -> ok;
       true -> v_type_uint64(F32, [llc_loads | Path])
    end,
    if F33 == undefined -> ok;
       true -> v_type_uint64(F33, [llc_load_misses | Path])
    end,
    if F34 == undefined -> ok;
       true -> v_type_uint64(F34, [llc_stores | Path])
    end,
    if F35 == undefined -> ok;
       true -> v_type_uint64(F35, [llc_store_misses | Path])
    end,
    if F36 == undefined -> ok;
       true -> v_type_uint64(F36, [llc_prefetches | Path])
    end,
    if F37 == undefined -> ok;
       true -> v_type_uint64(F37, [llc_prefetch_misses | Path])
    end,
    if F38 == undefined -> ok;
       true -> v_type_uint64(F38, [dtlb_loads | Path])
    end,
    if F39 == undefined -> ok;
       true -> v_type_uint64(F39, [dtlb_load_misses | Path])
    end,
    if F40 == undefined -> ok;
       true -> v_type_uint64(F40, [dtlb_stores | Path])
    end,
    if F41 == undefined -> ok;
       true -> v_type_uint64(F41, [dtlb_store_misses | Path])
    end,
    if F42 == undefined -> ok;
       true -> v_type_uint64(F42, [dtlb_prefetches | Path])
    end,
    if F43 == undefined -> ok;
       true ->
	   v_type_uint64(F43, [dtlb_prefetch_misses | Path])
    end,
    if F44 == undefined -> ok;
       true -> v_type_uint64(F44, [itlb_loads | Path])
    end,
    if F45 == undefined -> ok;
       true -> v_type_uint64(F45, [itlb_load_misses | Path])
    end,
    if F46 == undefined -> ok;
       true -> v_type_uint64(F46, [branch_loads | Path])
    end,
    if F47 == undefined -> ok;
       true -> v_type_uint64(F47, [branch_load_misses | Path])
    end,
    if F48 == undefined -> ok;
       true -> v_type_uint64(F48, [node_loads | Path])
    end,
    if F49 == undefined -> ok;
       true -> v_type_uint64(F49, [node_load_misses | Path])
    end,
    if F50 == undefined -> ok;
       true -> v_type_uint64(F50, [node_stores | Path])
    end,
    if F51 == undefined -> ok;
       true -> v_type_uint64(F51, [node_store_misses | Path])
    end,
    if F52 == undefined -> ok;
       true -> v_type_uint64(F52, [node_prefetches | Path])
    end,
    if F53 == undefined -> ok;
       true ->
	   v_type_uint64(F53, [node_prefetch_misses | Path])
    end,
    ok;
v_msg_PerfStatistics(X, Path) ->
    mk_type_error({expected_msg, 'PerfStatistics'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_ResourceStatistics/2}).
v_msg_ResourceStatistics(#'ResourceStatistics'{timestamp
						   = F1,
					       processes = F2, threads = F3,
					       cpus_user_time_secs = F4,
					       cpus_system_time_secs = F5,
					       cpus_limit = F6,
					       cpus_nr_periods = F7,
					       cpus_nr_throttled = F8,
					       cpus_throttled_time_secs = F9,
					       mem_total_bytes = F10,
					       mem_total_memsw_bytes = F11,
					       mem_limit_bytes = F12,
					       mem_soft_limit_bytes = F13,
					       mem_file_bytes = F14,
					       mem_anon_bytes = F15,
					       mem_cache_bytes = F16,
					       mem_rss_bytes = F17,
					       mem_mapped_file_bytes = F18,
					       mem_swap_bytes = F19,
					       mem_unevictable_bytes = F20,
					       mem_low_pressure_counter = F21,
					       mem_medium_pressure_counter =
						   F22,
					       mem_critical_pressure_counter =
						   F23,
					       disk_limit_bytes = F24,
					       disk_used_bytes = F25,
					       perf = F26, net_rx_packets = F27,
					       net_rx_bytes = F28,
					       net_rx_errors = F29,
					       net_rx_dropped = F30,
					       net_tx_packets = F31,
					       net_tx_bytes = F32,
					       net_tx_errors = F33,
					       net_tx_dropped = F34,
					       net_tcp_rtt_microsecs_p50 = F35,
					       net_tcp_rtt_microsecs_p90 = F36,
					       net_tcp_rtt_microsecs_p95 = F37,
					       net_tcp_rtt_microsecs_p99 = F38,
					       net_tcp_active_connections = F39,
					       net_tcp_time_wait_connections =
						   F40,
					       net_traffic_control_statistics =
						   F41,
					       net_snmp_statistics = F42},
			 Path) ->
    v_type_double(F1, [timestamp | Path]),
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [processes | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [threads | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [cpus_user_time_secs | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_double(F5, [cpus_system_time_secs | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_double(F6, [cpus_limit | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_uint32(F7, [cpus_nr_periods | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_type_uint32(F8, [cpus_nr_throttled | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_double(F9, [cpus_throttled_time_secs | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_uint64(F10, [mem_total_bytes | Path])
    end,
    if F11 == undefined -> ok;
       true ->
	   v_type_uint64(F11, [mem_total_memsw_bytes | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_type_uint64(F12, [mem_limit_bytes | Path])
    end,
    if F13 == undefined -> ok;
       true ->
	   v_type_uint64(F13, [mem_soft_limit_bytes | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_uint64(F14, [mem_file_bytes | Path])
    end,
    if F15 == undefined -> ok;
       true -> v_type_uint64(F15, [mem_anon_bytes | Path])
    end,
    if F16 == undefined -> ok;
       true -> v_type_uint64(F16, [mem_cache_bytes | Path])
    end,
    if F17 == undefined -> ok;
       true -> v_type_uint64(F17, [mem_rss_bytes | Path])
    end,
    if F18 == undefined -> ok;
       true ->
	   v_type_uint64(F18, [mem_mapped_file_bytes | Path])
    end,
    if F19 == undefined -> ok;
       true -> v_type_uint64(F19, [mem_swap_bytes | Path])
    end,
    if F20 == undefined -> ok;
       true ->
	   v_type_uint64(F20, [mem_unevictable_bytes | Path])
    end,
    if F21 == undefined -> ok;
       true ->
	   v_type_uint64(F21, [mem_low_pressure_counter | Path])
    end,
    if F22 == undefined -> ok;
       true ->
	   v_type_uint64(F22, [mem_medium_pressure_counter | Path])
    end,
    if F23 == undefined -> ok;
       true ->
	   v_type_uint64(F23,
			 [mem_critical_pressure_counter | Path])
    end,
    if F24 == undefined -> ok;
       true -> v_type_uint64(F24, [disk_limit_bytes | Path])
    end,
    if F25 == undefined -> ok;
       true -> v_type_uint64(F25, [disk_used_bytes | Path])
    end,
    if F26 == undefined -> ok;
       true -> v_msg_PerfStatistics(F26, [perf | Path])
    end,
    if F27 == undefined -> ok;
       true -> v_type_uint64(F27, [net_rx_packets | Path])
    end,
    if F28 == undefined -> ok;
       true -> v_type_uint64(F28, [net_rx_bytes | Path])
    end,
    if F29 == undefined -> ok;
       true -> v_type_uint64(F29, [net_rx_errors | Path])
    end,
    if F30 == undefined -> ok;
       true -> v_type_uint64(F30, [net_rx_dropped | Path])
    end,
    if F31 == undefined -> ok;
       true -> v_type_uint64(F31, [net_tx_packets | Path])
    end,
    if F32 == undefined -> ok;
       true -> v_type_uint64(F32, [net_tx_bytes | Path])
    end,
    if F33 == undefined -> ok;
       true -> v_type_uint64(F33, [net_tx_errors | Path])
    end,
    if F34 == undefined -> ok;
       true -> v_type_uint64(F34, [net_tx_dropped | Path])
    end,
    if F35 == undefined -> ok;
       true ->
	   v_type_double(F35, [net_tcp_rtt_microsecs_p50 | Path])
    end,
    if F36 == undefined -> ok;
       true ->
	   v_type_double(F36, [net_tcp_rtt_microsecs_p90 | Path])
    end,
    if F37 == undefined -> ok;
       true ->
	   v_type_double(F37, [net_tcp_rtt_microsecs_p95 | Path])
    end,
    if F38 == undefined -> ok;
       true ->
	   v_type_double(F38, [net_tcp_rtt_microsecs_p99 | Path])
    end,
    if F39 == undefined -> ok;
       true ->
	   v_type_double(F39, [net_tcp_active_connections | Path])
    end,
    if F40 == undefined -> ok;
       true ->
	   v_type_double(F40,
			 [net_tcp_time_wait_connections | Path])
    end,
    if is_list(F41) ->
	   _ = [v_msg_TrafficControlStatistics(Elem,
					       [net_traffic_control_statistics
						| Path])
		|| Elem <- F41],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'TrafficControlStatistics'}},
			 F41, Path)
    end,
    if F42 == undefined -> ok;
       true ->
	   v_msg_SNMPStatistics(F42, [net_snmp_statistics | Path])
    end,
    ok;
v_msg_ResourceStatistics(X, Path) ->
    mk_type_error({expected_msg, 'ResourceStatistics'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_FileInfo/2}).
v_msg_FileInfo(#'FileInfo'{path = F1, nlink = F2,
			   size = F3, mtime = F4, mode = F5, uid = F6,
			   gid = F7},
	       Path) ->
    v_type_string(F1, [path | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [nlink | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [size | Path])
    end,
    if F4 == undefined -> ok;
       true -> v_msg_TimeInfo(F4, [mtime | Path])
    end,
    if F5 == undefined -> ok;
       true -> v_type_uint32(F5, [mode | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_string(F6, [uid | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_string(F7, [gid | Path])
    end,
    ok;
v_msg_FileInfo(X, Path) ->
    mk_type_error({expected_msg, 'FileInfo'}, X, Path).

-dialyzer({nowarn_function,'v_msg_Response.ListFiles'/2}).
'v_msg_Response.ListFiles'(#'Response.ListFiles'{file_infos
						     = F1},
			   Path) ->
    if is_list(F1) ->
	   _ = [v_msg_FileInfo(Elem, [file_infos | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'FileInfo'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Response.ListFiles'(X, Path) ->
    mk_type_error({expected_msg, 'Response.ListFiles'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_CgroupInfo/2}).
v_msg_CgroupInfo(#'CgroupInfo'{net_cls = F1}, Path) ->
    if F1 == undefined -> ok;
       true -> 'v_msg_CgroupInfo.NetCls'(F1, [net_cls | Path])
    end,
    ok;
v_msg_CgroupInfo(X, Path) ->
    mk_type_error({expected_msg, 'CgroupInfo'}, X, Path).

-dialyzer({nowarn_function,v_msg_ContainerStatus/2}).
v_msg_ContainerStatus(#'ContainerStatus'{network_infos =
					     F1,
					 cgroup_info = F2, executor_pid = F3},
		      Path) ->
    if is_list(F1) ->
	   _ = [v_msg_NetworkInfo(Elem, [network_infos | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'NetworkInfo'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_CgroupInfo(F2, [cgroup_info | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [executor_pid | Path])
    end,
    ok;
v_msg_ContainerStatus(X, Path) ->
    mk_type_error({expected_msg, 'ContainerStatus'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_TaskStatus/2}).
v_msg_TaskStatus(#'TaskStatus'{task_id = F1, state = F2,
			       message = F3, source = F4, reason = F5,
			       data = F6, agent_id = F7, executor_id = F8,
			       timestamp = F9, uuid = F10, healthy = F11,
			       labels = F12, container_status = F13},
		 Path) ->
    v_msg_TaskID(F1, [task_id | Path]),
    v_enum_TaskState(F2, [state | Path]),
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [message | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_enum_TaskStatus.Source'(F4, [source | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_enum_TaskStatus.Reason'(F5, [reason | Path])
    end,
    if F6 == undefined -> ok;
       true -> v_type_bytes(F6, [data | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_msg_AgentID(F7, [agent_id | Path])
    end,
    if F8 == undefined -> ok;
       true -> v_msg_ExecutorID(F8, [executor_id | Path])
    end,
    if F9 == undefined -> ok;
       true -> v_type_double(F9, [timestamp | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [uuid | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_type_bool(F11, [healthy | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_msg_Labels(F12, [labels | Path])
    end,
    if F13 == undefined -> ok;
       true ->
	   v_msg_ContainerStatus(F13, [container_status | Path])
    end,
    ok;
v_msg_TaskStatus(X, Path) ->
    mk_type_error({expected_msg, 'TaskStatus'}, X, Path).

-dialyzer({nowarn_function,v_msg_Attribute/2}).
v_msg_Attribute(#'Attribute'{name = F1, type = F2,
			     scalar = F3, ranges = F4, set = F5, text = F6},
		Path) ->
    v_type_string(F1, [name | Path]),
    'v_enum_Value.Type'(F2, [type | Path]),
    if F3 == undefined -> ok;
       true -> 'v_msg_Value.Scalar'(F3, [scalar | Path])
    end,
    if F4 == undefined -> ok;
       true -> 'v_msg_Value.Ranges'(F4, [ranges | Path])
    end,
    if F5 == undefined -> ok;
       true -> 'v_msg_Value.Set'(F5, [set | Path])
    end,
    if F6 == undefined -> ok;
       true -> 'v_msg_Value.Text'(F6, [text | Path])
    end,
    ok;
v_msg_Attribute(X, Path) ->
    mk_type_error({expected_msg, 'Attribute'}, X, Path).

-dialyzer({nowarn_function,v_msg_AgentInfo/2}).
v_msg_AgentInfo(#'AgentInfo'{hostname = F1, port = F2,
			     resources = F3, attributes = F4, id = F5},
		Path) ->
    v_type_string(F1, [hostname | Path]),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [port | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F3,
			 Path)
    end,
    if is_list(F4) ->
	   _ = [v_msg_Attribute(Elem, [attributes | Path])
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Attribute'}}, F4,
			 Path)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_AgentID(F5, [id | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_Response.GetLoggingLevel'/2}).
'v_msg_Response.GetLoggingLevel'(#'Response.GetLoggingLevel'{level
								 = F1},
				 Path) ->
    v_type_uint32(F1, [level | Path]), ok;
'v_msg_Response.GetLoggingLevel'(X, Path) ->
    mk_type_error({expected_msg,
		   'Response.GetLoggingLevel'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_Task/2}).
v_msg_Task(#'Task'{name = F1, task_id = F2,
		   framework_id = F3, executor_id = F4, agent_id = F5,
		   state = F6, resources = F7, statuses = F8,
		   status_update_state = F9, status_update_uuid = F10,
		   labels = F11, discovery = F12, container = F13,
		   user = F14},
	   Path) ->
    v_type_string(F1, [name | Path]),
    v_msg_TaskID(F2, [task_id | Path]),
    v_msg_FrameworkID(F3, [framework_id | Path]),
    if F4 == undefined -> ok;
       true -> v_msg_ExecutorID(F4, [executor_id | Path])
    end,
    v_msg_AgentID(F5, [agent_id | Path]),
    v_enum_TaskState(F6, [state | Path]),
    if is_list(F7) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F7,
			 Path)
    end,
    if is_list(F8) ->
	   _ = [v_msg_TaskStatus(Elem, [statuses | Path])
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'TaskStatus'}},
			 F8, Path)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_enum_TaskState(F9, [status_update_state | Path])
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [status_update_uuid | Path])
    end,
    if F11 == undefined -> ok;
       true -> v_msg_Labels(F11, [labels | Path])
    end,
    if F12 == undefined -> ok;
       true -> v_msg_DiscoveryInfo(F12, [discovery | Path])
    end,
    if F13 == undefined -> ok;
       true -> v_msg_ContainerInfo(F13, [container | Path])
    end,
    if F14 == undefined -> ok;
       true -> v_type_string(F14, [user | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_Response.GetContainers.Container'/2}).
'v_msg_Response.GetContainers.Container'(#'Response.GetContainers.Container'{framework_id
										 =
										 F1,
									     executor_id
										 =
										 F2,
									     executor_name
										 =
										 F3,
									     container_id
										 =
										 F4,
									     container_status
										 =
										 F5,
									     resource_statistics
										 =
										 F6},
					 Path) ->
    v_msg_FrameworkID(F1, [framework_id | Path]),
    v_msg_ExecutorID(F2, [executor_id | Path]),
    v_type_string(F3, [executor_name | Path]),
    v_msg_ContainerID(F4, [container_id | Path]),
    if F5 == undefined -> ok;
       true ->
	   v_msg_ContainerStatus(F5, [container_status | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_ResourceStatistics(F6,
				    [resource_statistics | Path])
    end,
    ok;
'v_msg_Response.GetContainers.Container'(X, Path) ->
    mk_type_error({expected_msg,
		   'Response.GetContainers.Container'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Response.GetContainers'/2}).
'v_msg_Response.GetContainers'(#'Response.GetContainers'{containers
							     = F1},
			       Path) ->
    if is_list(F1) ->
	   _ = ['v_msg_Response.GetContainers.Container'(Elem,
							 [containers | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'Response.GetContainers.Container'}},
			 F1, Path)
    end,
    ok;
'v_msg_Response.GetContainers'(X, Path) ->
    mk_type_error({expected_msg, 'Response.GetContainers'},
		  X, Path).

-dialyzer({nowarn_function,'v_msg_Response.GetState'/2}).
'v_msg_Response.GetState'(#'Response.GetState'{},
			  _Path) ->
    ok;
'v_msg_Response.GetState'(X, Path) ->
    mk_type_error({expected_msg, 'Response.GetState'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_Response.GetVersion'/2}).
'v_msg_Response.GetVersion'(#'Response.GetVersion'{version_info
						       = F1},
			    Path) ->
    v_msg_VersionInfo(F1, [version_info | Path]), ok;
'v_msg_Response.GetVersion'(X, Path) ->
    mk_type_error({expected_msg, 'Response.GetVersion'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_Response.GetFlags'/2}).
'v_msg_Response.GetFlags'(#'Response.GetFlags'{flags =
						   F1},
			  Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Flag(Elem, [flags | Path]) || Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Flag'}}, F1,
			 Path)
    end,
    ok;
'v_msg_Response.GetFlags'(X, Path) ->
    mk_type_error({expected_msg, 'Response.GetFlags'}, X,
		  Path).

-dialyzer({nowarn_function,'v_msg_Response.GetHealth'/2}).
'v_msg_Response.GetHealth'(#'Response.GetHealth'{healthy
						     = F1},
			   Path) ->
    v_type_bool(F1, [healthy | Path]), ok;
'v_msg_Response.GetHealth'(X, Path) ->
    mk_type_error({expected_msg, 'Response.GetHealth'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_Response/2}).
v_msg_Response(#'Response'{type = F1, get_health = F2,
			   get_flags = F3, get_version = F4, get_metrics = F5,
			   get_logging_level = F6, list_files = F7,
			   get_file_contents = F8, get_state = F9,
			   get_containers = F10},
	       Path) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_Response.Type'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   'v_msg_Response.GetHealth'(F2, [get_health | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_msg_Response.GetFlags'(F3, [get_flags | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   'v_msg_Response.GetVersion'(F4, [get_version | Path])
    end,
    if F5 == undefined -> ok;
       true ->
	   'v_msg_Response.GetMetrics'(F5, [get_metrics | Path])
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_msg_Response.GetLoggingLevel'(F6,
					    [get_logging_level | Path])
    end,
    if F7 == undefined -> ok;
       true ->
	   'v_msg_Response.ListFiles'(F7, [list_files | Path])
    end,
    if F8 == undefined -> ok;
       true ->
	   'v_msg_Response.GetFileContents'(F8,
					    [get_file_contents | Path])
    end,
    if F9 == undefined -> ok;
       true ->
	   'v_msg_Response.GetState'(F9, [get_state | Path])
    end,
    if F10 == undefined -> ok;
       true ->
	   'v_msg_Response.GetContainers'(F10,
					  [get_containers | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Filters/2}).
v_msg_Filters(#'Filters'{refuse_seconds = F1}, Path) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [refuse_seconds | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Credentials/2}).
v_msg_Credentials(#'Credentials'{credentials = F1},
		  Path) ->
    if is_list(F1) ->
	   _ = [v_msg_Credential(Elem, [credentials | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Credential'}},
			 F1, Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_RateLimit/2}).
v_msg_RateLimit(#'RateLimit'{qps = F1, principal = F2,
			     capacity = F3},
		Path) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [qps | Path])
    end,
    v_type_string(F2, [principal | Path]),
    if F3 == undefined -> ok;
       true -> v_type_uint64(F3, [capacity | Path])
    end,
    ok;
v_msg_RateLimit(X, Path) ->
    mk_type_error({expected_msg, 'RateLimit'}, X, Path).

-dialyzer({nowarn_function,v_msg_RateLimits/2}).
v_msg_RateLimits(#'RateLimits'{limits = F1,
			       aggregate_default_qps = F2,
			       aggregate_default_capacity = F3},
		 Path) ->
    if is_list(F1) ->
	   _ = [v_msg_RateLimit(Elem, [limits | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'RateLimit'}}, F1,
			 Path)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_double(F2, [aggregate_default_qps | Path])
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint64(F3, [aggregate_default_capacity | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_OfferID/2}).
v_msg_OfferID(#'OfferID'{value = F1}, Path) ->
    v_type_string(F1, [value | Path]), ok;
v_msg_OfferID(X, Path) ->
    mk_type_error({expected_msg, 'OfferID'}, X, Path).

-dialyzer({nowarn_function,v_msg_InverseOffer/2}).
v_msg_InverseOffer(#'InverseOffer'{id = F1, url = F2,
				   framework_id = F3, agent_id = F4,
				   unavailability = F5, resources = F6},
		   Path) ->
    v_msg_OfferID(F1, [id | Path]),
    if F2 == undefined -> ok;
       true -> v_msg_URL(F2, [url | Path])
    end,
    v_msg_FrameworkID(F3, [framework_id | Path]),
    if F4 == undefined -> ok;
       true -> v_msg_AgentID(F4, [agent_id | Path])
    end,
    v_msg_Unavailability(F5, [unavailability | Path]),
    if is_list(F6) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F6,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,'v_msg_ResourceUsage.Executor'/2}).
'v_msg_ResourceUsage.Executor'(#'ResourceUsage.Executor'{executor_info
							     = F1,
							 allocated = F2,
							 statistics = F3,
							 container_id = F4,
							 tasks = F5},
			       Path) ->
    v_msg_ExecutorInfo(F1, [executor_info | Path]),
    if is_list(F2) ->
	   _ = [v_msg_Resource(Elem, [allocated | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F2,
			 Path)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_ResourceStatistics(F3, [statistics | Path])
    end,
    v_msg_ContainerID(F4, [container_id | Path]),
    if is_list(F5) ->
	   _ = ['v_msg_ResourceUsage.Executor.Task'(Elem,
						    [tasks | Path])
		|| Elem <- F5],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ResourceUsage.Executor.Task'}},
			 F5, Path)
    end,
    ok;
'v_msg_ResourceUsage.Executor'(X, Path) ->
    mk_type_error({expected_msg, 'ResourceUsage.Executor'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_ResourceUsage/2}).
v_msg_ResourceUsage(#'ResourceUsage'{executors = F1,
				     total = F2},
		    Path) ->
    if is_list(F1) ->
	   _ = ['v_msg_ResourceUsage.Executor'(Elem,
					       [executors | Path])
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ResourceUsage.Executor'}},
			 F1, Path)
    end,
    if is_list(F2) ->
	   _ = [v_msg_Resource(Elem, [total | Path])
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F2,
			 Path)
    end,
    ok.

-dialyzer({nowarn_function,v_msg_Offer/2}).
v_msg_Offer(#'Offer'{id = F1, framework_id = F2,
		     agent_id = F3, hostname = F4, url = F5, resources = F6,
		     attributes = F7, executor_ids = F8,
		     unavailability = F9},
	    Path) ->
    v_msg_OfferID(F1, [id | Path]),
    v_msg_FrameworkID(F2, [framework_id | Path]),
    v_msg_AgentID(F3, [agent_id | Path]),
    v_type_string(F4, [hostname | Path]),
    if F5 == undefined -> ok;
       true -> v_msg_URL(F5, [url | Path])
    end,
    if is_list(F6) ->
	   _ = [v_msg_Resource(Elem, [resources | Path])
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Resource'}}, F6,
			 Path)
    end,
    if is_list(F7) ->
	   _ = [v_msg_Attribute(Elem, [attributes | Path])
		|| Elem <- F7],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'Attribute'}}, F7,
			 Path)
    end,
    if is_list(F8) ->
	   _ = [v_msg_ExecutorID(Elem, [executor_ids | Path])
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ExecutorID'}},
			 F8, Path)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_Unavailability(F9, [unavailability | Path])
    end,
    ok.

-dialyzer({nowarn_function,'v_enum_Call.Type'/2}).
'v_enum_Call.Type'('UNKNOWN', _Path) -> ok;
'v_enum_Call.Type'('GET_HEALTH', _Path) -> ok;
'v_enum_Call.Type'('GET_FLAGS', _Path) -> ok;
'v_enum_Call.Type'('GET_VERSION', _Path) -> ok;
'v_enum_Call.Type'('GET_METRICS', _Path) -> ok;
'v_enum_Call.Type'('GET_LOGGING_LEVEL', _Path) -> ok;
'v_enum_Call.Type'('SET_LOGGING_LEVEL', _Path) -> ok;
'v_enum_Call.Type'('LIST_FILES', _Path) -> ok;
'v_enum_Call.Type'('READ_FILE', _Path) -> ok;
'v_enum_Call.Type'('GET_STATE', _Path) -> ok;
'v_enum_Call.Type'('GET_CONTAINERS', _Path) -> ok;
'v_enum_Call.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Call.Type'}, X, Path).

-dialyzer({nowarn_function,'v_enum_Response.Type'/2}).
'v_enum_Response.Type'('UNKNOWN', _Path) -> ok;
'v_enum_Response.Type'('GET_HEALTH', _Path) -> ok;
'v_enum_Response.Type'('GET_FLAGS', _Path) -> ok;
'v_enum_Response.Type'('GET_VERSION', _Path) -> ok;
'v_enum_Response.Type'('GET_METRICS', _Path) -> ok;
'v_enum_Response.Type'('GET_LOGGING_LEVEL', _Path) ->
    ok;
'v_enum_Response.Type'('LIST_FILES', _Path) -> ok;
'v_enum_Response.Type'('READ_FILE', _Path) -> ok;
'v_enum_Response.Type'('GET_STATE', _Path) -> ok;
'v_enum_Response.Type'('GET_CONTAINERS', _Path) -> ok;
'v_enum_Response.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Response.Type'}, X, Path).

-dialyzer({nowarn_function,'v_enum_MachineInfo.Mode'/2}).
'v_enum_MachineInfo.Mode'('UP', _Path) -> ok;
'v_enum_MachineInfo.Mode'('DRAINING', _Path) -> ok;
'v_enum_MachineInfo.Mode'('DOWN', _Path) -> ok;
'v_enum_MachineInfo.Mode'(X, Path) ->
    mk_type_error({invalid_enum, 'MachineInfo.Mode'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_FrameworkInfo.Capability.Type'/2}).
'v_enum_FrameworkInfo.Capability.Type'('UNKNOWN',
				       _Path) ->
    ok;
'v_enum_FrameworkInfo.Capability.Type'('REVOCABLE_RESOURCES',
				       _Path) ->
    ok;
'v_enum_FrameworkInfo.Capability.Type'('TASK_KILLING_STATE',
				       _Path) ->
    ok;
'v_enum_FrameworkInfo.Capability.Type'('GPU_RESOURCES',
				       _Path) ->
    ok;
'v_enum_FrameworkInfo.Capability.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'FrameworkInfo.Capability.Type'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_Value.Type'/2}).
'v_enum_Value.Type'('SCALAR', _Path) -> ok;
'v_enum_Value.Type'('RANGES', _Path) -> ok;
'v_enum_Value.Type'('SET', _Path) -> ok;
'v_enum_Value.Type'('TEXT', _Path) -> ok;
'v_enum_Value.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Value.Type'}, X, Path).

-dialyzer({nowarn_function,'v_enum_Resource.DiskInfo.Source.Type'/2}).
'v_enum_Resource.DiskInfo.Source.Type'('PATH', _Path) ->
    ok;
'v_enum_Resource.DiskInfo.Source.Type'('MOUNT',
				       _Path) ->
    ok;
'v_enum_Resource.DiskInfo.Source.Type'(X, Path) ->
    mk_type_error({invalid_enum,
		   'Resource.DiskInfo.Source.Type'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_Offer.Operation.Type'/2}).
'v_enum_Offer.Operation.Type'('LAUNCH', _Path) -> ok;
'v_enum_Offer.Operation.Type'('RESERVE', _Path) -> ok;
'v_enum_Offer.Operation.Type'('UNRESERVE', _Path) -> ok;
'v_enum_Offer.Operation.Type'('CREATE', _Path) -> ok;
'v_enum_Offer.Operation.Type'('DESTROY', _Path) -> ok;
'v_enum_Offer.Operation.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Offer.Operation.Type'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_TaskState/2}).
v_enum_TaskState('TASK_STAGING', _Path) -> ok;
v_enum_TaskState('TASK_STARTING', _Path) -> ok;
v_enum_TaskState('TASK_RUNNING', _Path) -> ok;
v_enum_TaskState('TASK_KILLING', _Path) -> ok;
v_enum_TaskState('TASK_FINISHED', _Path) -> ok;
v_enum_TaskState('TASK_FAILED', _Path) -> ok;
v_enum_TaskState('TASK_KILLED', _Path) -> ok;
v_enum_TaskState('TASK_LOST', _Path) -> ok;
v_enum_TaskState('TASK_ERROR', _Path) -> ok;
v_enum_TaskState(X, Path) ->
    mk_type_error({invalid_enum, 'TaskState'}, X, Path).

-dialyzer({nowarn_function,'v_enum_TaskStatus.Source'/2}).
'v_enum_TaskStatus.Source'('SOURCE_MASTER', _Path) ->
    ok;
'v_enum_TaskStatus.Source'('SOURCE_AGENT', _Path) -> ok;
'v_enum_TaskStatus.Source'('SOURCE_EXECUTOR', _Path) ->
    ok;
'v_enum_TaskStatus.Source'(X, Path) ->
    mk_type_error({invalid_enum, 'TaskStatus.Source'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_TaskStatus.Reason'/2}).
'v_enum_TaskStatus.Reason'('REASON_COMMAND_EXECUTOR_FAILED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_CONTAINER_LAUNCH_FAILED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION_DISK',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION_MEMORY',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_CONTAINER_PREEMPTED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_CONTAINER_UPDATE_FAILED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_EXECUTOR_REGISTRATION_TIMEOUT',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_EXECUTOR_REREGISTRATION_TIMEOUT',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_EXECUTOR_TERMINATED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_EXECUTOR_UNREGISTERED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_FRAMEWORK_REMOVED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_GC_ERROR', _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_INVALID_FRAMEWORKID',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_INVALID_OFFERS',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_MASTER_DISCONNECTED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_RECONCILIATION',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_RESOURCES_UNKNOWN',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_AGENT_DISCONNECTED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_AGENT_REMOVED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_AGENT_RESTARTED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_AGENT_UNKNOWN',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_TASK_INVALID',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_TASK_UNAUTHORIZED',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'('REASON_TASK_UNKNOWN',
			   _Path) ->
    ok;
'v_enum_TaskStatus.Reason'(X, Path) ->
    mk_type_error({invalid_enum, 'TaskStatus.Reason'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_Image.Type'/2}).
'v_enum_Image.Type'('APPC', _Path) -> ok;
'v_enum_Image.Type'('DOCKER', _Path) -> ok;
'v_enum_Image.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Image.Type'}, X, Path).

-dialyzer({nowarn_function,'v_enum_Volume.Mode'/2}).
'v_enum_Volume.Mode'('RW', _Path) -> ok;
'v_enum_Volume.Mode'('RO', _Path) -> ok;
'v_enum_Volume.Mode'(X, Path) ->
    mk_type_error({invalid_enum, 'Volume.Mode'}, X, Path).

-dialyzer({nowarn_function,'v_enum_Volume.Source.Type'/2}).
'v_enum_Volume.Source.Type'('UNKNOWN', _Path) -> ok;
'v_enum_Volume.Source.Type'('DOCKER_VOLUME', _Path) ->
    ok;
'v_enum_Volume.Source.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'Volume.Source.Type'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_NetworkInfo.Protocol'/2}).
'v_enum_NetworkInfo.Protocol'('IPv4', _Path) -> ok;
'v_enum_NetworkInfo.Protocol'('IPv6', _Path) -> ok;
'v_enum_NetworkInfo.Protocol'(X, Path) ->
    mk_type_error({invalid_enum, 'NetworkInfo.Protocol'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_ContainerInfo.Type'/2}).
'v_enum_ContainerInfo.Type'('DOCKER', _Path) -> ok;
'v_enum_ContainerInfo.Type'('MESOS', _Path) -> ok;
'v_enum_ContainerInfo.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'ContainerInfo.Type'}, X,
		  Path).

-dialyzer({nowarn_function,'v_enum_ContainerInfo.DockerInfo.Network'/2}).
'v_enum_ContainerInfo.DockerInfo.Network'('HOST',
					  _Path) ->
    ok;
'v_enum_ContainerInfo.DockerInfo.Network'('BRIDGE',
					  _Path) ->
    ok;
'v_enum_ContainerInfo.DockerInfo.Network'('NONE',
					  _Path) ->
    ok;
'v_enum_ContainerInfo.DockerInfo.Network'('USER',
					  _Path) ->
    ok;
'v_enum_ContainerInfo.DockerInfo.Network'(X, Path) ->
    mk_type_error({invalid_enum,
		   'ContainerInfo.DockerInfo.Network'},
		  X, Path).

-dialyzer({nowarn_function,'v_enum_DiscoveryInfo.Visibility'/2}).
'v_enum_DiscoveryInfo.Visibility'('FRAMEWORK', _Path) ->
    ok;
'v_enum_DiscoveryInfo.Visibility'('CLUSTER', _Path) ->
    ok;
'v_enum_DiscoveryInfo.Visibility'('EXTERNAL', _Path) ->
    ok;
'v_enum_DiscoveryInfo.Visibility'(X, Path) ->
    mk_type_error({invalid_enum,
		   'DiscoveryInfo.Visibility'},
		  X, Path).

-dialyzer({nowarn_function,v_type_int32/2}).
v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_int64/2}).
v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_double/2}).
v_type_double(N, _Path) when is_float(N) -> ok;
v_type_double(N, _Path) when is_integer(N) -> ok;
v_type_double(X, Path) ->
    mk_type_error(bad_double_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-dialyzer({nowarn_function,v_type_bytes/2}).
v_type_bytes(B, _Path) when is_binary(B) -> ok;
v_type_bytes(X, Path) ->
    mk_type_error(bad_binary_value, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({nowarn_unused_function,id/1}).
-compile({inline,id/1}).
id(X) -> X.

-compile({nowarn_unused_function,cons/2}).
-compile({inline,cons/2}).
cons(Elem, Acc) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/1}).
-compile({inline,lists_reverse/1}).
'lists_reverse'(L) -> lists:reverse(L).

-compile({nowarn_unused_function,'erlang_++'/2}).
-compile({inline,'erlang_++'/2}).
'erlang_++'(A, B) -> A ++ B.



get_msg_defs() ->
    [{{enum, 'Call.Type'},
      [{'UNKNOWN', 0}, {'GET_HEALTH', 1}, {'GET_FLAGS', 2},
       {'GET_VERSION', 3}, {'GET_METRICS', 4},
       {'GET_LOGGING_LEVEL', 5}, {'SET_LOGGING_LEVEL', 6},
       {'LIST_FILES', 7}, {'READ_FILE', 8}, {'GET_STATE', 9},
       {'GET_CONTAINERS', 10}]},
     {{enum, 'Response.Type'},
      [{'UNKNOWN', 0}, {'GET_HEALTH', 1}, {'GET_FLAGS', 2},
       {'GET_VERSION', 3}, {'GET_METRICS', 4},
       {'GET_LOGGING_LEVEL', 5}, {'LIST_FILES', 6},
       {'READ_FILE', 7}, {'GET_STATE', 8},
       {'GET_CONTAINERS', 9}]},
     {{enum, 'Status'},
      [{'DRIVER_NOT_STARTED', 1}, {'DRIVER_RUNNING', 2},
       {'DRIVER_ABORTED', 3}, {'DRIVER_STOPPED', 4}]},
     {{enum, 'MachineInfo.Mode'},
      [{'UP', 1}, {'DRAINING', 2}, {'DOWN', 3}]},
     {{enum, 'FrameworkInfo.Capability.Type'},
      [{'UNKNOWN', 0}, {'REVOCABLE_RESOURCES', 1},
       {'TASK_KILLING_STATE', 2}, {'GPU_RESOURCES', 3}]},
     {{enum, 'Value.Type'},
      [{'SCALAR', 0}, {'RANGES', 1}, {'SET', 2},
       {'TEXT', 3}]},
     {{enum, 'Resource.DiskInfo.Source.Type'},
      [{'PATH', 1}, {'MOUNT', 2}]},
     {{enum, 'Offer.Operation.Type'},
      [{'LAUNCH', 1}, {'RESERVE', 2}, {'UNRESERVE', 3},
       {'CREATE', 4}, {'DESTROY', 5}]},
     {{enum, 'TaskState'},
      [{'TASK_STAGING', 6}, {'TASK_STARTING', 0},
       {'TASK_RUNNING', 1}, {'TASK_KILLING', 8},
       {'TASK_FINISHED', 2}, {'TASK_FAILED', 3},
       {'TASK_KILLED', 4}, {'TASK_LOST', 5},
       {'TASK_ERROR', 7}]},
     {{enum, 'TaskStatus.Source'},
      [{'SOURCE_MASTER', 0}, {'SOURCE_AGENT', 1},
       {'SOURCE_EXECUTOR', 2}]},
     {{enum, 'TaskStatus.Reason'},
      [{'REASON_COMMAND_EXECUTOR_FAILED', 0},
       {'REASON_CONTAINER_LAUNCH_FAILED', 21},
       {'REASON_CONTAINER_LIMITATION', 19},
       {'REASON_CONTAINER_LIMITATION_DISK', 20},
       {'REASON_CONTAINER_LIMITATION_MEMORY', 8},
       {'REASON_CONTAINER_PREEMPTED', 17},
       {'REASON_CONTAINER_UPDATE_FAILED', 22},
       {'REASON_EXECUTOR_REGISTRATION_TIMEOUT', 23},
       {'REASON_EXECUTOR_REREGISTRATION_TIMEOUT', 24},
       {'REASON_EXECUTOR_TERMINATED', 1},
       {'REASON_EXECUTOR_UNREGISTERED', 2},
       {'REASON_FRAMEWORK_REMOVED', 3}, {'REASON_GC_ERROR', 4},
       {'REASON_INVALID_FRAMEWORKID', 5},
       {'REASON_INVALID_OFFERS', 6},
       {'REASON_MASTER_DISCONNECTED', 7},
       {'REASON_RECONCILIATION', 9},
       {'REASON_RESOURCES_UNKNOWN', 18},
       {'REASON_AGENT_DISCONNECTED', 10},
       {'REASON_AGENT_REMOVED', 11},
       {'REASON_AGENT_RESTARTED', 12},
       {'REASON_AGENT_UNKNOWN', 13},
       {'REASON_TASK_INVALID', 14},
       {'REASON_TASK_UNAUTHORIZED', 15},
       {'REASON_TASK_UNKNOWN', 16}]},
     {{enum, 'Image.Type'}, [{'APPC', 1}, {'DOCKER', 2}]},
     {{enum, 'Volume.Mode'}, [{'RW', 1}, {'RO', 2}]},
     {{enum, 'Volume.Source.Type'},
      [{'UNKNOWN', 0}, {'DOCKER_VOLUME', 1}]},
     {{enum, 'NetworkInfo.Protocol'},
      [{'IPv4', 1}, {'IPv6', 2}]},
     {{enum, 'ContainerInfo.Type'},
      [{'DOCKER', 1}, {'MESOS', 2}]},
     {{enum, 'ContainerInfo.DockerInfo.Network'},
      [{'HOST', 1}, {'BRIDGE', 2}, {'NONE', 3}, {'USER', 4}]},
     {{enum, 'DiscoveryInfo.Visibility'},
      [{'FRAMEWORK', 0}, {'CLUSTER', 1}, {'EXTERNAL', 2}]},
     {{msg, 'Environment.Variable'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Environment'},
      [#field{name = variables, fnum = 1, rnum = 2,
	      type = {msg, 'Environment.Variable'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'CommandInfo.URI'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = executable, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []},
       #field{name = extract, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = [{default, true}]},
       #field{name = cache, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []},
       #field{name = output_file, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'CommandInfo'},
      [#field{name = uris, fnum = 1, rnum = 2,
	      type = {msg, 'CommandInfo.URI'}, occurrence = repeated,
	      opts = []},
       #field{name = environment, fnum = 2, rnum = 3,
	      type = {msg, 'Environment'}, occurrence = optional,
	      opts = []},
       #field{name = shell, fnum = 6, rnum = 4, type = bool,
	      occurrence = optional, opts = [{default, true}]},
       #field{name = value, fnum = 3, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = arguments, fnum = 7, rnum = 6,
	      type = string, occurrence = repeated, opts = []},
       #field{name = user, fnum = 5, rnum = 7, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Parameter'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ContainerInfo.DockerInfo.PortMapping'},
      [#field{name = host_port, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = container_port, fnum = 2, rnum = 3,
	      type = uint32, occurrence = required, opts = []},
       #field{name = protocol, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'ContainerInfo.DockerInfo'},
      [#field{name = image, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = network, fnum = 2, rnum = 3,
	      type = {enum, 'ContainerInfo.DockerInfo.Network'},
	      occurrence = optional, opts = [{default, 'HOST'}]},
       #field{name = port_mappings, fnum = 3, rnum = 4,
	      type = {msg, 'ContainerInfo.DockerInfo.PortMapping'},
	      occurrence = repeated, opts = []},
       #field{name = privileged, fnum = 4, rnum = 5,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = parameters, fnum = 5, rnum = 6,
	      type = {msg, 'Parameter'}, occurrence = repeated,
	      opts = []},
       #field{name = force_pull_image, fnum = 6, rnum = 7,
	      type = bool, occurrence = optional, opts = []},
       #field{name = volume_driver, fnum = 7, rnum = 8,
	      type = string, occurrence = optional,
	      opts = [deprecated]}]},
     {{msg, 'TimeInfo'},
      [#field{name = nanoseconds, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'WeightInfo'},
      [#field{name = weight, fnum = 1, rnum = 2,
	      type = double, occurrence = required, opts = []},
       #field{name = role, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'DurationInfo'},
      [#field{name = nanoseconds, fnum = 1, rnum = 2,
	      type = int64, occurrence = required, opts = []}]},
     {{msg, 'Unavailability'},
      [#field{name = start, fnum = 1, rnum = 2,
	      type = {msg, 'TimeInfo'}, occurrence = required,
	      opts = []},
       #field{name = duration, fnum = 2, rnum = 3,
	      type = {msg, 'DurationInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'MachineID'},
      [#field{name = hostname, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'MachineInfo'},
      [#field{name = id, fnum = 1, rnum = 2,
	      type = {msg, 'MachineID'}, occurrence = required,
	      opts = []},
       #field{name = mode, fnum = 2, rnum = 3,
	      type = {enum, 'MachineInfo.Mode'},
	      occurrence = optional, opts = []},
       #field{name = unavailability, fnum = 3, rnum = 4,
	      type = {msg, 'Unavailability'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Resource.RevocableInfo'}, []},
     {{msg, 'Resource.DiskInfo.Source.Mount'},
      [#field{name = root, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Resource.DiskInfo.Source.Path'},
      [#field{name = root, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Resource.DiskInfo.Source'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Resource.DiskInfo.Source.Type'},
	      occurrence = required, opts = []},
       #field{name = path, fnum = 2, rnum = 3,
	      type = {msg, 'Resource.DiskInfo.Source.Path'},
	      occurrence = optional, opts = []},
       #field{name = mount, fnum = 3, rnum = 4,
	      type = {msg, 'Resource.DiskInfo.Source.Mount'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Parameters'},
      [#field{name = parameter, fnum = 1, rnum = 2,
	      type = {msg, 'Parameter'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Volume.Source.DockerVolume'},
      [#field{name = driver, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = driver_options, fnum = 3, rnum = 4,
	      type = {msg, 'Parameters'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Volume.Source'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Volume.Source.Type'},
	      occurrence = optional, opts = []},
       #field{name = docker_volume, fnum = 2, rnum = 3,
	      type = {msg, 'Volume.Source.DockerVolume'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Credential'},
      [#field{name = principal, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = secret, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Image.Docker'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = credential, fnum = 2, rnum = 3,
	      type = {msg, 'Credential'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Label'},
      [#field{name = key, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Labels'},
      [#field{name = labels, fnum = 1, rnum = 2,
	      type = {msg, 'Label'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Image.Appc'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 3, rnum = 4,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Image'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Image.Type'}, occurrence = required,
	      opts = []},
       #field{name = appc, fnum = 2, rnum = 3,
	      type = {msg, 'Image.Appc'}, occurrence = optional,
	      opts = []},
       #field{name = docker, fnum = 3, rnum = 4,
	      type = {msg, 'Image.Docker'}, occurrence = optional,
	      opts = []},
       #field{name = cached, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = [{default, true}]}]},
     {{msg, 'Volume'},
      [#field{name = mode, fnum = 3, rnum = 2,
	      type = {enum, 'Volume.Mode'}, occurrence = required,
	      opts = []},
       #field{name = container_path, fnum = 1, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = host_path, fnum = 2, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = image, fnum = 4, rnum = 5,
	      type = {msg, 'Image'}, occurrence = optional,
	      opts = []},
       #field{name = source, fnum = 5, rnum = 6,
	      type = {msg, 'Volume.Source'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Resource.DiskInfo.Persistence'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = principal, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Resource.DiskInfo'},
      [#field{name = persistence, fnum = 1, rnum = 2,
	      type = {msg, 'Resource.DiskInfo.Persistence'},
	      occurrence = optional, opts = []},
       #field{name = volume, fnum = 2, rnum = 3,
	      type = {msg, 'Volume'}, occurrence = optional,
	      opts = []},
       #field{name = source, fnum = 3, rnum = 4,
	      type = {msg, 'Resource.DiskInfo.Source'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Resource.ReservationInfo'},
      [#field{name = principal, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = labels, fnum = 2, rnum = 3,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Value.Set'},
      [#field{name = item, fnum = 1, rnum = 2, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'Value.Range'},
      [#field{name = 'begin', fnum = 1, rnum = 2,
	      type = uint64, occurrence = required, opts = []},
       #field{name = 'end', fnum = 2, rnum = 3, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, 'Value.Ranges'},
      [#field{name = range, fnum = 1, rnum = 2,
	      type = {msg, 'Value.Range'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Value.Scalar'},
      [#field{name = value, fnum = 1, rnum = 2, type = double,
	      occurrence = required, opts = []}]},
     {{msg, 'Resource'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'Value.Type'}, occurrence = required,
	      opts = []},
       #field{name = scalar, fnum = 3, rnum = 4,
	      type = {msg, 'Value.Scalar'}, occurrence = optional,
	      opts = []},
       #field{name = ranges, fnum = 4, rnum = 5,
	      type = {msg, 'Value.Ranges'}, occurrence = optional,
	      opts = []},
       #field{name = set, fnum = 5, rnum = 6,
	      type = {msg, 'Value.Set'}, occurrence = optional,
	      opts = []},
       #field{name = role, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = [{default, "*"}]},
       #field{name = reservation, fnum = 8, rnum = 8,
	      type = {msg, 'Resource.ReservationInfo'},
	      occurrence = optional, opts = []},
       #field{name = disk, fnum = 7, rnum = 9,
	      type = {msg, 'Resource.DiskInfo'},
	      occurrence = optional, opts = []},
       #field{name = revocable, fnum = 9, rnum = 10,
	      type = {msg, 'Resource.RevocableInfo'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Offer.Operation.Destroy'},
      [#field{name = volumes, fnum = 1, rnum = 2,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Offer.Operation.Create'},
      [#field{name = volumes, fnum = 1, rnum = 2,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Offer.Operation.Unreserve'},
      [#field{name = resources, fnum = 1, rnum = 2,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Offer.Operation.Reserve'},
      [#field{name = resources, fnum = 1, rnum = 2,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Port'},
      [#field{name = number, fnum = 1, rnum = 2,
	      type = uint32, occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = protocol, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = visibility, fnum = 4, rnum = 5,
	      type = {enum, 'DiscoveryInfo.Visibility'},
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 5, rnum = 6,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Ports'},
      [#field{name = ports, fnum = 1, rnum = 2,
	      type = {msg, 'Port'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'DiscoveryInfo'},
      [#field{name = visibility, fnum = 1, rnum = 2,
	      type = {enum, 'DiscoveryInfo.Visibility'},
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = environment, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = location, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = version, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = ports, fnum = 6, rnum = 7,
	      type = {msg, 'Ports'}, occurrence = optional,
	      opts = []},
       #field{name = labels, fnum = 7, rnum = 8,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'KillPolicy'},
      [#field{name = grace_period, fnum = 1, rnum = 2,
	      type = {msg, 'DurationInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'HealthCheck.HTTP'},
      [#field{name = port, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = path, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = [{default, "/"}]},
       #field{name = statuses, fnum = 4, rnum = 4,
	      type = uint32, occurrence = repeated, opts = []}]},
     {{msg, 'HealthCheck'},
      [#field{name = http, fnum = 1, rnum = 2,
	      type = {msg, 'HealthCheck.HTTP'}, occurrence = optional,
	      opts = []},
       #field{name = delay_seconds, fnum = 2, rnum = 3,
	      type = double, occurrence = optional,
	      opts = [{default, 1.5e+1}]},
       #field{name = interval_seconds, fnum = 3, rnum = 4,
	      type = double, occurrence = optional,
	      opts = [{default, 1.0e+1}]},
       #field{name = timeout_seconds, fnum = 4, rnum = 5,
	      type = double, occurrence = optional,
	      opts = [{default, 2.0e+1}]},
       #field{name = consecutive_failures, fnum = 5, rnum = 6,
	      type = uint32, occurrence = optional,
	      opts = [{default, 3}]},
       #field{name = grace_period_seconds, fnum = 6, rnum = 7,
	      type = double, occurrence = optional,
	      opts = [{default, 1.0e+1}]},
       #field{name = command, fnum = 7, rnum = 8,
	      type = {msg, 'CommandInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'NetworkInfo.IPAddress'},
      [#field{name = protocol, fnum = 1, rnum = 2,
	      type = {enum, 'NetworkInfo.Protocol'},
	      occurrence = optional, opts = []},
       #field{name = ip_address, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'NetworkInfo'},
      [#field{name = ip_addresses, fnum = 5, rnum = 2,
	      type = {msg, 'NetworkInfo.IPAddress'},
	      occurrence = repeated, opts = []},
       #field{name = name, fnum = 6, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = groups, fnum = 3, rnum = 4, type = string,
	      occurrence = repeated, opts = []},
       #field{name = labels, fnum = 4, rnum = 5,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ContainerInfo.MesosInfo'},
      [#field{name = image, fnum = 1, rnum = 2,
	      type = {msg, 'Image'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ContainerInfo'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'ContainerInfo.Type'},
	      occurrence = required, opts = []},
       #field{name = volumes, fnum = 2, rnum = 3,
	      type = {msg, 'Volume'}, occurrence = repeated,
	      opts = []},
       #field{name = hostname, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = docker, fnum = 3, rnum = 5,
	      type = {msg, 'ContainerInfo.DockerInfo'},
	      occurrence = optional, opts = []},
       #field{name = mesos, fnum = 5, rnum = 6,
	      type = {msg, 'ContainerInfo.MesosInfo'},
	      occurrence = optional, opts = []},
       #field{name = network_infos, fnum = 7, rnum = 7,
	      type = {msg, 'NetworkInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'FrameworkID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ExecutorID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'ExecutorInfo'},
      [#field{name = executor_id, fnum = 1, rnum = 2,
	      type = {msg, 'ExecutorID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 8, rnum = 3,
	      type = {msg, 'FrameworkID'}, occurrence = optional,
	      opts = []},
       #field{name = command, fnum = 7, rnum = 4,
	      type = {msg, 'CommandInfo'}, occurrence = required,
	      opts = []},
       #field{name = container, fnum = 11, rnum = 5,
	      type = {msg, 'ContainerInfo'}, occurrence = optional,
	      opts = []},
       #field{name = resources, fnum = 5, rnum = 6,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = name, fnum = 9, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = source, fnum = 10, rnum = 8,
	      type = string, occurrence = optional,
	      opts = [deprecated]},
       #field{name = data, fnum = 4, rnum = 9, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = discovery, fnum = 12, rnum = 10,
	      type = {msg, 'DiscoveryInfo'}, occurrence = optional,
	      opts = []},
       #field{name = shutdown_grace_period, fnum = 13,
	      rnum = 11, type = {msg, 'DurationInfo'},
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 14, rnum = 12,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'AgentID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'TaskID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'TaskInfo'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = task_id, fnum = 2, rnum = 3,
	      type = {msg, 'TaskID'}, occurrence = required,
	      opts = []},
       #field{name = agent_id, fnum = 3, rnum = 4,
	      type = {msg, 'AgentID'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 4, rnum = 5,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = executor, fnum = 5, rnum = 6,
	      type = {msg, 'ExecutorInfo'}, occurrence = optional,
	      opts = []},
       #field{name = command, fnum = 7, rnum = 7,
	      type = {msg, 'CommandInfo'}, occurrence = optional,
	      opts = []},
       #field{name = container, fnum = 9, rnum = 8,
	      type = {msg, 'ContainerInfo'}, occurrence = optional,
	      opts = []},
       #field{name = health_check, fnum = 8, rnum = 9,
	      type = {msg, 'HealthCheck'}, occurrence = optional,
	      opts = []},
       #field{name = kill_policy, fnum = 12, rnum = 10,
	      type = {msg, 'KillPolicy'}, occurrence = optional,
	      opts = []},
       #field{name = data, fnum = 6, rnum = 11, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 10, rnum = 12,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []},
       #field{name = discovery, fnum = 11, rnum = 13,
	      type = {msg, 'DiscoveryInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Offer.Operation.Launch'},
      [#field{name = task_infos, fnum = 1, rnum = 2,
	      type = {msg, 'TaskInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Offer.Operation'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Offer.Operation.Type'},
	      occurrence = required, opts = []},
       #field{name = launch, fnum = 2, rnum = 3,
	      type = {msg, 'Offer.Operation.Launch'},
	      occurrence = optional, opts = []},
       #field{name = reserve, fnum = 3, rnum = 4,
	      type = {msg, 'Offer.Operation.Reserve'},
	      occurrence = optional, opts = []},
       #field{name = unreserve, fnum = 4, rnum = 5,
	      type = {msg, 'Offer.Operation.Unreserve'},
	      occurrence = optional, opts = []},
       #field{name = create, fnum = 5, rnum = 6,
	      type = {msg, 'Offer.Operation.Create'},
	      occurrence = optional, opts = []},
       #field{name = destroy, fnum = 6, rnum = 7,
	      type = {msg, 'Offer.Operation.Destroy'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Flag'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Value.Text'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Value'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Value.Type'}, occurrence = required,
	      opts = []},
       #field{name = scalar, fnum = 2, rnum = 3,
	      type = {msg, 'Value.Scalar'}, occurrence = optional,
	      opts = []},
       #field{name = ranges, fnum = 3, rnum = 4,
	      type = {msg, 'Value.Ranges'}, occurrence = optional,
	      opts = []},
       #field{name = set, fnum = 4, rnum = 5,
	      type = {msg, 'Value.Set'}, occurrence = optional,
	      opts = []},
       #field{name = text, fnum = 5, rnum = 6,
	      type = {msg, 'Value.Text'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Request'},
      [#field{name = agent_id, fnum = 1, rnum = 2,
	      type = {msg, 'AgentID'}, occurrence = optional,
	      opts = []},
       #field{name = resources, fnum = 2, rnum = 3,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ContainerID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Metric'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = double,
	      occurrence = optional, opts = []}]},
     {{msg, 'Response.GetFileContents'},
      [#field{name = data, fnum = 1, rnum = 2, type = bytes,
	      occurrence = repeated, opts = []}]},
     {{msg, 'CgroupInfo.NetCls'},
      [#field{name = classid, fnum = 1, rnum = 2,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'Call.GetMetrics'},
      [#field{name = timeout, fnum = 1, rnum = 2,
	      type = {msg, 'DurationInfo'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'UdpStatistics'},
      [#field{name = 'InDatagrams', fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'NoPorts', fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InErrors', fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutDatagrams', fnum = 4, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'RcvbufErrors', fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'SndbufErrors', fnum = 6, rnum = 7,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InCsumErrors', fnum = 7, rnum = 8,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'IgnoredMulti', fnum = 8, rnum = 9,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'TcpStatistics'},
      [#field{name = 'RtoAlgorithm', fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'RtoMin', fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'RtoMax', fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'MaxConn', fnum = 4, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'ActiveOpens', fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'PassiveOpens', fnum = 6, rnum = 7,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'AttemptFails', fnum = 7, rnum = 8,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'EstabResets', fnum = 8, rnum = 9,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'CurrEstab', fnum = 9, rnum = 10,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InSegs', fnum = 10, rnum = 11,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutSegs', fnum = 11, rnum = 12,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'RetransSegs', fnum = 12, rnum = 13,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InErrs', fnum = 13, rnum = 14,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutRsts', fnum = 14, rnum = 15,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InCsumErrors', fnum = 15, rnum = 16,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'IpStatistics'},
      [#field{name = 'Forwarding', fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'DefaultTTL', fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InReceives', fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InHdrErrors', fnum = 4, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InAddrErrors', fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'ForwDatagrams', fnum = 6, rnum = 7,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InUnknownProtos', fnum = 7, rnum = 8,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InDiscards', fnum = 8, rnum = 9,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InDelivers', fnum = 9, rnum = 10,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutRequests', fnum = 10, rnum = 11,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutDiscards', fnum = 11, rnum = 12,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutNoRoutes', fnum = 12, rnum = 13,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'ReasmTimeout', fnum = 13, rnum = 14,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'ReasmReqds', fnum = 14, rnum = 15,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'ReasmOKs', fnum = 15, rnum = 16,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'ReasmFails', fnum = 16, rnum = 17,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'FragOKs', fnum = 17, rnum = 18,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'FragFails', fnum = 18, rnum = 19,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'FragCreates', fnum = 19, rnum = 20,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'Response.GetMetrics'},
      [#field{name = metrics, fnum = 1, rnum = 2,
	      type = {msg, 'Metric'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'VersionInfo'},
      [#field{name = version, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = build_date, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = build_time, fnum = 3, rnum = 4,
	      type = double, occurrence = optional, opts = []},
       #field{name = build_user, fnum = 4, rnum = 5,
	      type = string, occurrence = optional, opts = []},
       #field{name = git_sha, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = git_branch, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = git_tag, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Address'},
      [#field{name = hostname, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, 'MasterInfo'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = ip, fnum = 2, rnum = 3, type = uint32,
	      occurrence = required, opts = []},
       #field{name = port, fnum = 3, rnum = 4, type = uint32,
	      occurrence = required, opts = [{default, 5050}]},
       #field{name = pid, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = hostname, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = version, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []},
       #field{name = address, fnum = 7, rnum = 8,
	      type = {msg, 'Address'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'FrameworkInfo.Capability'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'FrameworkInfo.Capability.Type'},
	      occurrence = optional, opts = []}]},
     {{msg, 'FrameworkInfo'},
      [#field{name = user, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 3, rnum = 4,
	      type = {msg, 'FrameworkID'}, occurrence = optional,
	      opts = []},
       #field{name = failover_timeout, fnum = 4, rnum = 5,
	      type = double, occurrence = optional,
	      opts = [{default, 0.0}]},
       #field{name = checkpoint, fnum = 5, rnum = 6,
	      type = bool, occurrence = optional,
	      opts = [{default, false}]},
       #field{name = role, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = [{default, "*"}]},
       #field{name = hostname, fnum = 7, rnum = 8,
	      type = string, occurrence = optional, opts = []},
       #field{name = principal, fnum = 8, rnum = 9,
	      type = string, occurrence = optional, opts = []},
       #field{name = webui_url, fnum = 9, rnum = 10,
	      type = string, occurrence = optional, opts = []},
       #field{name = capabilities, fnum = 10, rnum = 11,
	      type = {msg, 'FrameworkInfo.Capability'},
	      occurrence = repeated, opts = []},
       #field{name = labels, fnum = 11, rnum = 12,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'URL'},
      [#field{name = scheme, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = address, fnum = 2, rnum = 3,
	      type = {msg, 'Address'}, occurrence = required,
	      opts = []},
       #field{name = path, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []},
       #field{name = query, fnum = 4, rnum = 5,
	      type = {msg, 'Parameter'}, occurrence = repeated,
	      opts = []},
       #field{name = fragment, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'Call.ReadFile'},
      [#field{name = path, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = offset, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = length, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Call.ListFiles'},
      [#field{name = path, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'Call.SetLoggingLevel'},
      [#field{name = level, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []},
       #field{name = duration, fnum = 2, rnum = 3,
	      type = {msg, 'DurationInfo'}, occurrence = required,
	      opts = []}]},
     {{msg, 'Call'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Call.Type'}, occurrence = optional,
	      opts = []},
       #field{name = get_metrics, fnum = 2, rnum = 3,
	      type = {msg, 'Call.GetMetrics'}, occurrence = optional,
	      opts = []},
       #field{name = set_logging_level, fnum = 3, rnum = 4,
	      type = {msg, 'Call.SetLoggingLevel'},
	      occurrence = optional, opts = []},
       #field{name = list_files, fnum = 4, rnum = 5,
	      type = {msg, 'Call.ListFiles'}, occurrence = optional,
	      opts = []},
       #field{name = read_file, fnum = 5, rnum = 6,
	      type = {msg, 'Call.ReadFile'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ResourceUsage.Executor.Task'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3,
	      type = {msg, 'TaskID'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 3, rnum = 4,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = labels, fnum = 4, rnum = 5,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Role'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = weight, fnum = 2, rnum = 3, type = double,
	      occurrence = required, opts = []},
       #field{name = frameworks, fnum = 3, rnum = 4,
	      type = {msg, 'FrameworkID'}, occurrence = repeated,
	      opts = []},
       #field{name = resources, fnum = 4, rnum = 5,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'IcmpStatistics'},
      [#field{name = 'InMsgs', fnum = 1, rnum = 2,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InErrors', fnum = 2, rnum = 3,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InCsumErrors', fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InDestUnreachs', fnum = 4, rnum = 5,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InTimeExcds', fnum = 5, rnum = 6,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InParmProbs', fnum = 6, rnum = 7,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InSrcQuenchs', fnum = 7, rnum = 8,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InRedirects', fnum = 8, rnum = 9,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InEchos', fnum = 9, rnum = 10,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InEchoReps', fnum = 10, rnum = 11,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InTimestamps', fnum = 11, rnum = 12,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InTimestampReps', fnum = 12, rnum = 13,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InAddrMasks', fnum = 13, rnum = 14,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'InAddrMaskReps', fnum = 14, rnum = 15,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutMsgs', fnum = 15, rnum = 16,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutErrors', fnum = 16, rnum = 17,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutDestUnreachs', fnum = 17, rnum = 18,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutTimeExcds', fnum = 18, rnum = 19,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutParmProbs', fnum = 19, rnum = 20,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutSrcQuenchs', fnum = 20, rnum = 21,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutRedirects', fnum = 21, rnum = 22,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutEchos', fnum = 22, rnum = 23,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutEchoReps', fnum = 23, rnum = 24,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutTimestamps', fnum = 24, rnum = 25,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutTimestampReps', fnum = 25, rnum = 26,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutAddrMasks', fnum = 26, rnum = 27,
	      type = int64, occurrence = optional, opts = []},
       #field{name = 'OutAddrMaskReps', fnum = 27, rnum = 28,
	      type = int64, occurrence = optional, opts = []}]},
     {{msg, 'SNMPStatistics'},
      [#field{name = ip_stats, fnum = 1, rnum = 2,
	      type = {msg, 'IpStatistics'}, occurrence = optional,
	      opts = []},
       #field{name = icmp_stats, fnum = 2, rnum = 3,
	      type = {msg, 'IcmpStatistics'}, occurrence = optional,
	      opts = []},
       #field{name = tcp_stats, fnum = 3, rnum = 4,
	      type = {msg, 'TcpStatistics'}, occurrence = optional,
	      opts = []},
       #field{name = udp_stats, fnum = 4, rnum = 5,
	      type = {msg, 'UdpStatistics'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'TrafficControlStatistics'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = backlog, fnum = 2, rnum = 3,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = bytes, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = drops, fnum = 4, rnum = 5, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = overlimits, fnum = 5, rnum = 6,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = packets, fnum = 6, rnum = 7,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = qlen, fnum = 7, rnum = 8, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = ratebps, fnum = 8, rnum = 9,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = ratepps, fnum = 9, rnum = 10,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = requeues, fnum = 10, rnum = 11,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'PerfStatistics'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = double, occurrence = required, opts = []},
       #field{name = duration, fnum = 2, rnum = 3,
	      type = double, occurrence = required, opts = []},
       #field{name = cycles, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = stalled_cycles_frontend, fnum = 4,
	      rnum = 5, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = stalled_cycles_backend, fnum = 5,
	      rnum = 6, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = instructions, fnum = 6, rnum = 7,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cache_references, fnum = 7, rnum = 8,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cache_misses, fnum = 8, rnum = 9,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branches, fnum = 9, rnum = 10,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branch_misses, fnum = 10, rnum = 11,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = bus_cycles, fnum = 11, rnum = 12,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = ref_cycles, fnum = 12, rnum = 13,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cpu_clock, fnum = 13, rnum = 14,
	      type = double, occurrence = optional, opts = []},
       #field{name = task_clock, fnum = 14, rnum = 15,
	      type = double, occurrence = optional, opts = []},
       #field{name = page_faults, fnum = 15, rnum = 16,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = minor_faults, fnum = 16, rnum = 17,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = major_faults, fnum = 17, rnum = 18,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = context_switches, fnum = 18, rnum = 19,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = cpu_migrations, fnum = 19, rnum = 20,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = alignment_faults, fnum = 20, rnum = 21,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = emulation_faults, fnum = 21, rnum = 22,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_dcache_loads, fnum = 22, rnum = 23,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_dcache_load_misses, fnum = 23,
	      rnum = 24, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_dcache_stores, fnum = 24, rnum = 25,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_dcache_store_misses, fnum = 25,
	      rnum = 26, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_dcache_prefetches, fnum = 26,
	      rnum = 27, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_dcache_prefetch_misses, fnum = 27,
	      rnum = 28, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_icache_loads, fnum = 28, rnum = 29,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = l1_icache_load_misses, fnum = 29,
	      rnum = 30, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_icache_prefetches, fnum = 30,
	      rnum = 31, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = l1_icache_prefetch_misses, fnum = 31,
	      rnum = 32, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = llc_loads, fnum = 32, rnum = 33,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_load_misses, fnum = 33, rnum = 34,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_stores, fnum = 34, rnum = 35,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_store_misses, fnum = 35, rnum = 36,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_prefetches, fnum = 36, rnum = 37,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = llc_prefetch_misses, fnum = 37, rnum = 38,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_loads, fnum = 38, rnum = 39,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_load_misses, fnum = 39, rnum = 40,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_stores, fnum = 40, rnum = 41,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_store_misses, fnum = 41, rnum = 42,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_prefetches, fnum = 42, rnum = 43,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = dtlb_prefetch_misses, fnum = 43,
	      rnum = 44, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = itlb_loads, fnum = 44, rnum = 45,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = itlb_load_misses, fnum = 45, rnum = 46,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branch_loads, fnum = 46, rnum = 47,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = branch_load_misses, fnum = 47, rnum = 48,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_loads, fnum = 48, rnum = 49,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_load_misses, fnum = 49, rnum = 50,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_stores, fnum = 50, rnum = 51,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_store_misses, fnum = 51, rnum = 52,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_prefetches, fnum = 52, rnum = 53,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = node_prefetch_misses, fnum = 53,
	      rnum = 54, type = uint64, occurrence = optional,
	      opts = []}]},
     {{msg, 'ResourceStatistics'},
      [#field{name = timestamp, fnum = 1, rnum = 2,
	      type = double, occurrence = required, opts = []},
       #field{name = processes, fnum = 30, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = threads, fnum = 31, rnum = 4,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_user_time_secs, fnum = 2, rnum = 5,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_system_time_secs, fnum = 3, rnum = 6,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_limit, fnum = 4, rnum = 7,
	      type = double, occurrence = optional, opts = []},
       #field{name = cpus_nr_periods, fnum = 7, rnum = 8,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_nr_throttled, fnum = 8, rnum = 9,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = cpus_throttled_time_secs, fnum = 9,
	      rnum = 10, type = double, occurrence = optional,
	      opts = []},
       #field{name = mem_total_bytes, fnum = 36, rnum = 11,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_total_memsw_bytes, fnum = 37,
	      rnum = 12, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_limit_bytes, fnum = 6, rnum = 13,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_soft_limit_bytes, fnum = 38,
	      rnum = 14, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_file_bytes, fnum = 10, rnum = 15,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_anon_bytes, fnum = 11, rnum = 16,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_cache_bytes, fnum = 39, rnum = 17,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_rss_bytes, fnum = 5, rnum = 18,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_mapped_file_bytes, fnum = 12,
	      rnum = 19, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_swap_bytes, fnum = 40, rnum = 20,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = mem_unevictable_bytes, fnum = 41,
	      rnum = 21, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_low_pressure_counter, fnum = 32,
	      rnum = 22, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_medium_pressure_counter, fnum = 33,
	      rnum = 23, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = mem_critical_pressure_counter, fnum = 34,
	      rnum = 24, type = uint64, occurrence = optional,
	      opts = []},
       #field{name = disk_limit_bytes, fnum = 26, rnum = 25,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = disk_used_bytes, fnum = 27, rnum = 26,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = perf, fnum = 13, rnum = 27,
	      type = {msg, 'PerfStatistics'}, occurrence = optional,
	      opts = []},
       #field{name = net_rx_packets, fnum = 14, rnum = 28,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_rx_bytes, fnum = 15, rnum = 29,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_rx_errors, fnum = 16, rnum = 30,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_rx_dropped, fnum = 17, rnum = 31,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_packets, fnum = 18, rnum = 32,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_bytes, fnum = 19, rnum = 33,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_errors, fnum = 20, rnum = 34,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tx_dropped, fnum = 21, rnum = 35,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = net_tcp_rtt_microsecs_p50, fnum = 22,
	      rnum = 36, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_rtt_microsecs_p90, fnum = 23,
	      rnum = 37, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_rtt_microsecs_p95, fnum = 24,
	      rnum = 38, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_rtt_microsecs_p99, fnum = 25,
	      rnum = 39, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_active_connections, fnum = 28,
	      rnum = 40, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_tcp_time_wait_connections, fnum = 29,
	      rnum = 41, type = double, occurrence = optional,
	      opts = []},
       #field{name = net_traffic_control_statistics, fnum = 35,
	      rnum = 42, type = {msg, 'TrafficControlStatistics'},
	      occurrence = repeated, opts = []},
       #field{name = net_snmp_statistics, fnum = 42, rnum = 43,
	      type = {msg, 'SNMPStatistics'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'FileInfo'},
      [#field{name = path, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = nlink, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = size, fnum = 3, rnum = 4, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = mtime, fnum = 4, rnum = 5,
	      type = {msg, 'TimeInfo'}, occurrence = optional,
	      opts = []},
       #field{name = mode, fnum = 5, rnum = 6, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = uid, fnum = 6, rnum = 7, type = string,
	      occurrence = optional, opts = []},
       #field{name = gid, fnum = 7, rnum = 8, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Response.ListFiles'},
      [#field{name = file_infos, fnum = 1, rnum = 2,
	      type = {msg, 'FileInfo'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'CgroupInfo'},
      [#field{name = net_cls, fnum = 1, rnum = 2,
	      type = {msg, 'CgroupInfo.NetCls'},
	      occurrence = optional, opts = []}]},
     {{msg, 'ContainerStatus'},
      [#field{name = network_infos, fnum = 1, rnum = 2,
	      type = {msg, 'NetworkInfo'}, occurrence = repeated,
	      opts = []},
       #field{name = cgroup_info, fnum = 2, rnum = 3,
	      type = {msg, 'CgroupInfo'}, occurrence = optional,
	      opts = []},
       #field{name = executor_pid, fnum = 3, rnum = 4,
	      type = uint32, occurrence = optional, opts = []}]},
     {{msg, 'TaskStatus'},
      [#field{name = task_id, fnum = 1, rnum = 2,
	      type = {msg, 'TaskID'}, occurrence = required,
	      opts = []},
       #field{name = state, fnum = 2, rnum = 3,
	      type = {enum, 'TaskState'}, occurrence = required,
	      opts = []},
       #field{name = message, fnum = 4, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = source, fnum = 9, rnum = 5,
	      type = {enum, 'TaskStatus.Source'},
	      occurrence = optional, opts = []},
       #field{name = reason, fnum = 10, rnum = 6,
	      type = {enum, 'TaskStatus.Reason'},
	      occurrence = optional, opts = []},
       #field{name = data, fnum = 3, rnum = 7, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = agent_id, fnum = 5, rnum = 8,
	      type = {msg, 'AgentID'}, occurrence = optional,
	      opts = []},
       #field{name = executor_id, fnum = 7, rnum = 9,
	      type = {msg, 'ExecutorID'}, occurrence = optional,
	      opts = []},
       #field{name = timestamp, fnum = 6, rnum = 10,
	      type = double, occurrence = optional, opts = []},
       #field{name = uuid, fnum = 11, rnum = 11, type = bytes,
	      occurrence = optional, opts = []},
       #field{name = healthy, fnum = 8, rnum = 12, type = bool,
	      occurrence = optional, opts = []},
       #field{name = labels, fnum = 12, rnum = 13,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []},
       #field{name = container_status, fnum = 13, rnum = 14,
	      type = {msg, 'ContainerStatus'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Attribute'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3,
	      type = {enum, 'Value.Type'}, occurrence = required,
	      opts = []},
       #field{name = scalar, fnum = 3, rnum = 4,
	      type = {msg, 'Value.Scalar'}, occurrence = optional,
	      opts = []},
       #field{name = ranges, fnum = 4, rnum = 5,
	      type = {msg, 'Value.Ranges'}, occurrence = optional,
	      opts = []},
       #field{name = set, fnum = 6, rnum = 6,
	      type = {msg, 'Value.Set'}, occurrence = optional,
	      opts = []},
       #field{name = text, fnum = 5, rnum = 7,
	      type = {msg, 'Value.Text'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'AgentInfo'},
      [#field{name = hostname, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = port, fnum = 8, rnum = 3, type = int32,
	      occurrence = optional, opts = [{default, 5051}]},
       #field{name = resources, fnum = 3, rnum = 4,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = attributes, fnum = 5, rnum = 5,
	      type = {msg, 'Attribute'}, occurrence = repeated,
	      opts = []},
       #field{name = id, fnum = 6, rnum = 6,
	      type = {msg, 'AgentID'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'Response.GetLoggingLevel'},
      [#field{name = level, fnum = 1, rnum = 2, type = uint32,
	      occurrence = required, opts = []}]},
     {{msg, 'Task'},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = task_id, fnum = 2, rnum = 3,
	      type = {msg, 'TaskID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 3, rnum = 4,
	      type = {msg, 'FrameworkID'}, occurrence = required,
	      opts = []},
       #field{name = executor_id, fnum = 4, rnum = 5,
	      type = {msg, 'ExecutorID'}, occurrence = optional,
	      opts = []},
       #field{name = agent_id, fnum = 5, rnum = 6,
	      type = {msg, 'AgentID'}, occurrence = required,
	      opts = []},
       #field{name = state, fnum = 6, rnum = 7,
	      type = {enum, 'TaskState'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 7, rnum = 8,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = statuses, fnum = 8, rnum = 9,
	      type = {msg, 'TaskStatus'}, occurrence = repeated,
	      opts = []},
       #field{name = status_update_state, fnum = 9, rnum = 10,
	      type = {enum, 'TaskState'}, occurrence = optional,
	      opts = []},
       #field{name = status_update_uuid, fnum = 10, rnum = 11,
	      type = bytes, occurrence = optional, opts = []},
       #field{name = labels, fnum = 11, rnum = 12,
	      type = {msg, 'Labels'}, occurrence = optional,
	      opts = []},
       #field{name = discovery, fnum = 12, rnum = 13,
	      type = {msg, 'DiscoveryInfo'}, occurrence = optional,
	      opts = []},
       #field{name = container, fnum = 13, rnum = 14,
	      type = {msg, 'ContainerInfo'}, occurrence = optional,
	      opts = []},
       #field{name = user, fnum = 14, rnum = 15, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Response.GetContainers.Container'},
      [#field{name = framework_id, fnum = 1, rnum = 2,
	      type = {msg, 'FrameworkID'}, occurrence = required,
	      opts = []},
       #field{name = executor_id, fnum = 2, rnum = 3,
	      type = {msg, 'ExecutorID'}, occurrence = required,
	      opts = []},
       #field{name = executor_name, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = container_id, fnum = 4, rnum = 5,
	      type = {msg, 'ContainerID'}, occurrence = required,
	      opts = []},
       #field{name = container_status, fnum = 5, rnum = 6,
	      type = {msg, 'ContainerStatus'}, occurrence = optional,
	      opts = []},
       #field{name = resource_statistics, fnum = 6, rnum = 7,
	      type = {msg, 'ResourceStatistics'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Response.GetContainers'},
      [#field{name = containers, fnum = 1, rnum = 2,
	      type = {msg, 'Response.GetContainers.Container'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'Response.GetState'}, []},
     {{msg, 'Response.GetVersion'},
      [#field{name = version_info, fnum = 1, rnum = 2,
	      type = {msg, 'VersionInfo'}, occurrence = required,
	      opts = []}]},
     {{msg, 'Response.GetFlags'},
      [#field{name = flags, fnum = 1, rnum = 2,
	      type = {msg, 'Flag'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Response.GetHealth'},
      [#field{name = healthy, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, 'Response'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'Response.Type'}, occurrence = optional,
	      opts = []},
       #field{name = get_health, fnum = 2, rnum = 3,
	      type = {msg, 'Response.GetHealth'},
	      occurrence = optional, opts = []},
       #field{name = get_flags, fnum = 3, rnum = 4,
	      type = {msg, 'Response.GetFlags'},
	      occurrence = optional, opts = []},
       #field{name = get_version, fnum = 4, rnum = 5,
	      type = {msg, 'Response.GetVersion'},
	      occurrence = optional, opts = []},
       #field{name = get_metrics, fnum = 5, rnum = 6,
	      type = {msg, 'Response.GetMetrics'},
	      occurrence = optional, opts = []},
       #field{name = get_logging_level, fnum = 6, rnum = 7,
	      type = {msg, 'Response.GetLoggingLevel'},
	      occurrence = optional, opts = []},
       #field{name = list_files, fnum = 7, rnum = 8,
	      type = {msg, 'Response.ListFiles'},
	      occurrence = optional, opts = []},
       #field{name = get_file_contents, fnum = 8, rnum = 9,
	      type = {msg, 'Response.GetFileContents'},
	      occurrence = optional, opts = []},
       #field{name = get_state, fnum = 9, rnum = 10,
	      type = {msg, 'Response.GetState'},
	      occurrence = optional, opts = []},
       #field{name = get_containers, fnum = 10, rnum = 11,
	      type = {msg, 'Response.GetContainers'},
	      occurrence = optional, opts = []}]},
     {{msg, 'Filters'},
      [#field{name = refuse_seconds, fnum = 1, rnum = 2,
	      type = double, occurrence = optional,
	      opts = [{default, 5.0}]}]},
     {{msg, 'Credentials'},
      [#field{name = credentials, fnum = 1, rnum = 2,
	      type = {msg, 'Credential'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'RateLimit'},
      [#field{name = qps, fnum = 1, rnum = 2, type = double,
	      occurrence = optional, opts = []},
       #field{name = principal, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = capacity, fnum = 3, rnum = 4,
	      type = uint64, occurrence = optional, opts = []}]},
     {{msg, 'RateLimits'},
      [#field{name = limits, fnum = 1, rnum = 2,
	      type = {msg, 'RateLimit'}, occurrence = repeated,
	      opts = []},
       #field{name = aggregate_default_qps, fnum = 2, rnum = 3,
	      type = double, occurrence = optional, opts = []},
       #field{name = aggregate_default_capacity, fnum = 3,
	      rnum = 4, type = uint64, occurrence = optional,
	      opts = []}]},
     {{msg, 'OfferID'},
      [#field{name = value, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, 'InverseOffer'},
      [#field{name = id, fnum = 1, rnum = 2,
	      type = {msg, 'OfferID'}, occurrence = required,
	      opts = []},
       #field{name = url, fnum = 2, rnum = 3,
	      type = {msg, 'URL'}, occurrence = optional, opts = []},
       #field{name = framework_id, fnum = 3, rnum = 4,
	      type = {msg, 'FrameworkID'}, occurrence = required,
	      opts = []},
       #field{name = agent_id, fnum = 4, rnum = 5,
	      type = {msg, 'AgentID'}, occurrence = optional,
	      opts = []},
       #field{name = unavailability, fnum = 5, rnum = 6,
	      type = {msg, 'Unavailability'}, occurrence = required,
	      opts = []},
       #field{name = resources, fnum = 6, rnum = 7,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'ResourceUsage.Executor'},
      [#field{name = executor_info, fnum = 1, rnum = 2,
	      type = {msg, 'ExecutorInfo'}, occurrence = required,
	      opts = []},
       #field{name = allocated, fnum = 2, rnum = 3,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = statistics, fnum = 3, rnum = 4,
	      type = {msg, 'ResourceStatistics'},
	      occurrence = optional, opts = []},
       #field{name = container_id, fnum = 4, rnum = 5,
	      type = {msg, 'ContainerID'}, occurrence = required,
	      opts = []},
       #field{name = tasks, fnum = 5, rnum = 6,
	      type = {msg, 'ResourceUsage.Executor.Task'},
	      occurrence = repeated, opts = []}]},
     {{msg, 'ResourceUsage'},
      [#field{name = executors, fnum = 1, rnum = 2,
	      type = {msg, 'ResourceUsage.Executor'},
	      occurrence = repeated, opts = []},
       #field{name = total, fnum = 2, rnum = 3,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'Offer'},
      [#field{name = id, fnum = 1, rnum = 2,
	      type = {msg, 'OfferID'}, occurrence = required,
	      opts = []},
       #field{name = framework_id, fnum = 2, rnum = 3,
	      type = {msg, 'FrameworkID'}, occurrence = required,
	      opts = []},
       #field{name = agent_id, fnum = 3, rnum = 4,
	      type = {msg, 'AgentID'}, occurrence = required,
	      opts = []},
       #field{name = hostname, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = url, fnum = 8, rnum = 6,
	      type = {msg, 'URL'}, occurrence = optional, opts = []},
       #field{name = resources, fnum = 5, rnum = 7,
	      type = {msg, 'Resource'}, occurrence = repeated,
	      opts = []},
       #field{name = attributes, fnum = 7, rnum = 8,
	      type = {msg, 'Attribute'}, occurrence = repeated,
	      opts = []},
       #field{name = executor_ids, fnum = 6, rnum = 9,
	      type = {msg, 'ExecutorID'}, occurrence = repeated,
	      opts = []},
       #field{name = unavailability, fnum = 9, rnum = 10,
	      type = {msg, 'Unavailability'}, occurrence = optional,
	      opts = []}]}].


get_msg_names() ->
    ['Environment.Variable', 'Environment',
     'CommandInfo.URI', 'CommandInfo', 'Parameter',
     'ContainerInfo.DockerInfo.PortMapping',
     'ContainerInfo.DockerInfo', 'TimeInfo', 'WeightInfo',
     'DurationInfo', 'Unavailability', 'MachineID',
     'MachineInfo', 'Resource.RevocableInfo',
     'Resource.DiskInfo.Source.Mount',
     'Resource.DiskInfo.Source.Path',
     'Resource.DiskInfo.Source', 'Parameters',
     'Volume.Source.DockerVolume', 'Volume.Source',
     'Credential', 'Image.Docker', 'Label', 'Labels',
     'Image.Appc', 'Image', 'Volume',
     'Resource.DiskInfo.Persistence', 'Resource.DiskInfo',
     'Resource.ReservationInfo', 'Value.Set', 'Value.Range',
     'Value.Ranges', 'Value.Scalar', 'Resource',
     'Offer.Operation.Destroy', 'Offer.Operation.Create',
     'Offer.Operation.Unreserve', 'Offer.Operation.Reserve',
     'Port', 'Ports', 'DiscoveryInfo', 'KillPolicy',
     'HealthCheck.HTTP', 'HealthCheck',
     'NetworkInfo.IPAddress', 'NetworkInfo',
     'ContainerInfo.MesosInfo', 'ContainerInfo',
     'FrameworkID', 'ExecutorID', 'ExecutorInfo', 'AgentID',
     'TaskID', 'TaskInfo', 'Offer.Operation.Launch',
     'Offer.Operation', 'Flag', 'Value.Text', 'Value',
     'Request', 'ContainerID', 'Metric',
     'Response.GetFileContents', 'CgroupInfo.NetCls',
     'Call.GetMetrics', 'UdpStatistics', 'TcpStatistics',
     'IpStatistics', 'Response.GetMetrics', 'VersionInfo',
     'Address', 'MasterInfo', 'FrameworkInfo.Capability',
     'FrameworkInfo', 'URL', 'Call.ReadFile',
     'Call.ListFiles', 'Call.SetLoggingLevel', 'Call',
     'ResourceUsage.Executor.Task', 'Role', 'IcmpStatistics',
     'SNMPStatistics', 'TrafficControlStatistics',
     'PerfStatistics', 'ResourceStatistics', 'FileInfo',
     'Response.ListFiles', 'CgroupInfo', 'ContainerStatus',
     'TaskStatus', 'Attribute', 'AgentInfo',
     'Response.GetLoggingLevel', 'Task',
     'Response.GetContainers.Container',
     'Response.GetContainers', 'Response.GetState',
     'Response.GetVersion', 'Response.GetFlags',
     'Response.GetHealth', 'Response', 'Filters',
     'Credentials', 'RateLimit', 'RateLimits', 'OfferID',
     'InverseOffer', 'ResourceUsage.Executor',
     'ResourceUsage', 'Offer'].


get_enum_names() ->
    ['Call.Type', 'Response.Type', 'Status',
     'MachineInfo.Mode', 'FrameworkInfo.Capability.Type',
     'Value.Type', 'Resource.DiskInfo.Source.Type',
     'Offer.Operation.Type', 'TaskState',
     'TaskStatus.Source', 'TaskStatus.Reason', 'Image.Type',
     'Volume.Mode', 'Volume.Source.Type',
     'NetworkInfo.Protocol', 'ContainerInfo.Type',
     'ContainerInfo.DockerInfo.Network',
     'DiscoveryInfo.Visibility'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Environment.Variable') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Environment') ->
    [#field{name = variables, fnum = 1, rnum = 2,
	    type = {msg, 'Environment.Variable'},
	    occurrence = repeated, opts = []}];
find_msg_def('CommandInfo.URI') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = executable, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []},
     #field{name = extract, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = [{default, true}]},
     #field{name = cache, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []},
     #field{name = output_file, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('CommandInfo') ->
    [#field{name = uris, fnum = 1, rnum = 2,
	    type = {msg, 'CommandInfo.URI'}, occurrence = repeated,
	    opts = []},
     #field{name = environment, fnum = 2, rnum = 3,
	    type = {msg, 'Environment'}, occurrence = optional,
	    opts = []},
     #field{name = shell, fnum = 6, rnum = 4, type = bool,
	    occurrence = optional, opts = [{default, true}]},
     #field{name = value, fnum = 3, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = arguments, fnum = 7, rnum = 6,
	    type = string, occurrence = repeated, opts = []},
     #field{name = user, fnum = 5, rnum = 7, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Parameter') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ContainerInfo.DockerInfo.PortMapping') ->
    [#field{name = host_port, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = container_port, fnum = 2, rnum = 3,
	    type = uint32, occurrence = required, opts = []},
     #field{name = protocol, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('ContainerInfo.DockerInfo') ->
    [#field{name = image, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = network, fnum = 2, rnum = 3,
	    type = {enum, 'ContainerInfo.DockerInfo.Network'},
	    occurrence = optional, opts = [{default, 'HOST'}]},
     #field{name = port_mappings, fnum = 3, rnum = 4,
	    type = {msg, 'ContainerInfo.DockerInfo.PortMapping'},
	    occurrence = repeated, opts = []},
     #field{name = privileged, fnum = 4, rnum = 5,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = parameters, fnum = 5, rnum = 6,
	    type = {msg, 'Parameter'}, occurrence = repeated,
	    opts = []},
     #field{name = force_pull_image, fnum = 6, rnum = 7,
	    type = bool, occurrence = optional, opts = []},
     #field{name = volume_driver, fnum = 7, rnum = 8,
	    type = string, occurrence = optional,
	    opts = [deprecated]}];
find_msg_def('TimeInfo') ->
    [#field{name = nanoseconds, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('WeightInfo') ->
    [#field{name = weight, fnum = 1, rnum = 2,
	    type = double, occurrence = required, opts = []},
     #field{name = role, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('DurationInfo') ->
    [#field{name = nanoseconds, fnum = 1, rnum = 2,
	    type = int64, occurrence = required, opts = []}];
find_msg_def('Unavailability') ->
    [#field{name = start, fnum = 1, rnum = 2,
	    type = {msg, 'TimeInfo'}, occurrence = required,
	    opts = []},
     #field{name = duration, fnum = 2, rnum = 3,
	    type = {msg, 'DurationInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('MachineID') ->
    [#field{name = hostname, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('MachineInfo') ->
    [#field{name = id, fnum = 1, rnum = 2,
	    type = {msg, 'MachineID'}, occurrence = required,
	    opts = []},
     #field{name = mode, fnum = 2, rnum = 3,
	    type = {enum, 'MachineInfo.Mode'},
	    occurrence = optional, opts = []},
     #field{name = unavailability, fnum = 3, rnum = 4,
	    type = {msg, 'Unavailability'}, occurrence = optional,
	    opts = []}];
find_msg_def('Resource.RevocableInfo') -> [];
find_msg_def('Resource.DiskInfo.Source.Mount') ->
    [#field{name = root, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Resource.DiskInfo.Source.Path') ->
    [#field{name = root, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Resource.DiskInfo.Source') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Resource.DiskInfo.Source.Type'},
	    occurrence = required, opts = []},
     #field{name = path, fnum = 2, rnum = 3,
	    type = {msg, 'Resource.DiskInfo.Source.Path'},
	    occurrence = optional, opts = []},
     #field{name = mount, fnum = 3, rnum = 4,
	    type = {msg, 'Resource.DiskInfo.Source.Mount'},
	    occurrence = optional, opts = []}];
find_msg_def('Parameters') ->
    [#field{name = parameter, fnum = 1, rnum = 2,
	    type = {msg, 'Parameter'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Volume.Source.DockerVolume') ->
    [#field{name = driver, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = driver_options, fnum = 3, rnum = 4,
	    type = {msg, 'Parameters'}, occurrence = optional,
	    opts = []}];
find_msg_def('Volume.Source') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Volume.Source.Type'},
	    occurrence = optional, opts = []},
     #field{name = docker_volume, fnum = 2, rnum = 3,
	    type = {msg, 'Volume.Source.DockerVolume'},
	    occurrence = optional, opts = []}];
find_msg_def('Credential') ->
    [#field{name = principal, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = secret, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Image.Docker') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = credential, fnum = 2, rnum = 3,
	    type = {msg, 'Credential'}, occurrence = optional,
	    opts = []}];
find_msg_def('Label') ->
    [#field{name = key, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Labels') ->
    [#field{name = labels, fnum = 1, rnum = 2,
	    type = {msg, 'Label'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Image.Appc') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 3, rnum = 4,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('Image') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Image.Type'}, occurrence = required,
	    opts = []},
     #field{name = appc, fnum = 2, rnum = 3,
	    type = {msg, 'Image.Appc'}, occurrence = optional,
	    opts = []},
     #field{name = docker, fnum = 3, rnum = 4,
	    type = {msg, 'Image.Docker'}, occurrence = optional,
	    opts = []},
     #field{name = cached, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = [{default, true}]}];
find_msg_def('Volume') ->
    [#field{name = mode, fnum = 3, rnum = 2,
	    type = {enum, 'Volume.Mode'}, occurrence = required,
	    opts = []},
     #field{name = container_path, fnum = 1, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = host_path, fnum = 2, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = image, fnum = 4, rnum = 5,
	    type = {msg, 'Image'}, occurrence = optional,
	    opts = []},
     #field{name = source, fnum = 5, rnum = 6,
	    type = {msg, 'Volume.Source'}, occurrence = optional,
	    opts = []}];
find_msg_def('Resource.DiskInfo.Persistence') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = principal, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Resource.DiskInfo') ->
    [#field{name = persistence, fnum = 1, rnum = 2,
	    type = {msg, 'Resource.DiskInfo.Persistence'},
	    occurrence = optional, opts = []},
     #field{name = volume, fnum = 2, rnum = 3,
	    type = {msg, 'Volume'}, occurrence = optional,
	    opts = []},
     #field{name = source, fnum = 3, rnum = 4,
	    type = {msg, 'Resource.DiskInfo.Source'},
	    occurrence = optional, opts = []}];
find_msg_def('Resource.ReservationInfo') ->
    [#field{name = principal, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = labels, fnum = 2, rnum = 3,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('Value.Set') ->
    [#field{name = item, fnum = 1, rnum = 2, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('Value.Range') ->
    [#field{name = 'begin', fnum = 1, rnum = 2,
	    type = uint64, occurrence = required, opts = []},
     #field{name = 'end', fnum = 2, rnum = 3, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def('Value.Ranges') ->
    [#field{name = range, fnum = 1, rnum = 2,
	    type = {msg, 'Value.Range'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Value.Scalar') ->
    [#field{name = value, fnum = 1, rnum = 2, type = double,
	    occurrence = required, opts = []}];
find_msg_def('Resource') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'Value.Type'}, occurrence = required,
	    opts = []},
     #field{name = scalar, fnum = 3, rnum = 4,
	    type = {msg, 'Value.Scalar'}, occurrence = optional,
	    opts = []},
     #field{name = ranges, fnum = 4, rnum = 5,
	    type = {msg, 'Value.Ranges'}, occurrence = optional,
	    opts = []},
     #field{name = set, fnum = 5, rnum = 6,
	    type = {msg, 'Value.Set'}, occurrence = optional,
	    opts = []},
     #field{name = role, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = [{default, "*"}]},
     #field{name = reservation, fnum = 8, rnum = 8,
	    type = {msg, 'Resource.ReservationInfo'},
	    occurrence = optional, opts = []},
     #field{name = disk, fnum = 7, rnum = 9,
	    type = {msg, 'Resource.DiskInfo'},
	    occurrence = optional, opts = []},
     #field{name = revocable, fnum = 9, rnum = 10,
	    type = {msg, 'Resource.RevocableInfo'},
	    occurrence = optional, opts = []}];
find_msg_def('Offer.Operation.Destroy') ->
    [#field{name = volumes, fnum = 1, rnum = 2,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Offer.Operation.Create') ->
    [#field{name = volumes, fnum = 1, rnum = 2,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Offer.Operation.Unreserve') ->
    [#field{name = resources, fnum = 1, rnum = 2,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Offer.Operation.Reserve') ->
    [#field{name = resources, fnum = 1, rnum = 2,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Port') ->
    [#field{name = number, fnum = 1, rnum = 2,
	    type = uint32, occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = protocol, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = visibility, fnum = 4, rnum = 5,
	    type = {enum, 'DiscoveryInfo.Visibility'},
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 5, rnum = 6,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('Ports') ->
    [#field{name = ports, fnum = 1, rnum = 2,
	    type = {msg, 'Port'}, occurrence = repeated,
	    opts = []}];
find_msg_def('DiscoveryInfo') ->
    [#field{name = visibility, fnum = 1, rnum = 2,
	    type = {enum, 'DiscoveryInfo.Visibility'},
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = environment, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = location, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = version, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = ports, fnum = 6, rnum = 7,
	    type = {msg, 'Ports'}, occurrence = optional,
	    opts = []},
     #field{name = labels, fnum = 7, rnum = 8,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('KillPolicy') ->
    [#field{name = grace_period, fnum = 1, rnum = 2,
	    type = {msg, 'DurationInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('HealthCheck.HTTP') ->
    [#field{name = port, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = path, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = [{default, "/"}]},
     #field{name = statuses, fnum = 4, rnum = 4,
	    type = uint32, occurrence = repeated, opts = []}];
find_msg_def('HealthCheck') ->
    [#field{name = http, fnum = 1, rnum = 2,
	    type = {msg, 'HealthCheck.HTTP'}, occurrence = optional,
	    opts = []},
     #field{name = delay_seconds, fnum = 2, rnum = 3,
	    type = double, occurrence = optional,
	    opts = [{default, 1.5e+1}]},
     #field{name = interval_seconds, fnum = 3, rnum = 4,
	    type = double, occurrence = optional,
	    opts = [{default, 1.0e+1}]},
     #field{name = timeout_seconds, fnum = 4, rnum = 5,
	    type = double, occurrence = optional,
	    opts = [{default, 2.0e+1}]},
     #field{name = consecutive_failures, fnum = 5, rnum = 6,
	    type = uint32, occurrence = optional,
	    opts = [{default, 3}]},
     #field{name = grace_period_seconds, fnum = 6, rnum = 7,
	    type = double, occurrence = optional,
	    opts = [{default, 1.0e+1}]},
     #field{name = command, fnum = 7, rnum = 8,
	    type = {msg, 'CommandInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('NetworkInfo.IPAddress') ->
    [#field{name = protocol, fnum = 1, rnum = 2,
	    type = {enum, 'NetworkInfo.Protocol'},
	    occurrence = optional, opts = []},
     #field{name = ip_address, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('NetworkInfo') ->
    [#field{name = ip_addresses, fnum = 5, rnum = 2,
	    type = {msg, 'NetworkInfo.IPAddress'},
	    occurrence = repeated, opts = []},
     #field{name = name, fnum = 6, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = groups, fnum = 3, rnum = 4, type = string,
	    occurrence = repeated, opts = []},
     #field{name = labels, fnum = 4, rnum = 5,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('ContainerInfo.MesosInfo') ->
    [#field{name = image, fnum = 1, rnum = 2,
	    type = {msg, 'Image'}, occurrence = optional,
	    opts = []}];
find_msg_def('ContainerInfo') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'ContainerInfo.Type'},
	    occurrence = required, opts = []},
     #field{name = volumes, fnum = 2, rnum = 3,
	    type = {msg, 'Volume'}, occurrence = repeated,
	    opts = []},
     #field{name = hostname, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = docker, fnum = 3, rnum = 5,
	    type = {msg, 'ContainerInfo.DockerInfo'},
	    occurrence = optional, opts = []},
     #field{name = mesos, fnum = 5, rnum = 6,
	    type = {msg, 'ContainerInfo.MesosInfo'},
	    occurrence = optional, opts = []},
     #field{name = network_infos, fnum = 7, rnum = 7,
	    type = {msg, 'NetworkInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('FrameworkID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ExecutorID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('ExecutorInfo') ->
    [#field{name = executor_id, fnum = 1, rnum = 2,
	    type = {msg, 'ExecutorID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 8, rnum = 3,
	    type = {msg, 'FrameworkID'}, occurrence = optional,
	    opts = []},
     #field{name = command, fnum = 7, rnum = 4,
	    type = {msg, 'CommandInfo'}, occurrence = required,
	    opts = []},
     #field{name = container, fnum = 11, rnum = 5,
	    type = {msg, 'ContainerInfo'}, occurrence = optional,
	    opts = []},
     #field{name = resources, fnum = 5, rnum = 6,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = name, fnum = 9, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = source, fnum = 10, rnum = 8,
	    type = string, occurrence = optional,
	    opts = [deprecated]},
     #field{name = data, fnum = 4, rnum = 9, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = discovery, fnum = 12, rnum = 10,
	    type = {msg, 'DiscoveryInfo'}, occurrence = optional,
	    opts = []},
     #field{name = shutdown_grace_period, fnum = 13,
	    rnum = 11, type = {msg, 'DurationInfo'},
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 14, rnum = 12,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('AgentID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('TaskID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('TaskInfo') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = task_id, fnum = 2, rnum = 3,
	    type = {msg, 'TaskID'}, occurrence = required,
	    opts = []},
     #field{name = agent_id, fnum = 3, rnum = 4,
	    type = {msg, 'AgentID'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 4, rnum = 5,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = executor, fnum = 5, rnum = 6,
	    type = {msg, 'ExecutorInfo'}, occurrence = optional,
	    opts = []},
     #field{name = command, fnum = 7, rnum = 7,
	    type = {msg, 'CommandInfo'}, occurrence = optional,
	    opts = []},
     #field{name = container, fnum = 9, rnum = 8,
	    type = {msg, 'ContainerInfo'}, occurrence = optional,
	    opts = []},
     #field{name = health_check, fnum = 8, rnum = 9,
	    type = {msg, 'HealthCheck'}, occurrence = optional,
	    opts = []},
     #field{name = kill_policy, fnum = 12, rnum = 10,
	    type = {msg, 'KillPolicy'}, occurrence = optional,
	    opts = []},
     #field{name = data, fnum = 6, rnum = 11, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 10, rnum = 12,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []},
     #field{name = discovery, fnum = 11, rnum = 13,
	    type = {msg, 'DiscoveryInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('Offer.Operation.Launch') ->
    [#field{name = task_infos, fnum = 1, rnum = 2,
	    type = {msg, 'TaskInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Offer.Operation') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Offer.Operation.Type'},
	    occurrence = required, opts = []},
     #field{name = launch, fnum = 2, rnum = 3,
	    type = {msg, 'Offer.Operation.Launch'},
	    occurrence = optional, opts = []},
     #field{name = reserve, fnum = 3, rnum = 4,
	    type = {msg, 'Offer.Operation.Reserve'},
	    occurrence = optional, opts = []},
     #field{name = unreserve, fnum = 4, rnum = 5,
	    type = {msg, 'Offer.Operation.Unreserve'},
	    occurrence = optional, opts = []},
     #field{name = create, fnum = 5, rnum = 6,
	    type = {msg, 'Offer.Operation.Create'},
	    occurrence = optional, opts = []},
     #field{name = destroy, fnum = 6, rnum = 7,
	    type = {msg, 'Offer.Operation.Destroy'},
	    occurrence = optional, opts = []}];
find_msg_def('Flag') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Value.Text') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Value') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Value.Type'}, occurrence = required,
	    opts = []},
     #field{name = scalar, fnum = 2, rnum = 3,
	    type = {msg, 'Value.Scalar'}, occurrence = optional,
	    opts = []},
     #field{name = ranges, fnum = 3, rnum = 4,
	    type = {msg, 'Value.Ranges'}, occurrence = optional,
	    opts = []},
     #field{name = set, fnum = 4, rnum = 5,
	    type = {msg, 'Value.Set'}, occurrence = optional,
	    opts = []},
     #field{name = text, fnum = 5, rnum = 6,
	    type = {msg, 'Value.Text'}, occurrence = optional,
	    opts = []}];
find_msg_def('Request') ->
    [#field{name = agent_id, fnum = 1, rnum = 2,
	    type = {msg, 'AgentID'}, occurrence = optional,
	    opts = []},
     #field{name = resources, fnum = 2, rnum = 3,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ContainerID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Metric') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = double,
	    occurrence = optional, opts = []}];
find_msg_def('Response.GetFileContents') ->
    [#field{name = data, fnum = 1, rnum = 2, type = bytes,
	    occurrence = repeated, opts = []}];
find_msg_def('CgroupInfo.NetCls') ->
    [#field{name = classid, fnum = 1, rnum = 2,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('Call.GetMetrics') ->
    [#field{name = timeout, fnum = 1, rnum = 2,
	    type = {msg, 'DurationInfo'}, occurrence = optional,
	    opts = []}];
find_msg_def('UdpStatistics') ->
    [#field{name = 'InDatagrams', fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'NoPorts', fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InErrors', fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutDatagrams', fnum = 4, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'RcvbufErrors', fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'SndbufErrors', fnum = 6, rnum = 7,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InCsumErrors', fnum = 7, rnum = 8,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'IgnoredMulti', fnum = 8, rnum = 9,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('TcpStatistics') ->
    [#field{name = 'RtoAlgorithm', fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'RtoMin', fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'RtoMax', fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'MaxConn', fnum = 4, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'ActiveOpens', fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'PassiveOpens', fnum = 6, rnum = 7,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'AttemptFails', fnum = 7, rnum = 8,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'EstabResets', fnum = 8, rnum = 9,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'CurrEstab', fnum = 9, rnum = 10,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InSegs', fnum = 10, rnum = 11,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutSegs', fnum = 11, rnum = 12,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'RetransSegs', fnum = 12, rnum = 13,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InErrs', fnum = 13, rnum = 14,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutRsts', fnum = 14, rnum = 15,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InCsumErrors', fnum = 15, rnum = 16,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('IpStatistics') ->
    [#field{name = 'Forwarding', fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'DefaultTTL', fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InReceives', fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InHdrErrors', fnum = 4, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InAddrErrors', fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'ForwDatagrams', fnum = 6, rnum = 7,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InUnknownProtos', fnum = 7, rnum = 8,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InDiscards', fnum = 8, rnum = 9,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InDelivers', fnum = 9, rnum = 10,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutRequests', fnum = 10, rnum = 11,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutDiscards', fnum = 11, rnum = 12,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutNoRoutes', fnum = 12, rnum = 13,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'ReasmTimeout', fnum = 13, rnum = 14,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'ReasmReqds', fnum = 14, rnum = 15,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'ReasmOKs', fnum = 15, rnum = 16,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'ReasmFails', fnum = 16, rnum = 17,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'FragOKs', fnum = 17, rnum = 18,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'FragFails', fnum = 18, rnum = 19,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'FragCreates', fnum = 19, rnum = 20,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('Response.GetMetrics') ->
    [#field{name = metrics, fnum = 1, rnum = 2,
	    type = {msg, 'Metric'}, occurrence = repeated,
	    opts = []}];
find_msg_def('VersionInfo') ->
    [#field{name = version, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = build_date, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = build_time, fnum = 3, rnum = 4,
	    type = double, occurrence = optional, opts = []},
     #field{name = build_user, fnum = 4, rnum = 5,
	    type = string, occurrence = optional, opts = []},
     #field{name = git_sha, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = git_branch, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = git_tag, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Address') ->
    [#field{name = hostname, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def('MasterInfo') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = ip, fnum = 2, rnum = 3, type = uint32,
	    occurrence = required, opts = []},
     #field{name = port, fnum = 3, rnum = 4, type = uint32,
	    occurrence = required, opts = [{default, 5050}]},
     #field{name = pid, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = hostname, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = version, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []},
     #field{name = address, fnum = 7, rnum = 8,
	    type = {msg, 'Address'}, occurrence = optional,
	    opts = []}];
find_msg_def('FrameworkInfo.Capability') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'FrameworkInfo.Capability.Type'},
	    occurrence = optional, opts = []}];
find_msg_def('FrameworkInfo') ->
    [#field{name = user, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 3, rnum = 4,
	    type = {msg, 'FrameworkID'}, occurrence = optional,
	    opts = []},
     #field{name = failover_timeout, fnum = 4, rnum = 5,
	    type = double, occurrence = optional,
	    opts = [{default, 0.0}]},
     #field{name = checkpoint, fnum = 5, rnum = 6,
	    type = bool, occurrence = optional,
	    opts = [{default, false}]},
     #field{name = role, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = [{default, "*"}]},
     #field{name = hostname, fnum = 7, rnum = 8,
	    type = string, occurrence = optional, opts = []},
     #field{name = principal, fnum = 8, rnum = 9,
	    type = string, occurrence = optional, opts = []},
     #field{name = webui_url, fnum = 9, rnum = 10,
	    type = string, occurrence = optional, opts = []},
     #field{name = capabilities, fnum = 10, rnum = 11,
	    type = {msg, 'FrameworkInfo.Capability'},
	    occurrence = repeated, opts = []},
     #field{name = labels, fnum = 11, rnum = 12,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('URL') ->
    [#field{name = scheme, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = address, fnum = 2, rnum = 3,
	    type = {msg, 'Address'}, occurrence = required,
	    opts = []},
     #field{name = path, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []},
     #field{name = query, fnum = 4, rnum = 5,
	    type = {msg, 'Parameter'}, occurrence = repeated,
	    opts = []},
     #field{name = fragment, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('Call.ReadFile') ->
    [#field{name = path, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = offset, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = length, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Call.ListFiles') ->
    [#field{name = path, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('Call.SetLoggingLevel') ->
    [#field{name = level, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []},
     #field{name = duration, fnum = 2, rnum = 3,
	    type = {msg, 'DurationInfo'}, occurrence = required,
	    opts = []}];
find_msg_def('Call') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Call.Type'}, occurrence = optional,
	    opts = []},
     #field{name = get_metrics, fnum = 2, rnum = 3,
	    type = {msg, 'Call.GetMetrics'}, occurrence = optional,
	    opts = []},
     #field{name = set_logging_level, fnum = 3, rnum = 4,
	    type = {msg, 'Call.SetLoggingLevel'},
	    occurrence = optional, opts = []},
     #field{name = list_files, fnum = 4, rnum = 5,
	    type = {msg, 'Call.ListFiles'}, occurrence = optional,
	    opts = []},
     #field{name = read_file, fnum = 5, rnum = 6,
	    type = {msg, 'Call.ReadFile'}, occurrence = optional,
	    opts = []}];
find_msg_def('ResourceUsage.Executor.Task') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3,
	    type = {msg, 'TaskID'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 3, rnum = 4,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = labels, fnum = 4, rnum = 5,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []}];
find_msg_def('Role') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = weight, fnum = 2, rnum = 3, type = double,
	    occurrence = required, opts = []},
     #field{name = frameworks, fnum = 3, rnum = 4,
	    type = {msg, 'FrameworkID'}, occurrence = repeated,
	    opts = []},
     #field{name = resources, fnum = 4, rnum = 5,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('IcmpStatistics') ->
    [#field{name = 'InMsgs', fnum = 1, rnum = 2,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InErrors', fnum = 2, rnum = 3,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InCsumErrors', fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InDestUnreachs', fnum = 4, rnum = 5,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InTimeExcds', fnum = 5, rnum = 6,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InParmProbs', fnum = 6, rnum = 7,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InSrcQuenchs', fnum = 7, rnum = 8,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InRedirects', fnum = 8, rnum = 9,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InEchos', fnum = 9, rnum = 10,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InEchoReps', fnum = 10, rnum = 11,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InTimestamps', fnum = 11, rnum = 12,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InTimestampReps', fnum = 12, rnum = 13,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InAddrMasks', fnum = 13, rnum = 14,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'InAddrMaskReps', fnum = 14, rnum = 15,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutMsgs', fnum = 15, rnum = 16,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutErrors', fnum = 16, rnum = 17,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutDestUnreachs', fnum = 17, rnum = 18,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutTimeExcds', fnum = 18, rnum = 19,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutParmProbs', fnum = 19, rnum = 20,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutSrcQuenchs', fnum = 20, rnum = 21,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutRedirects', fnum = 21, rnum = 22,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutEchos', fnum = 22, rnum = 23,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutEchoReps', fnum = 23, rnum = 24,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutTimestamps', fnum = 24, rnum = 25,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutTimestampReps', fnum = 25, rnum = 26,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutAddrMasks', fnum = 26, rnum = 27,
	    type = int64, occurrence = optional, opts = []},
     #field{name = 'OutAddrMaskReps', fnum = 27, rnum = 28,
	    type = int64, occurrence = optional, opts = []}];
find_msg_def('SNMPStatistics') ->
    [#field{name = ip_stats, fnum = 1, rnum = 2,
	    type = {msg, 'IpStatistics'}, occurrence = optional,
	    opts = []},
     #field{name = icmp_stats, fnum = 2, rnum = 3,
	    type = {msg, 'IcmpStatistics'}, occurrence = optional,
	    opts = []},
     #field{name = tcp_stats, fnum = 3, rnum = 4,
	    type = {msg, 'TcpStatistics'}, occurrence = optional,
	    opts = []},
     #field{name = udp_stats, fnum = 4, rnum = 5,
	    type = {msg, 'UdpStatistics'}, occurrence = optional,
	    opts = []}];
find_msg_def('TrafficControlStatistics') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = backlog, fnum = 2, rnum = 3,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = bytes, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = drops, fnum = 4, rnum = 5, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = overlimits, fnum = 5, rnum = 6,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = packets, fnum = 6, rnum = 7,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = qlen, fnum = 7, rnum = 8, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = ratebps, fnum = 8, rnum = 9,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = ratepps, fnum = 9, rnum = 10,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = requeues, fnum = 10, rnum = 11,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('PerfStatistics') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = double, occurrence = required, opts = []},
     #field{name = duration, fnum = 2, rnum = 3,
	    type = double, occurrence = required, opts = []},
     #field{name = cycles, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = stalled_cycles_frontend, fnum = 4,
	    rnum = 5, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = stalled_cycles_backend, fnum = 5,
	    rnum = 6, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = instructions, fnum = 6, rnum = 7,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cache_references, fnum = 7, rnum = 8,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cache_misses, fnum = 8, rnum = 9,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branches, fnum = 9, rnum = 10,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branch_misses, fnum = 10, rnum = 11,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = bus_cycles, fnum = 11, rnum = 12,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = ref_cycles, fnum = 12, rnum = 13,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cpu_clock, fnum = 13, rnum = 14,
	    type = double, occurrence = optional, opts = []},
     #field{name = task_clock, fnum = 14, rnum = 15,
	    type = double, occurrence = optional, opts = []},
     #field{name = page_faults, fnum = 15, rnum = 16,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = minor_faults, fnum = 16, rnum = 17,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = major_faults, fnum = 17, rnum = 18,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = context_switches, fnum = 18, rnum = 19,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = cpu_migrations, fnum = 19, rnum = 20,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = alignment_faults, fnum = 20, rnum = 21,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = emulation_faults, fnum = 21, rnum = 22,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_dcache_loads, fnum = 22, rnum = 23,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_dcache_load_misses, fnum = 23,
	    rnum = 24, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_dcache_stores, fnum = 24, rnum = 25,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_dcache_store_misses, fnum = 25,
	    rnum = 26, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_dcache_prefetches, fnum = 26,
	    rnum = 27, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_dcache_prefetch_misses, fnum = 27,
	    rnum = 28, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_icache_loads, fnum = 28, rnum = 29,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = l1_icache_load_misses, fnum = 29,
	    rnum = 30, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_icache_prefetches, fnum = 30,
	    rnum = 31, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = l1_icache_prefetch_misses, fnum = 31,
	    rnum = 32, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = llc_loads, fnum = 32, rnum = 33,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_load_misses, fnum = 33, rnum = 34,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_stores, fnum = 34, rnum = 35,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_store_misses, fnum = 35, rnum = 36,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_prefetches, fnum = 36, rnum = 37,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = llc_prefetch_misses, fnum = 37, rnum = 38,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_loads, fnum = 38, rnum = 39,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_load_misses, fnum = 39, rnum = 40,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_stores, fnum = 40, rnum = 41,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_store_misses, fnum = 41, rnum = 42,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_prefetches, fnum = 42, rnum = 43,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = dtlb_prefetch_misses, fnum = 43,
	    rnum = 44, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = itlb_loads, fnum = 44, rnum = 45,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = itlb_load_misses, fnum = 45, rnum = 46,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branch_loads, fnum = 46, rnum = 47,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = branch_load_misses, fnum = 47, rnum = 48,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_loads, fnum = 48, rnum = 49,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_load_misses, fnum = 49, rnum = 50,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_stores, fnum = 50, rnum = 51,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_store_misses, fnum = 51, rnum = 52,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_prefetches, fnum = 52, rnum = 53,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = node_prefetch_misses, fnum = 53,
	    rnum = 54, type = uint64, occurrence = optional,
	    opts = []}];
find_msg_def('ResourceStatistics') ->
    [#field{name = timestamp, fnum = 1, rnum = 2,
	    type = double, occurrence = required, opts = []},
     #field{name = processes, fnum = 30, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = threads, fnum = 31, rnum = 4,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_user_time_secs, fnum = 2, rnum = 5,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_system_time_secs, fnum = 3, rnum = 6,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_limit, fnum = 4, rnum = 7,
	    type = double, occurrence = optional, opts = []},
     #field{name = cpus_nr_periods, fnum = 7, rnum = 8,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_nr_throttled, fnum = 8, rnum = 9,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = cpus_throttled_time_secs, fnum = 9,
	    rnum = 10, type = double, occurrence = optional,
	    opts = []},
     #field{name = mem_total_bytes, fnum = 36, rnum = 11,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_total_memsw_bytes, fnum = 37,
	    rnum = 12, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_limit_bytes, fnum = 6, rnum = 13,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_soft_limit_bytes, fnum = 38,
	    rnum = 14, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_file_bytes, fnum = 10, rnum = 15,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_anon_bytes, fnum = 11, rnum = 16,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_cache_bytes, fnum = 39, rnum = 17,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_rss_bytes, fnum = 5, rnum = 18,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_mapped_file_bytes, fnum = 12,
	    rnum = 19, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_swap_bytes, fnum = 40, rnum = 20,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = mem_unevictable_bytes, fnum = 41,
	    rnum = 21, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_low_pressure_counter, fnum = 32,
	    rnum = 22, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_medium_pressure_counter, fnum = 33,
	    rnum = 23, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = mem_critical_pressure_counter, fnum = 34,
	    rnum = 24, type = uint64, occurrence = optional,
	    opts = []},
     #field{name = disk_limit_bytes, fnum = 26, rnum = 25,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = disk_used_bytes, fnum = 27, rnum = 26,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = perf, fnum = 13, rnum = 27,
	    type = {msg, 'PerfStatistics'}, occurrence = optional,
	    opts = []},
     #field{name = net_rx_packets, fnum = 14, rnum = 28,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_rx_bytes, fnum = 15, rnum = 29,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_rx_errors, fnum = 16, rnum = 30,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_rx_dropped, fnum = 17, rnum = 31,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_packets, fnum = 18, rnum = 32,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_bytes, fnum = 19, rnum = 33,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_errors, fnum = 20, rnum = 34,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tx_dropped, fnum = 21, rnum = 35,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = net_tcp_rtt_microsecs_p50, fnum = 22,
	    rnum = 36, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_rtt_microsecs_p90, fnum = 23,
	    rnum = 37, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_rtt_microsecs_p95, fnum = 24,
	    rnum = 38, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_rtt_microsecs_p99, fnum = 25,
	    rnum = 39, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_active_connections, fnum = 28,
	    rnum = 40, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_tcp_time_wait_connections, fnum = 29,
	    rnum = 41, type = double, occurrence = optional,
	    opts = []},
     #field{name = net_traffic_control_statistics, fnum = 35,
	    rnum = 42, type = {msg, 'TrafficControlStatistics'},
	    occurrence = repeated, opts = []},
     #field{name = net_snmp_statistics, fnum = 42, rnum = 43,
	    type = {msg, 'SNMPStatistics'}, occurrence = optional,
	    opts = []}];
find_msg_def('FileInfo') ->
    [#field{name = path, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = nlink, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = size, fnum = 3, rnum = 4, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = mtime, fnum = 4, rnum = 5,
	    type = {msg, 'TimeInfo'}, occurrence = optional,
	    opts = []},
     #field{name = mode, fnum = 5, rnum = 6, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = uid, fnum = 6, rnum = 7, type = string,
	    occurrence = optional, opts = []},
     #field{name = gid, fnum = 7, rnum = 8, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Response.ListFiles') ->
    [#field{name = file_infos, fnum = 1, rnum = 2,
	    type = {msg, 'FileInfo'}, occurrence = repeated,
	    opts = []}];
find_msg_def('CgroupInfo') ->
    [#field{name = net_cls, fnum = 1, rnum = 2,
	    type = {msg, 'CgroupInfo.NetCls'},
	    occurrence = optional, opts = []}];
find_msg_def('ContainerStatus') ->
    [#field{name = network_infos, fnum = 1, rnum = 2,
	    type = {msg, 'NetworkInfo'}, occurrence = repeated,
	    opts = []},
     #field{name = cgroup_info, fnum = 2, rnum = 3,
	    type = {msg, 'CgroupInfo'}, occurrence = optional,
	    opts = []},
     #field{name = executor_pid, fnum = 3, rnum = 4,
	    type = uint32, occurrence = optional, opts = []}];
find_msg_def('TaskStatus') ->
    [#field{name = task_id, fnum = 1, rnum = 2,
	    type = {msg, 'TaskID'}, occurrence = required,
	    opts = []},
     #field{name = state, fnum = 2, rnum = 3,
	    type = {enum, 'TaskState'}, occurrence = required,
	    opts = []},
     #field{name = message, fnum = 4, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = source, fnum = 9, rnum = 5,
	    type = {enum, 'TaskStatus.Source'},
	    occurrence = optional, opts = []},
     #field{name = reason, fnum = 10, rnum = 6,
	    type = {enum, 'TaskStatus.Reason'},
	    occurrence = optional, opts = []},
     #field{name = data, fnum = 3, rnum = 7, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = agent_id, fnum = 5, rnum = 8,
	    type = {msg, 'AgentID'}, occurrence = optional,
	    opts = []},
     #field{name = executor_id, fnum = 7, rnum = 9,
	    type = {msg, 'ExecutorID'}, occurrence = optional,
	    opts = []},
     #field{name = timestamp, fnum = 6, rnum = 10,
	    type = double, occurrence = optional, opts = []},
     #field{name = uuid, fnum = 11, rnum = 11, type = bytes,
	    occurrence = optional, opts = []},
     #field{name = healthy, fnum = 8, rnum = 12, type = bool,
	    occurrence = optional, opts = []},
     #field{name = labels, fnum = 12, rnum = 13,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []},
     #field{name = container_status, fnum = 13, rnum = 14,
	    type = {msg, 'ContainerStatus'}, occurrence = optional,
	    opts = []}];
find_msg_def('Attribute') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3,
	    type = {enum, 'Value.Type'}, occurrence = required,
	    opts = []},
     #field{name = scalar, fnum = 3, rnum = 4,
	    type = {msg, 'Value.Scalar'}, occurrence = optional,
	    opts = []},
     #field{name = ranges, fnum = 4, rnum = 5,
	    type = {msg, 'Value.Ranges'}, occurrence = optional,
	    opts = []},
     #field{name = set, fnum = 6, rnum = 6,
	    type = {msg, 'Value.Set'}, occurrence = optional,
	    opts = []},
     #field{name = text, fnum = 5, rnum = 7,
	    type = {msg, 'Value.Text'}, occurrence = optional,
	    opts = []}];
find_msg_def('AgentInfo') ->
    [#field{name = hostname, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = port, fnum = 8, rnum = 3, type = int32,
	    occurrence = optional, opts = [{default, 5051}]},
     #field{name = resources, fnum = 3, rnum = 4,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = attributes, fnum = 5, rnum = 5,
	    type = {msg, 'Attribute'}, occurrence = repeated,
	    opts = []},
     #field{name = id, fnum = 6, rnum = 6,
	    type = {msg, 'AgentID'}, occurrence = optional,
	    opts = []}];
find_msg_def('Response.GetLoggingLevel') ->
    [#field{name = level, fnum = 1, rnum = 2, type = uint32,
	    occurrence = required, opts = []}];
find_msg_def('Task') ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = task_id, fnum = 2, rnum = 3,
	    type = {msg, 'TaskID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 3, rnum = 4,
	    type = {msg, 'FrameworkID'}, occurrence = required,
	    opts = []},
     #field{name = executor_id, fnum = 4, rnum = 5,
	    type = {msg, 'ExecutorID'}, occurrence = optional,
	    opts = []},
     #field{name = agent_id, fnum = 5, rnum = 6,
	    type = {msg, 'AgentID'}, occurrence = required,
	    opts = []},
     #field{name = state, fnum = 6, rnum = 7,
	    type = {enum, 'TaskState'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 7, rnum = 8,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = statuses, fnum = 8, rnum = 9,
	    type = {msg, 'TaskStatus'}, occurrence = repeated,
	    opts = []},
     #field{name = status_update_state, fnum = 9, rnum = 10,
	    type = {enum, 'TaskState'}, occurrence = optional,
	    opts = []},
     #field{name = status_update_uuid, fnum = 10, rnum = 11,
	    type = bytes, occurrence = optional, opts = []},
     #field{name = labels, fnum = 11, rnum = 12,
	    type = {msg, 'Labels'}, occurrence = optional,
	    opts = []},
     #field{name = discovery, fnum = 12, rnum = 13,
	    type = {msg, 'DiscoveryInfo'}, occurrence = optional,
	    opts = []},
     #field{name = container, fnum = 13, rnum = 14,
	    type = {msg, 'ContainerInfo'}, occurrence = optional,
	    opts = []},
     #field{name = user, fnum = 14, rnum = 15, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Response.GetContainers.Container') ->
    [#field{name = framework_id, fnum = 1, rnum = 2,
	    type = {msg, 'FrameworkID'}, occurrence = required,
	    opts = []},
     #field{name = executor_id, fnum = 2, rnum = 3,
	    type = {msg, 'ExecutorID'}, occurrence = required,
	    opts = []},
     #field{name = executor_name, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = container_id, fnum = 4, rnum = 5,
	    type = {msg, 'ContainerID'}, occurrence = required,
	    opts = []},
     #field{name = container_status, fnum = 5, rnum = 6,
	    type = {msg, 'ContainerStatus'}, occurrence = optional,
	    opts = []},
     #field{name = resource_statistics, fnum = 6, rnum = 7,
	    type = {msg, 'ResourceStatistics'},
	    occurrence = optional, opts = []}];
find_msg_def('Response.GetContainers') ->
    [#field{name = containers, fnum = 1, rnum = 2,
	    type = {msg, 'Response.GetContainers.Container'},
	    occurrence = repeated, opts = []}];
find_msg_def('Response.GetState') -> [];
find_msg_def('Response.GetVersion') ->
    [#field{name = version_info, fnum = 1, rnum = 2,
	    type = {msg, 'VersionInfo'}, occurrence = required,
	    opts = []}];
find_msg_def('Response.GetFlags') ->
    [#field{name = flags, fnum = 1, rnum = 2,
	    type = {msg, 'Flag'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Response.GetHealth') ->
    [#field{name = healthy, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []}];
find_msg_def('Response') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'Response.Type'}, occurrence = optional,
	    opts = []},
     #field{name = get_health, fnum = 2, rnum = 3,
	    type = {msg, 'Response.GetHealth'},
	    occurrence = optional, opts = []},
     #field{name = get_flags, fnum = 3, rnum = 4,
	    type = {msg, 'Response.GetFlags'},
	    occurrence = optional, opts = []},
     #field{name = get_version, fnum = 4, rnum = 5,
	    type = {msg, 'Response.GetVersion'},
	    occurrence = optional, opts = []},
     #field{name = get_metrics, fnum = 5, rnum = 6,
	    type = {msg, 'Response.GetMetrics'},
	    occurrence = optional, opts = []},
     #field{name = get_logging_level, fnum = 6, rnum = 7,
	    type = {msg, 'Response.GetLoggingLevel'},
	    occurrence = optional, opts = []},
     #field{name = list_files, fnum = 7, rnum = 8,
	    type = {msg, 'Response.ListFiles'},
	    occurrence = optional, opts = []},
     #field{name = get_file_contents, fnum = 8, rnum = 9,
	    type = {msg, 'Response.GetFileContents'},
	    occurrence = optional, opts = []},
     #field{name = get_state, fnum = 9, rnum = 10,
	    type = {msg, 'Response.GetState'},
	    occurrence = optional, opts = []},
     #field{name = get_containers, fnum = 10, rnum = 11,
	    type = {msg, 'Response.GetContainers'},
	    occurrence = optional, opts = []}];
find_msg_def('Filters') ->
    [#field{name = refuse_seconds, fnum = 1, rnum = 2,
	    type = double, occurrence = optional,
	    opts = [{default, 5.0}]}];
find_msg_def('Credentials') ->
    [#field{name = credentials, fnum = 1, rnum = 2,
	    type = {msg, 'Credential'}, occurrence = repeated,
	    opts = []}];
find_msg_def('RateLimit') ->
    [#field{name = qps, fnum = 1, rnum = 2, type = double,
	    occurrence = optional, opts = []},
     #field{name = principal, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = capacity, fnum = 3, rnum = 4,
	    type = uint64, occurrence = optional, opts = []}];
find_msg_def('RateLimits') ->
    [#field{name = limits, fnum = 1, rnum = 2,
	    type = {msg, 'RateLimit'}, occurrence = repeated,
	    opts = []},
     #field{name = aggregate_default_qps, fnum = 2, rnum = 3,
	    type = double, occurrence = optional, opts = []},
     #field{name = aggregate_default_capacity, fnum = 3,
	    rnum = 4, type = uint64, occurrence = optional,
	    opts = []}];
find_msg_def('OfferID') ->
    [#field{name = value, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def('InverseOffer') ->
    [#field{name = id, fnum = 1, rnum = 2,
	    type = {msg, 'OfferID'}, occurrence = required,
	    opts = []},
     #field{name = url, fnum = 2, rnum = 3,
	    type = {msg, 'URL'}, occurrence = optional, opts = []},
     #field{name = framework_id, fnum = 3, rnum = 4,
	    type = {msg, 'FrameworkID'}, occurrence = required,
	    opts = []},
     #field{name = agent_id, fnum = 4, rnum = 5,
	    type = {msg, 'AgentID'}, occurrence = optional,
	    opts = []},
     #field{name = unavailability, fnum = 5, rnum = 6,
	    type = {msg, 'Unavailability'}, occurrence = required,
	    opts = []},
     #field{name = resources, fnum = 6, rnum = 7,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('ResourceUsage.Executor') ->
    [#field{name = executor_info, fnum = 1, rnum = 2,
	    type = {msg, 'ExecutorInfo'}, occurrence = required,
	    opts = []},
     #field{name = allocated, fnum = 2, rnum = 3,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = statistics, fnum = 3, rnum = 4,
	    type = {msg, 'ResourceStatistics'},
	    occurrence = optional, opts = []},
     #field{name = container_id, fnum = 4, rnum = 5,
	    type = {msg, 'ContainerID'}, occurrence = required,
	    opts = []},
     #field{name = tasks, fnum = 5, rnum = 6,
	    type = {msg, 'ResourceUsage.Executor.Task'},
	    occurrence = repeated, opts = []}];
find_msg_def('ResourceUsage') ->
    [#field{name = executors, fnum = 1, rnum = 2,
	    type = {msg, 'ResourceUsage.Executor'},
	    occurrence = repeated, opts = []},
     #field{name = total, fnum = 2, rnum = 3,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []}];
find_msg_def('Offer') ->
    [#field{name = id, fnum = 1, rnum = 2,
	    type = {msg, 'OfferID'}, occurrence = required,
	    opts = []},
     #field{name = framework_id, fnum = 2, rnum = 3,
	    type = {msg, 'FrameworkID'}, occurrence = required,
	    opts = []},
     #field{name = agent_id, fnum = 3, rnum = 4,
	    type = {msg, 'AgentID'}, occurrence = required,
	    opts = []},
     #field{name = hostname, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = url, fnum = 8, rnum = 6,
	    type = {msg, 'URL'}, occurrence = optional, opts = []},
     #field{name = resources, fnum = 5, rnum = 7,
	    type = {msg, 'Resource'}, occurrence = repeated,
	    opts = []},
     #field{name = attributes, fnum = 7, rnum = 8,
	    type = {msg, 'Attribute'}, occurrence = repeated,
	    opts = []},
     #field{name = executor_ids, fnum = 6, rnum = 9,
	    type = {msg, 'ExecutorID'}, occurrence = repeated,
	    opts = []},
     #field{name = unavailability, fnum = 9, rnum = 10,
	    type = {msg, 'Unavailability'}, occurrence = optional,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def('Call.Type') ->
    [{'UNKNOWN', 0}, {'GET_HEALTH', 1}, {'GET_FLAGS', 2},
     {'GET_VERSION', 3}, {'GET_METRICS', 4},
     {'GET_LOGGING_LEVEL', 5}, {'SET_LOGGING_LEVEL', 6},
     {'LIST_FILES', 7}, {'READ_FILE', 8}, {'GET_STATE', 9},
     {'GET_CONTAINERS', 10}];
find_enum_def('Response.Type') ->
    [{'UNKNOWN', 0}, {'GET_HEALTH', 1}, {'GET_FLAGS', 2},
     {'GET_VERSION', 3}, {'GET_METRICS', 4},
     {'GET_LOGGING_LEVEL', 5}, {'LIST_FILES', 6},
     {'READ_FILE', 7}, {'GET_STATE', 8},
     {'GET_CONTAINERS', 9}];
find_enum_def('Status') ->
    [{'DRIVER_NOT_STARTED', 1}, {'DRIVER_RUNNING', 2},
     {'DRIVER_ABORTED', 3}, {'DRIVER_STOPPED', 4}];
find_enum_def('MachineInfo.Mode') ->
    [{'UP', 1}, {'DRAINING', 2}, {'DOWN', 3}];
find_enum_def('FrameworkInfo.Capability.Type') ->
    [{'UNKNOWN', 0}, {'REVOCABLE_RESOURCES', 1},
     {'TASK_KILLING_STATE', 2}, {'GPU_RESOURCES', 3}];
find_enum_def('Value.Type') ->
    [{'SCALAR', 0}, {'RANGES', 1}, {'SET', 2}, {'TEXT', 3}];
find_enum_def('Resource.DiskInfo.Source.Type') ->
    [{'PATH', 1}, {'MOUNT', 2}];
find_enum_def('Offer.Operation.Type') ->
    [{'LAUNCH', 1}, {'RESERVE', 2}, {'UNRESERVE', 3},
     {'CREATE', 4}, {'DESTROY', 5}];
find_enum_def('TaskState') ->
    [{'TASK_STAGING', 6}, {'TASK_STARTING', 0},
     {'TASK_RUNNING', 1}, {'TASK_KILLING', 8},
     {'TASK_FINISHED', 2}, {'TASK_FAILED', 3},
     {'TASK_KILLED', 4}, {'TASK_LOST', 5},
     {'TASK_ERROR', 7}];
find_enum_def('TaskStatus.Source') ->
    [{'SOURCE_MASTER', 0}, {'SOURCE_AGENT', 1},
     {'SOURCE_EXECUTOR', 2}];
find_enum_def('TaskStatus.Reason') ->
    [{'REASON_COMMAND_EXECUTOR_FAILED', 0},
     {'REASON_CONTAINER_LAUNCH_FAILED', 21},
     {'REASON_CONTAINER_LIMITATION', 19},
     {'REASON_CONTAINER_LIMITATION_DISK', 20},
     {'REASON_CONTAINER_LIMITATION_MEMORY', 8},
     {'REASON_CONTAINER_PREEMPTED', 17},
     {'REASON_CONTAINER_UPDATE_FAILED', 22},
     {'REASON_EXECUTOR_REGISTRATION_TIMEOUT', 23},
     {'REASON_EXECUTOR_REREGISTRATION_TIMEOUT', 24},
     {'REASON_EXECUTOR_TERMINATED', 1},
     {'REASON_EXECUTOR_UNREGISTERED', 2},
     {'REASON_FRAMEWORK_REMOVED', 3}, {'REASON_GC_ERROR', 4},
     {'REASON_INVALID_FRAMEWORKID', 5},
     {'REASON_INVALID_OFFERS', 6},
     {'REASON_MASTER_DISCONNECTED', 7},
     {'REASON_RECONCILIATION', 9},
     {'REASON_RESOURCES_UNKNOWN', 18},
     {'REASON_AGENT_DISCONNECTED', 10},
     {'REASON_AGENT_REMOVED', 11},
     {'REASON_AGENT_RESTARTED', 12},
     {'REASON_AGENT_UNKNOWN', 13},
     {'REASON_TASK_INVALID', 14},
     {'REASON_TASK_UNAUTHORIZED', 15},
     {'REASON_TASK_UNKNOWN', 16}];
find_enum_def('Image.Type') ->
    [{'APPC', 1}, {'DOCKER', 2}];
find_enum_def('Volume.Mode') -> [{'RW', 1}, {'RO', 2}];
find_enum_def('Volume.Source.Type') ->
    [{'UNKNOWN', 0}, {'DOCKER_VOLUME', 1}];
find_enum_def('NetworkInfo.Protocol') ->
    [{'IPv4', 1}, {'IPv6', 2}];
find_enum_def('ContainerInfo.Type') ->
    [{'DOCKER', 1}, {'MESOS', 2}];
find_enum_def('ContainerInfo.DockerInfo.Network') ->
    [{'HOST', 1}, {'BRIDGE', 2}, {'NONE', 3}, {'USER', 4}];
find_enum_def('DiscoveryInfo.Visibility') ->
    [{'FRAMEWORK', 0}, {'CLUSTER', 1}, {'EXTERNAL', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('Call.Type', Value) ->
    'enum_symbol_by_value_Call.Type'(Value);
enum_symbol_by_value('Response.Type', Value) ->
    'enum_symbol_by_value_Response.Type'(Value);
enum_symbol_by_value('Status', Value) ->
    enum_symbol_by_value_Status(Value);
enum_symbol_by_value('MachineInfo.Mode', Value) ->
    'enum_symbol_by_value_MachineInfo.Mode'(Value);
enum_symbol_by_value('FrameworkInfo.Capability.Type',
		     Value) ->
    'enum_symbol_by_value_FrameworkInfo.Capability.Type'(Value);
enum_symbol_by_value('Value.Type', Value) ->
    'enum_symbol_by_value_Value.Type'(Value);
enum_symbol_by_value('Resource.DiskInfo.Source.Type',
		     Value) ->
    'enum_symbol_by_value_Resource.DiskInfo.Source.Type'(Value);
enum_symbol_by_value('Offer.Operation.Type', Value) ->
    'enum_symbol_by_value_Offer.Operation.Type'(Value);
enum_symbol_by_value('TaskState', Value) ->
    enum_symbol_by_value_TaskState(Value);
enum_symbol_by_value('TaskStatus.Source', Value) ->
    'enum_symbol_by_value_TaskStatus.Source'(Value);
enum_symbol_by_value('TaskStatus.Reason', Value) ->
    'enum_symbol_by_value_TaskStatus.Reason'(Value);
enum_symbol_by_value('Image.Type', Value) ->
    'enum_symbol_by_value_Image.Type'(Value);
enum_symbol_by_value('Volume.Mode', Value) ->
    'enum_symbol_by_value_Volume.Mode'(Value);
enum_symbol_by_value('Volume.Source.Type', Value) ->
    'enum_symbol_by_value_Volume.Source.Type'(Value);
enum_symbol_by_value('NetworkInfo.Protocol', Value) ->
    'enum_symbol_by_value_NetworkInfo.Protocol'(Value);
enum_symbol_by_value('ContainerInfo.Type', Value) ->
    'enum_symbol_by_value_ContainerInfo.Type'(Value);
enum_symbol_by_value('ContainerInfo.DockerInfo.Network',
		     Value) ->
    'enum_symbol_by_value_ContainerInfo.DockerInfo.Network'(Value);
enum_symbol_by_value('DiscoveryInfo.Visibility',
		     Value) ->
    'enum_symbol_by_value_DiscoveryInfo.Visibility'(Value).


enum_value_by_symbol('Call.Type', Sym) ->
    'enum_value_by_symbol_Call.Type'(Sym);
enum_value_by_symbol('Response.Type', Sym) ->
    'enum_value_by_symbol_Response.Type'(Sym);
enum_value_by_symbol('Status', Sym) ->
    enum_value_by_symbol_Status(Sym);
enum_value_by_symbol('MachineInfo.Mode', Sym) ->
    'enum_value_by_symbol_MachineInfo.Mode'(Sym);
enum_value_by_symbol('FrameworkInfo.Capability.Type',
		     Sym) ->
    'enum_value_by_symbol_FrameworkInfo.Capability.Type'(Sym);
enum_value_by_symbol('Value.Type', Sym) ->
    'enum_value_by_symbol_Value.Type'(Sym);
enum_value_by_symbol('Resource.DiskInfo.Source.Type',
		     Sym) ->
    'enum_value_by_symbol_Resource.DiskInfo.Source.Type'(Sym);
enum_value_by_symbol('Offer.Operation.Type', Sym) ->
    'enum_value_by_symbol_Offer.Operation.Type'(Sym);
enum_value_by_symbol('TaskState', Sym) ->
    enum_value_by_symbol_TaskState(Sym);
enum_value_by_symbol('TaskStatus.Source', Sym) ->
    'enum_value_by_symbol_TaskStatus.Source'(Sym);
enum_value_by_symbol('TaskStatus.Reason', Sym) ->
    'enum_value_by_symbol_TaskStatus.Reason'(Sym);
enum_value_by_symbol('Image.Type', Sym) ->
    'enum_value_by_symbol_Image.Type'(Sym);
enum_value_by_symbol('Volume.Mode', Sym) ->
    'enum_value_by_symbol_Volume.Mode'(Sym);
enum_value_by_symbol('Volume.Source.Type', Sym) ->
    'enum_value_by_symbol_Volume.Source.Type'(Sym);
enum_value_by_symbol('NetworkInfo.Protocol', Sym) ->
    'enum_value_by_symbol_NetworkInfo.Protocol'(Sym);
enum_value_by_symbol('ContainerInfo.Type', Sym) ->
    'enum_value_by_symbol_ContainerInfo.Type'(Sym);
enum_value_by_symbol('ContainerInfo.DockerInfo.Network',
		     Sym) ->
    'enum_value_by_symbol_ContainerInfo.DockerInfo.Network'(Sym);
enum_value_by_symbol('DiscoveryInfo.Visibility', Sym) ->
    'enum_value_by_symbol_DiscoveryInfo.Visibility'(Sym).


'enum_symbol_by_value_Call.Type'(0) -> 'UNKNOWN';
'enum_symbol_by_value_Call.Type'(1) -> 'GET_HEALTH';
'enum_symbol_by_value_Call.Type'(2) -> 'GET_FLAGS';
'enum_symbol_by_value_Call.Type'(3) -> 'GET_VERSION';
'enum_symbol_by_value_Call.Type'(4) -> 'GET_METRICS';
'enum_symbol_by_value_Call.Type'(5) ->
    'GET_LOGGING_LEVEL';
'enum_symbol_by_value_Call.Type'(6) ->
    'SET_LOGGING_LEVEL';
'enum_symbol_by_value_Call.Type'(7) -> 'LIST_FILES';
'enum_symbol_by_value_Call.Type'(8) -> 'READ_FILE';
'enum_symbol_by_value_Call.Type'(9) -> 'GET_STATE';
'enum_symbol_by_value_Call.Type'(10) ->
    'GET_CONTAINERS'.


'enum_value_by_symbol_Call.Type'('UNKNOWN') -> 0;
'enum_value_by_symbol_Call.Type'('GET_HEALTH') -> 1;
'enum_value_by_symbol_Call.Type'('GET_FLAGS') -> 2;
'enum_value_by_symbol_Call.Type'('GET_VERSION') -> 3;
'enum_value_by_symbol_Call.Type'('GET_METRICS') -> 4;
'enum_value_by_symbol_Call.Type'('GET_LOGGING_LEVEL') ->
    5;
'enum_value_by_symbol_Call.Type'('SET_LOGGING_LEVEL') ->
    6;
'enum_value_by_symbol_Call.Type'('LIST_FILES') -> 7;
'enum_value_by_symbol_Call.Type'('READ_FILE') -> 8;
'enum_value_by_symbol_Call.Type'('GET_STATE') -> 9;
'enum_value_by_symbol_Call.Type'('GET_CONTAINERS') ->
    10.

'enum_symbol_by_value_Response.Type'(0) -> 'UNKNOWN';
'enum_symbol_by_value_Response.Type'(1) -> 'GET_HEALTH';
'enum_symbol_by_value_Response.Type'(2) -> 'GET_FLAGS';
'enum_symbol_by_value_Response.Type'(3) ->
    'GET_VERSION';
'enum_symbol_by_value_Response.Type'(4) ->
    'GET_METRICS';
'enum_symbol_by_value_Response.Type'(5) ->
    'GET_LOGGING_LEVEL';
'enum_symbol_by_value_Response.Type'(6) -> 'LIST_FILES';
'enum_symbol_by_value_Response.Type'(7) -> 'READ_FILE';
'enum_symbol_by_value_Response.Type'(8) -> 'GET_STATE';
'enum_symbol_by_value_Response.Type'(9) ->
    'GET_CONTAINERS'.


'enum_value_by_symbol_Response.Type'('UNKNOWN') -> 0;
'enum_value_by_symbol_Response.Type'('GET_HEALTH') -> 1;
'enum_value_by_symbol_Response.Type'('GET_FLAGS') -> 2;
'enum_value_by_symbol_Response.Type'('GET_VERSION') ->
    3;
'enum_value_by_symbol_Response.Type'('GET_METRICS') ->
    4;
'enum_value_by_symbol_Response.Type'('GET_LOGGING_LEVEL') ->
    5;
'enum_value_by_symbol_Response.Type'('LIST_FILES') -> 6;
'enum_value_by_symbol_Response.Type'('READ_FILE') -> 7;
'enum_value_by_symbol_Response.Type'('GET_STATE') -> 8;
'enum_value_by_symbol_Response.Type'('GET_CONTAINERS') ->
    9.

enum_symbol_by_value_Status(1) -> 'DRIVER_NOT_STARTED';
enum_symbol_by_value_Status(2) -> 'DRIVER_RUNNING';
enum_symbol_by_value_Status(3) -> 'DRIVER_ABORTED';
enum_symbol_by_value_Status(4) -> 'DRIVER_STOPPED'.


enum_value_by_symbol_Status('DRIVER_NOT_STARTED') -> 1;
enum_value_by_symbol_Status('DRIVER_RUNNING') -> 2;
enum_value_by_symbol_Status('DRIVER_ABORTED') -> 3;
enum_value_by_symbol_Status('DRIVER_STOPPED') -> 4.

'enum_symbol_by_value_MachineInfo.Mode'(1) -> 'UP';
'enum_symbol_by_value_MachineInfo.Mode'(2) ->
    'DRAINING';
'enum_symbol_by_value_MachineInfo.Mode'(3) -> 'DOWN'.


'enum_value_by_symbol_MachineInfo.Mode'('UP') -> 1;
'enum_value_by_symbol_MachineInfo.Mode'('DRAINING') ->
    2;
'enum_value_by_symbol_MachineInfo.Mode'('DOWN') -> 3.

'enum_symbol_by_value_FrameworkInfo.Capability.Type'(0) ->
    'UNKNOWN';
'enum_symbol_by_value_FrameworkInfo.Capability.Type'(1) ->
    'REVOCABLE_RESOURCES';
'enum_symbol_by_value_FrameworkInfo.Capability.Type'(2) ->
    'TASK_KILLING_STATE';
'enum_symbol_by_value_FrameworkInfo.Capability.Type'(3) ->
    'GPU_RESOURCES'.


'enum_value_by_symbol_FrameworkInfo.Capability.Type'('UNKNOWN') ->
    0;
'enum_value_by_symbol_FrameworkInfo.Capability.Type'('REVOCABLE_RESOURCES') ->
    1;
'enum_value_by_symbol_FrameworkInfo.Capability.Type'('TASK_KILLING_STATE') ->
    2;
'enum_value_by_symbol_FrameworkInfo.Capability.Type'('GPU_RESOURCES') ->
    3.

'enum_symbol_by_value_Value.Type'(0) -> 'SCALAR';
'enum_symbol_by_value_Value.Type'(1) -> 'RANGES';
'enum_symbol_by_value_Value.Type'(2) -> 'SET';
'enum_symbol_by_value_Value.Type'(3) -> 'TEXT'.


'enum_value_by_symbol_Value.Type'('SCALAR') -> 0;
'enum_value_by_symbol_Value.Type'('RANGES') -> 1;
'enum_value_by_symbol_Value.Type'('SET') -> 2;
'enum_value_by_symbol_Value.Type'('TEXT') -> 3.

'enum_symbol_by_value_Resource.DiskInfo.Source.Type'(1) ->
    'PATH';
'enum_symbol_by_value_Resource.DiskInfo.Source.Type'(2) ->
    'MOUNT'.


'enum_value_by_symbol_Resource.DiskInfo.Source.Type'('PATH') ->
    1;
'enum_value_by_symbol_Resource.DiskInfo.Source.Type'('MOUNT') ->
    2.

'enum_symbol_by_value_Offer.Operation.Type'(1) ->
    'LAUNCH';
'enum_symbol_by_value_Offer.Operation.Type'(2) ->
    'RESERVE';
'enum_symbol_by_value_Offer.Operation.Type'(3) ->
    'UNRESERVE';
'enum_symbol_by_value_Offer.Operation.Type'(4) ->
    'CREATE';
'enum_symbol_by_value_Offer.Operation.Type'(5) ->
    'DESTROY'.


'enum_value_by_symbol_Offer.Operation.Type'('LAUNCH') ->
    1;
'enum_value_by_symbol_Offer.Operation.Type'('RESERVE') ->
    2;
'enum_value_by_symbol_Offer.Operation.Type'('UNRESERVE') ->
    3;
'enum_value_by_symbol_Offer.Operation.Type'('CREATE') ->
    4;
'enum_value_by_symbol_Offer.Operation.Type'('DESTROY') ->
    5.

enum_symbol_by_value_TaskState(6) -> 'TASK_STAGING';
enum_symbol_by_value_TaskState(0) -> 'TASK_STARTING';
enum_symbol_by_value_TaskState(1) -> 'TASK_RUNNING';
enum_symbol_by_value_TaskState(8) -> 'TASK_KILLING';
enum_symbol_by_value_TaskState(2) -> 'TASK_FINISHED';
enum_symbol_by_value_TaskState(3) -> 'TASK_FAILED';
enum_symbol_by_value_TaskState(4) -> 'TASK_KILLED';
enum_symbol_by_value_TaskState(5) -> 'TASK_LOST';
enum_symbol_by_value_TaskState(7) -> 'TASK_ERROR'.


enum_value_by_symbol_TaskState('TASK_STAGING') -> 6;
enum_value_by_symbol_TaskState('TASK_STARTING') -> 0;
enum_value_by_symbol_TaskState('TASK_RUNNING') -> 1;
enum_value_by_symbol_TaskState('TASK_KILLING') -> 8;
enum_value_by_symbol_TaskState('TASK_FINISHED') -> 2;
enum_value_by_symbol_TaskState('TASK_FAILED') -> 3;
enum_value_by_symbol_TaskState('TASK_KILLED') -> 4;
enum_value_by_symbol_TaskState('TASK_LOST') -> 5;
enum_value_by_symbol_TaskState('TASK_ERROR') -> 7.

'enum_symbol_by_value_TaskStatus.Source'(0) ->
    'SOURCE_MASTER';
'enum_symbol_by_value_TaskStatus.Source'(1) ->
    'SOURCE_AGENT';
'enum_symbol_by_value_TaskStatus.Source'(2) ->
    'SOURCE_EXECUTOR'.


'enum_value_by_symbol_TaskStatus.Source'('SOURCE_MASTER') ->
    0;
'enum_value_by_symbol_TaskStatus.Source'('SOURCE_AGENT') ->
    1;
'enum_value_by_symbol_TaskStatus.Source'('SOURCE_EXECUTOR') ->
    2.

'enum_symbol_by_value_TaskStatus.Reason'(0) ->
    'REASON_COMMAND_EXECUTOR_FAILED';
'enum_symbol_by_value_TaskStatus.Reason'(21) ->
    'REASON_CONTAINER_LAUNCH_FAILED';
'enum_symbol_by_value_TaskStatus.Reason'(19) ->
    'REASON_CONTAINER_LIMITATION';
'enum_symbol_by_value_TaskStatus.Reason'(20) ->
    'REASON_CONTAINER_LIMITATION_DISK';
'enum_symbol_by_value_TaskStatus.Reason'(8) ->
    'REASON_CONTAINER_LIMITATION_MEMORY';
'enum_symbol_by_value_TaskStatus.Reason'(17) ->
    'REASON_CONTAINER_PREEMPTED';
'enum_symbol_by_value_TaskStatus.Reason'(22) ->
    'REASON_CONTAINER_UPDATE_FAILED';
'enum_symbol_by_value_TaskStatus.Reason'(23) ->
    'REASON_EXECUTOR_REGISTRATION_TIMEOUT';
'enum_symbol_by_value_TaskStatus.Reason'(24) ->
    'REASON_EXECUTOR_REREGISTRATION_TIMEOUT';
'enum_symbol_by_value_TaskStatus.Reason'(1) ->
    'REASON_EXECUTOR_TERMINATED';
'enum_symbol_by_value_TaskStatus.Reason'(2) ->
    'REASON_EXECUTOR_UNREGISTERED';
'enum_symbol_by_value_TaskStatus.Reason'(3) ->
    'REASON_FRAMEWORK_REMOVED';
'enum_symbol_by_value_TaskStatus.Reason'(4) ->
    'REASON_GC_ERROR';
'enum_symbol_by_value_TaskStatus.Reason'(5) ->
    'REASON_INVALID_FRAMEWORKID';
'enum_symbol_by_value_TaskStatus.Reason'(6) ->
    'REASON_INVALID_OFFERS';
'enum_symbol_by_value_TaskStatus.Reason'(7) ->
    'REASON_MASTER_DISCONNECTED';
'enum_symbol_by_value_TaskStatus.Reason'(9) ->
    'REASON_RECONCILIATION';
'enum_symbol_by_value_TaskStatus.Reason'(18) ->
    'REASON_RESOURCES_UNKNOWN';
'enum_symbol_by_value_TaskStatus.Reason'(10) ->
    'REASON_AGENT_DISCONNECTED';
'enum_symbol_by_value_TaskStatus.Reason'(11) ->
    'REASON_AGENT_REMOVED';
'enum_symbol_by_value_TaskStatus.Reason'(12) ->
    'REASON_AGENT_RESTARTED';
'enum_symbol_by_value_TaskStatus.Reason'(13) ->
    'REASON_AGENT_UNKNOWN';
'enum_symbol_by_value_TaskStatus.Reason'(14) ->
    'REASON_TASK_INVALID';
'enum_symbol_by_value_TaskStatus.Reason'(15) ->
    'REASON_TASK_UNAUTHORIZED';
'enum_symbol_by_value_TaskStatus.Reason'(16) ->
    'REASON_TASK_UNKNOWN'.


'enum_value_by_symbol_TaskStatus.Reason'('REASON_COMMAND_EXECUTOR_FAILED') ->
    0;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_CONTAINER_LAUNCH_FAILED') ->
    21;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION') ->
    19;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION_DISK') ->
    20;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_CONTAINER_LIMITATION_MEMORY') ->
    8;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_CONTAINER_PREEMPTED') ->
    17;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_CONTAINER_UPDATE_FAILED') ->
    22;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_EXECUTOR_REGISTRATION_TIMEOUT') ->
    23;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_EXECUTOR_REREGISTRATION_TIMEOUT') ->
    24;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_EXECUTOR_TERMINATED') ->
    1;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_EXECUTOR_UNREGISTERED') ->
    2;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_FRAMEWORK_REMOVED') ->
    3;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_GC_ERROR') ->
    4;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_INVALID_FRAMEWORKID') ->
    5;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_INVALID_OFFERS') ->
    6;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_MASTER_DISCONNECTED') ->
    7;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_RECONCILIATION') ->
    9;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_RESOURCES_UNKNOWN') ->
    18;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_AGENT_DISCONNECTED') ->
    10;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_AGENT_REMOVED') ->
    11;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_AGENT_RESTARTED') ->
    12;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_AGENT_UNKNOWN') ->
    13;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_TASK_INVALID') ->
    14;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_TASK_UNAUTHORIZED') ->
    15;
'enum_value_by_symbol_TaskStatus.Reason'('REASON_TASK_UNKNOWN') ->
    16.

'enum_symbol_by_value_Image.Type'(1) -> 'APPC';
'enum_symbol_by_value_Image.Type'(2) -> 'DOCKER'.


'enum_value_by_symbol_Image.Type'('APPC') -> 1;
'enum_value_by_symbol_Image.Type'('DOCKER') -> 2.

'enum_symbol_by_value_Volume.Mode'(1) -> 'RW';
'enum_symbol_by_value_Volume.Mode'(2) -> 'RO'.


'enum_value_by_symbol_Volume.Mode'('RW') -> 1;
'enum_value_by_symbol_Volume.Mode'('RO') -> 2.

'enum_symbol_by_value_Volume.Source.Type'(0) ->
    'UNKNOWN';
'enum_symbol_by_value_Volume.Source.Type'(1) ->
    'DOCKER_VOLUME'.


'enum_value_by_symbol_Volume.Source.Type'('UNKNOWN') ->
    0;
'enum_value_by_symbol_Volume.Source.Type'('DOCKER_VOLUME') ->
    1.

'enum_symbol_by_value_NetworkInfo.Protocol'(1) ->
    'IPv4';
'enum_symbol_by_value_NetworkInfo.Protocol'(2) ->
    'IPv6'.


'enum_value_by_symbol_NetworkInfo.Protocol'('IPv4') ->
    1;
'enum_value_by_symbol_NetworkInfo.Protocol'('IPv6') ->
    2.

'enum_symbol_by_value_ContainerInfo.Type'(1) ->
    'DOCKER';
'enum_symbol_by_value_ContainerInfo.Type'(2) -> 'MESOS'.


'enum_value_by_symbol_ContainerInfo.Type'('DOCKER') ->
    1;
'enum_value_by_symbol_ContainerInfo.Type'('MESOS') -> 2.

'enum_symbol_by_value_ContainerInfo.DockerInfo.Network'(1) ->
    'HOST';
'enum_symbol_by_value_ContainerInfo.DockerInfo.Network'(2) ->
    'BRIDGE';
'enum_symbol_by_value_ContainerInfo.DockerInfo.Network'(3) ->
    'NONE';
'enum_symbol_by_value_ContainerInfo.DockerInfo.Network'(4) ->
    'USER'.


'enum_value_by_symbol_ContainerInfo.DockerInfo.Network'('HOST') ->
    1;
'enum_value_by_symbol_ContainerInfo.DockerInfo.Network'('BRIDGE') ->
    2;
'enum_value_by_symbol_ContainerInfo.DockerInfo.Network'('NONE') ->
    3;
'enum_value_by_symbol_ContainerInfo.DockerInfo.Network'('USER') ->
    4.

'enum_symbol_by_value_DiscoveryInfo.Visibility'(0) ->
    'FRAMEWORK';
'enum_symbol_by_value_DiscoveryInfo.Visibility'(1) ->
    'CLUSTER';
'enum_symbol_by_value_DiscoveryInfo.Visibility'(2) ->
    'EXTERNAL'.


'enum_value_by_symbol_DiscoveryInfo.Visibility'('FRAMEWORK') ->
    0;
'enum_value_by_symbol_DiscoveryInfo.Visibility'('CLUSTER') ->
    1;
'enum_value_by_symbol_DiscoveryInfo.Visibility'('EXTERNAL') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'mesos.v1.agent'.



gpb_version_as_string() ->
    "3.22.3".

gpb_version_as_list() ->
    [3,22,3].
