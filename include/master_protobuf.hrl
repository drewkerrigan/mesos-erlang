%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.22.3

-ifndef(master_protobuf).
-define(master_protobuf, true).

-define(master_protobuf_gpb_version, "3.22.3").

-ifndef('ENVIRONMENT.VARIABLE_PB_H').
-define('ENVIRONMENT.VARIABLE_PB_H', true).
-record('Environment.Variable',
        {name,                          % = 1, string
         value                          % = 2, string
        }).
-endif.

-ifndef('ENVIRONMENT_PB_H').
-define('ENVIRONMENT_PB_H', true).
-record('Environment',
        {variables = []                 % = 1, [{msg,'Environment.Variable'}]
        }).
-endif.

-ifndef('COMMANDINFO.URI_PB_H').
-define('COMMANDINFO.URI_PB_H', true).
-record('CommandInfo.URI',
        {value,                         % = 1, string
         executable,                    % = 2, bool (optional)
         extract = true,                % = 3, bool (optional)
         cache,                         % = 4, bool (optional)
         output_file                    % = 5, string (optional)
        }).
-endif.

-ifndef('COMMANDINFO_PB_H').
-define('COMMANDINFO_PB_H', true).
-record('CommandInfo',
        {uris = [],                     % = 1, [{msg,'CommandInfo.URI'}]
         environment,                   % = 2, {msg,'Environment'} (optional)
         shell = true,                  % = 6, bool (optional)
         value,                         % = 3, string (optional)
         arguments = [],                % = 7, [string]
         user                           % = 5, string (optional)
        }).
-endif.

-ifndef('PARAMETER_PB_H').
-define('PARAMETER_PB_H', true).
-record('Parameter',
        {key,                           % = 1, string
         value                          % = 2, string
        }).
-endif.

-ifndef('CONTAINERINFO.DOCKERINFO.PORTMAPPING_PB_H').
-define('CONTAINERINFO.DOCKERINFO.PORTMAPPING_PB_H', true).
-record('ContainerInfo.DockerInfo.PortMapping',
        {host_port,                     % = 1, uint32
         container_port,                % = 2, uint32
         protocol                       % = 3, string (optional)
        }).
-endif.

-ifndef('CONTAINERINFO.DOCKERINFO_PB_H').
-define('CONTAINERINFO.DOCKERINFO_PB_H', true).
-record('ContainerInfo.DockerInfo',
        {image,                         % = 1, string
         network = 'HOST',              % = 2, {enum,'ContainerInfo.DockerInfo.Network'} (optional)
         port_mappings = [],            % = 3, [{msg,'ContainerInfo.DockerInfo.PortMapping'}]
         privileged = false,            % = 4, bool (optional)
         parameters = [],               % = 5, [{msg,'Parameter'}]
         force_pull_image,              % = 6, bool (optional)
         volume_driver                  % = 7, string (optional)
        }).
-endif.

-ifndef('TIMEINFO_PB_H').
-define('TIMEINFO_PB_H', true).
-record('TimeInfo',
        {nanoseconds                    % = 1, int64
        }).
-endif.

-ifndef('WEIGHTINFO_PB_H').
-define('WEIGHTINFO_PB_H', true).
-record('WeightInfo',
        {weight,                        % = 1, double
         role                           % = 2, string (optional)
        }).
-endif.

-ifndef('DURATIONINFO_PB_H').
-define('DURATIONINFO_PB_H', true).
-record('DurationInfo',
        {nanoseconds                    % = 1, int64
        }).
-endif.

-ifndef('UNAVAILABILITY_PB_H').
-define('UNAVAILABILITY_PB_H', true).
-record('Unavailability',
        {start,                         % = 1, {msg,'TimeInfo'}
         duration                       % = 2, {msg,'DurationInfo'} (optional)
        }).
-endif.

-ifndef('MACHINEID_PB_H').
-define('MACHINEID_PB_H', true).
-record('MachineID',
        {hostname,                      % = 1, string (optional)
         ip                             % = 2, string (optional)
        }).
-endif.

-ifndef('MACHINEINFO_PB_H').
-define('MACHINEINFO_PB_H', true).
-record('MachineInfo',
        {id,                            % = 1, {msg,'MachineID'}
         mode,                          % = 2, {enum,'MachineInfo.Mode'} (optional)
         unavailability                 % = 3, {msg,'Unavailability'} (optional)
        }).
-endif.

-ifndef('RESOURCE.REVOCABLEINFO_PB_H').
-define('RESOURCE.REVOCABLEINFO_PB_H', true).
-record('Resource.RevocableInfo',
        {
        }).
-endif.

-ifndef('RESOURCE.DISKINFO.SOURCE.MOUNT_PB_H').
-define('RESOURCE.DISKINFO.SOURCE.MOUNT_PB_H', true).
-record('Resource.DiskInfo.Source.Mount',
        {root                           % = 1, string
        }).
-endif.

-ifndef('RESOURCE.DISKINFO.SOURCE.PATH_PB_H').
-define('RESOURCE.DISKINFO.SOURCE.PATH_PB_H', true).
-record('Resource.DiskInfo.Source.Path',
        {root                           % = 1, string
        }).
-endif.

-ifndef('RESOURCE.DISKINFO.SOURCE_PB_H').
-define('RESOURCE.DISKINFO.SOURCE_PB_H', true).
-record('Resource.DiskInfo.Source',
        {type,                          % = 1, {enum,'Resource.DiskInfo.Source.Type'}
         path,                          % = 2, {msg,'Resource.DiskInfo.Source.Path'} (optional)
         mount                          % = 3, {msg,'Resource.DiskInfo.Source.Mount'} (optional)
        }).
-endif.

-ifndef('PARAMETERS_PB_H').
-define('PARAMETERS_PB_H', true).
-record('Parameters',
        {parameter = []                 % = 1, [{msg,'Parameter'}]
        }).
-endif.

-ifndef('VOLUME.SOURCE.DOCKERVOLUME_PB_H').
-define('VOLUME.SOURCE.DOCKERVOLUME_PB_H', true).
-record('Volume.Source.DockerVolume',
        {driver,                        % = 1, string (optional)
         name,                          % = 2, string
         driver_options                 % = 3, {msg,'Parameters'} (optional)
        }).
-endif.

-ifndef('VOLUME.SOURCE_PB_H').
-define('VOLUME.SOURCE_PB_H', true).
-record('Volume.Source',
        {type,                          % = 1, {enum,'Volume.Source.Type'} (optional)
         docker_volume                  % = 2, {msg,'Volume.Source.DockerVolume'} (optional)
        }).
-endif.

-ifndef('CREDENTIAL_PB_H').
-define('CREDENTIAL_PB_H', true).
-record('Credential',
        {principal,                     % = 1, string
         secret                         % = 2, string (optional)
        }).
-endif.

-ifndef('IMAGE.DOCKER_PB_H').
-define('IMAGE.DOCKER_PB_H', true).
-record('Image.Docker',
        {name,                          % = 1, string
         credential                     % = 2, {msg,'Credential'} (optional)
        }).
-endif.

-ifndef('LABEL_PB_H').
-define('LABEL_PB_H', true).
-record('Label',
        {key,                           % = 1, string
         value                          % = 2, string (optional)
        }).
-endif.

-ifndef('LABELS_PB_H').
-define('LABELS_PB_H', true).
-record('Labels',
        {labels = []                    % = 1, [{msg,'Label'}]
        }).
-endif.

-ifndef('IMAGE.APPC_PB_H').
-define('IMAGE.APPC_PB_H', true).
-record('Image.Appc',
        {name,                          % = 1, string
         id,                            % = 2, string (optional)
         labels                         % = 3, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('IMAGE_PB_H').
-define('IMAGE_PB_H', true).
-record('Image',
        {type,                          % = 1, {enum,'Image.Type'}
         appc,                          % = 2, {msg,'Image.Appc'} (optional)
         docker,                        % = 3, {msg,'Image.Docker'} (optional)
         cached = true                  % = 4, bool (optional)
        }).
-endif.

-ifndef('VOLUME_PB_H').
-define('VOLUME_PB_H', true).
-record('Volume',
        {mode,                          % = 3, {enum,'Volume.Mode'}
         container_path,                % = 1, string
         host_path,                     % = 2, string (optional)
         image,                         % = 4, {msg,'Image'} (optional)
         source                         % = 5, {msg,'Volume.Source'} (optional)
        }).
-endif.

-ifndef('RESOURCE.DISKINFO.PERSISTENCE_PB_H').
-define('RESOURCE.DISKINFO.PERSISTENCE_PB_H', true).
-record('Resource.DiskInfo.Persistence',
        {id,                            % = 1, string
         principal                      % = 2, string (optional)
        }).
-endif.

-ifndef('RESOURCE.DISKINFO_PB_H').
-define('RESOURCE.DISKINFO_PB_H', true).
-record('Resource.DiskInfo',
        {persistence,                   % = 1, {msg,'Resource.DiskInfo.Persistence'} (optional)
         volume,                        % = 2, {msg,'Volume'} (optional)
         source                         % = 3, {msg,'Resource.DiskInfo.Source'} (optional)
        }).
-endif.

-ifndef('RESOURCE.RESERVATIONINFO_PB_H').
-define('RESOURCE.RESERVATIONINFO_PB_H', true).
-record('Resource.ReservationInfo',
        {principal,                     % = 1, string (optional)
         labels                         % = 2, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('VALUE.SET_PB_H').
-define('VALUE.SET_PB_H', true).
-record('Value.Set',
        {item = []                      % = 1, [string]
        }).
-endif.

-ifndef('VALUE.RANGE_PB_H').
-define('VALUE.RANGE_PB_H', true).
-record('Value.Range',
        {'begin',                       % = 1, uint64
         'end'                          % = 2, uint64
        }).
-endif.

-ifndef('VALUE.RANGES_PB_H').
-define('VALUE.RANGES_PB_H', true).
-record('Value.Ranges',
        {range = []                     % = 1, [{msg,'Value.Range'}]
        }).
-endif.

-ifndef('VALUE.SCALAR_PB_H').
-define('VALUE.SCALAR_PB_H', true).
-record('Value.Scalar',
        {value                          % = 1, double
        }).
-endif.

-ifndef('RESOURCE_PB_H').
-define('RESOURCE_PB_H', true).
-record('Resource',
        {name,                          % = 1, string
         type,                          % = 2, {enum,'Value.Type'}
         scalar,                        % = 3, {msg,'Value.Scalar'} (optional)
         ranges,                        % = 4, {msg,'Value.Ranges'} (optional)
         set,                           % = 5, {msg,'Value.Set'} (optional)
         role = "*",                    % = 6, string (optional)
         reservation,                   % = 8, {msg,'Resource.ReservationInfo'} (optional)
         disk,                          % = 7, {msg,'Resource.DiskInfo'} (optional)
         revocable                      % = 9, {msg,'Resource.RevocableInfo'} (optional)
        }).
-endif.

-ifndef('OFFER.OPERATION.DESTROY_PB_H').
-define('OFFER.OPERATION.DESTROY_PB_H', true).
-record('Offer.Operation.Destroy',
        {volumes = []                   % = 1, [{msg,'Resource'}]
        }).
-endif.

-ifndef('OFFER.OPERATION.CREATE_PB_H').
-define('OFFER.OPERATION.CREATE_PB_H', true).
-record('Offer.Operation.Create',
        {volumes = []                   % = 1, [{msg,'Resource'}]
        }).
-endif.

-ifndef('OFFER.OPERATION.UNRESERVE_PB_H').
-define('OFFER.OPERATION.UNRESERVE_PB_H', true).
-record('Offer.Operation.Unreserve',
        {resources = []                 % = 1, [{msg,'Resource'}]
        }).
-endif.

-ifndef('OFFER.OPERATION.RESERVE_PB_H').
-define('OFFER.OPERATION.RESERVE_PB_H', true).
-record('Offer.Operation.Reserve',
        {resources = []                 % = 1, [{msg,'Resource'}]
        }).
-endif.

-ifndef('PORT_PB_H').
-define('PORT_PB_H', true).
-record('Port',
        {number,                        % = 1, uint32
         name,                          % = 2, string (optional)
         protocol,                      % = 3, string (optional)
         visibility,                    % = 4, {enum,'DiscoveryInfo.Visibility'} (optional)
         labels                         % = 5, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('PORTS_PB_H').
-define('PORTS_PB_H', true).
-record('Ports',
        {ports = []                     % = 1, [{msg,'Port'}]
        }).
-endif.

-ifndef('DISCOVERYINFO_PB_H').
-define('DISCOVERYINFO_PB_H', true).
-record('DiscoveryInfo',
        {visibility,                    % = 1, {enum,'DiscoveryInfo.Visibility'}
         name,                          % = 2, string (optional)
         environment,                   % = 3, string (optional)
         location,                      % = 4, string (optional)
         version,                       % = 5, string (optional)
         ports,                         % = 6, {msg,'Ports'} (optional)
         labels                         % = 7, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('KILLPOLICY_PB_H').
-define('KILLPOLICY_PB_H', true).
-record('KillPolicy',
        {grace_period                   % = 1, {msg,'DurationInfo'} (optional)
        }).
-endif.

-ifndef('HEALTHCHECK.HTTP_PB_H').
-define('HEALTHCHECK.HTTP_PB_H', true).
-record('HealthCheck.HTTP',
        {port,                          % = 1, uint32
         path = "/",                    % = 2, string (optional)
         statuses = []                  % = 4, [uint32]
        }).
-endif.

-ifndef('HEALTHCHECK_PB_H').
-define('HEALTHCHECK_PB_H', true).
-record('HealthCheck',
        {http,                          % = 1, {msg,'HealthCheck.HTTP'} (optional)
         delay_seconds = 15.0,          % = 2, double (optional)
         interval_seconds = 10.0,       % = 3, double (optional)
         timeout_seconds = 20.0,        % = 4, double (optional)
         consecutive_failures = 3,      % = 5, uint32 (optional)
         grace_period_seconds = 10.0,   % = 6, double (optional)
         command                        % = 7, {msg,'CommandInfo'} (optional)
        }).
-endif.

-ifndef('NETWORKINFO.IPADDRESS_PB_H').
-define('NETWORKINFO.IPADDRESS_PB_H', true).
-record('NetworkInfo.IPAddress',
        {protocol,                      % = 1, {enum,'NetworkInfo.Protocol'} (optional)
         ip_address                     % = 2, string (optional)
        }).
-endif.

-ifndef('NETWORKINFO_PB_H').
-define('NETWORKINFO_PB_H', true).
-record('NetworkInfo',
        {ip_addresses = [],             % = 5, [{msg,'NetworkInfo.IPAddress'}]
         name,                          % = 6, string (optional)
         groups = [],                   % = 3, [string]
         labels                         % = 4, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('CONTAINERINFO.MESOSINFO_PB_H').
-define('CONTAINERINFO.MESOSINFO_PB_H', true).
-record('ContainerInfo.MesosInfo',
        {image                          % = 1, {msg,'Image'} (optional)
        }).
-endif.

-ifndef('CONTAINERINFO_PB_H').
-define('CONTAINERINFO_PB_H', true).
-record('ContainerInfo',
        {type,                          % = 1, {enum,'ContainerInfo.Type'}
         volumes = [],                  % = 2, [{msg,'Volume'}]
         hostname,                      % = 4, string (optional)
         docker,                        % = 3, {msg,'ContainerInfo.DockerInfo'} (optional)
         mesos,                         % = 5, {msg,'ContainerInfo.MesosInfo'} (optional)
         network_infos = []             % = 7, [{msg,'NetworkInfo'}]
        }).
-endif.

-ifndef('FRAMEWORKID_PB_H').
-define('FRAMEWORKID_PB_H', true).
-record('FrameworkID',
        {value                          % = 1, string
        }).
-endif.

-ifndef('EXECUTORID_PB_H').
-define('EXECUTORID_PB_H', true).
-record('ExecutorID',
        {value                          % = 1, string
        }).
-endif.

-ifndef('EXECUTORINFO_PB_H').
-define('EXECUTORINFO_PB_H', true).
-record('ExecutorInfo',
        {executor_id,                   % = 1, {msg,'ExecutorID'}
         framework_id,                  % = 8, {msg,'FrameworkID'} (optional)
         command,                       % = 7, {msg,'CommandInfo'}
         container,                     % = 11, {msg,'ContainerInfo'} (optional)
         resources = [],                % = 5, [{msg,'Resource'}]
         name,                          % = 9, string (optional)
         source,                        % = 10, string (optional)
         data,                          % = 4, bytes (optional)
         discovery,                     % = 12, {msg,'DiscoveryInfo'} (optional)
         shutdown_grace_period,         % = 13, {msg,'DurationInfo'} (optional)
         labels                         % = 14, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('AGENTID_PB_H').
-define('AGENTID_PB_H', true).
-record('AgentID',
        {value                          % = 1, string
        }).
-endif.

-ifndef('TASKID_PB_H').
-define('TASKID_PB_H', true).
-record('TaskID',
        {value                          % = 1, string
        }).
-endif.

-ifndef('TASKINFO_PB_H').
-define('TASKINFO_PB_H', true).
-record('TaskInfo',
        {name,                          % = 1, string
         task_id,                       % = 2, {msg,'TaskID'}
         agent_id,                      % = 3, {msg,'AgentID'}
         resources = [],                % = 4, [{msg,'Resource'}]
         executor,                      % = 5, {msg,'ExecutorInfo'} (optional)
         command,                       % = 7, {msg,'CommandInfo'} (optional)
         container,                     % = 9, {msg,'ContainerInfo'} (optional)
         health_check,                  % = 8, {msg,'HealthCheck'} (optional)
         kill_policy,                   % = 12, {msg,'KillPolicy'} (optional)
         data,                          % = 6, bytes (optional)
         labels,                        % = 10, {msg,'Labels'} (optional)
         discovery                      % = 11, {msg,'DiscoveryInfo'} (optional)
        }).
-endif.

-ifndef('OFFER.OPERATION.LAUNCH_PB_H').
-define('OFFER.OPERATION.LAUNCH_PB_H', true).
-record('Offer.Operation.Launch',
        {task_infos = []                % = 1, [{msg,'TaskInfo'}]
        }).
-endif.

-ifndef('OFFER.OPERATION_PB_H').
-define('OFFER.OPERATION_PB_H', true).
-record('Offer.Operation',
        {type,                          % = 1, {enum,'Offer.Operation.Type'}
         launch,                        % = 2, {msg,'Offer.Operation.Launch'} (optional)
         reserve,                       % = 3, {msg,'Offer.Operation.Reserve'} (optional)
         unreserve,                     % = 4, {msg,'Offer.Operation.Unreserve'} (optional)
         create,                        % = 5, {msg,'Offer.Operation.Create'} (optional)
         destroy                        % = 6, {msg,'Offer.Operation.Destroy'} (optional)
        }).
-endif.

-ifndef('FLAG_PB_H').
-define('FLAG_PB_H', true).
-record('Flag',
        {name,                          % = 1, string
         value                          % = 2, string (optional)
        }).
-endif.

-ifndef('WINDOW_PB_H').
-define('WINDOW_PB_H', true).
-record('Window',
        {machine_ids = [],              % = 1, [{msg,'MachineID'}]
         unavailability                 % = 2, {msg,'Unavailability'}
        }).
-endif.

-ifndef('SCHEDULE_PB_H').
-define('SCHEDULE_PB_H', true).
-record('Schedule',
        {windows = []                   % = 1, [{msg,'Window'}]
        }).
-endif.

-ifndef('VALUE.TEXT_PB_H').
-define('VALUE.TEXT_PB_H', true).
-record('Value.Text',
        {value                          % = 1, string
        }).
-endif.

-ifndef('VALUE_PB_H').
-define('VALUE_PB_H', true).
-record('Value',
        {type,                          % = 1, {enum,'Value.Type'}
         scalar,                        % = 2, {msg,'Value.Scalar'} (optional)
         ranges,                        % = 3, {msg,'Value.Ranges'} (optional)
         set,                           % = 4, {msg,'Value.Set'} (optional)
         text                           % = 5, {msg,'Value.Text'} (optional)
        }).
-endif.

-ifndef('REQUEST_PB_H').
-define('REQUEST_PB_H', true).
-record('Request',
        {agent_id,                      % = 1, {msg,'AgentID'} (optional)
         resources = []                 % = 2, [{msg,'Resource'}]
        }).
-endif.

-ifndef('CGROUPINFO.NETCLS_PB_H').
-define('CGROUPINFO.NETCLS_PB_H', true).
-record('CgroupInfo.NetCls',
        {classid                        % = 1, uint32 (optional)
        }).
-endif.

-ifndef('CGROUPINFO_PB_H').
-define('CGROUPINFO_PB_H', true).
-record('CgroupInfo',
        {net_cls                        % = 1, {msg,'CgroupInfo.NetCls'} (optional)
        }).
-endif.

-ifndef('CONTAINERSTATUS_PB_H').
-define('CONTAINERSTATUS_PB_H', true).
-record('ContainerStatus',
        {network_infos = [],            % = 1, [{msg,'NetworkInfo'}]
         cgroup_info,                   % = 2, {msg,'CgroupInfo'} (optional)
         executor_pid                   % = 3, uint32 (optional)
        }).
-endif.

-ifndef('TASKSTATUS_PB_H').
-define('TASKSTATUS_PB_H', true).
-record('TaskStatus',
        {task_id,                       % = 1, {msg,'TaskID'}
         state,                         % = 2, {enum,'TaskState'}
         message,                       % = 4, string (optional)
         source,                        % = 9, {enum,'TaskStatus.Source'} (optional)
         reason,                        % = 10, {enum,'TaskStatus.Reason'} (optional)
         data,                          % = 3, bytes (optional)
         agent_id,                      % = 5, {msg,'AgentID'} (optional)
         executor_id,                   % = 7, {msg,'ExecutorID'} (optional)
         timestamp,                     % = 6, double (optional)
         uuid,                          % = 11, bytes (optional)
         healthy,                       % = 8, bool (optional)
         labels,                        % = 12, {msg,'Labels'} (optional)
         container_status               % = 13, {msg,'ContainerStatus'} (optional)
        }).
-endif.

-ifndef('TASK_PB_H').
-define('TASK_PB_H', true).
-record('Task',
        {name,                          % = 1, string
         task_id,                       % = 2, {msg,'TaskID'}
         framework_id,                  % = 3, {msg,'FrameworkID'}
         executor_id,                   % = 4, {msg,'ExecutorID'} (optional)
         agent_id,                      % = 5, {msg,'AgentID'}
         state,                         % = 6, {enum,'TaskState'}
         resources = [],                % = 7, [{msg,'Resource'}]
         statuses = [],                 % = 8, [{msg,'TaskStatus'}]
         status_update_state,           % = 9, {enum,'TaskState'} (optional)
         status_update_uuid,            % = 10, bytes (optional)
         labels,                        % = 11, {msg,'Labels'} (optional)
         discovery,                     % = 12, {msg,'DiscoveryInfo'} (optional)
         container,                     % = 13, {msg,'ContainerInfo'} (optional)
         user                           % = 14, string (optional)
        }).
-endif.

-ifndef('EVENT.TASKADDED_PB_H').
-define('EVENT.TASKADDED_PB_H', true).
-record('Event.TaskAdded',
        {task                           % = 1, {msg,'Task'}
        }).
-endif.

-ifndef('CONTAINERID_PB_H').
-define('CONTAINERID_PB_H', true).
-record('ContainerID',
        {value                          % = 1, string
        }).
-endif.

-ifndef('METRIC_PB_H').
-define('METRIC_PB_H', true).
-record('Metric',
        {name,                          % = 1, string
         value                          % = 2, double (optional)
        }).
-endif.

-ifndef('RESPONSE.GETFILECONTENTS_PB_H').
-define('RESPONSE.GETFILECONTENTS_PB_H', true).
-record('Response.GetFileContents',
        {data = []                      % = 1, [bytes]
        }).
-endif.

-ifndef('RESPONSE.GETEXECUTORS.EXECUTOR_PB_H').
-define('RESPONSE.GETEXECUTORS.EXECUTOR_PB_H', true).
-record('Response.GetExecutors.Executor',
        {executor_info,                 % = 1, {msg,'ExecutorInfo'}
         agent_id                       % = 2, {msg,'AgentID'}
        }).
-endif.

-ifndef('RESPONSE.GETEXECUTORS_PB_H').
-define('RESPONSE.GETEXECUTORS_PB_H', true).
-record('Response.GetExecutors',
        {executors = [],                % = 1, [{msg,'Response.GetExecutors.Executor'}]
         orphan_executors = []          % = 2, [{msg,'Response.GetExecutors.Executor'}]
        }).
-endif.

-ifndef('CALL.GETMETRICS_PB_H').
-define('CALL.GETMETRICS_PB_H', true).
-record('Call.GetMetrics',
        {timeout                        % = 1, {msg,'DurationInfo'} (optional)
        }).
-endif.

-ifndef('UDPSTATISTICS_PB_H').
-define('UDPSTATISTICS_PB_H', true).
-record('UdpStatistics',
        {'InDatagrams',                 % = 1, int64 (optional)
         'NoPorts',                     % = 2, int64 (optional)
         'InErrors',                    % = 3, int64 (optional)
         'OutDatagrams',                % = 4, int64 (optional)
         'RcvbufErrors',                % = 5, int64 (optional)
         'SndbufErrors',                % = 6, int64 (optional)
         'InCsumErrors',                % = 7, int64 (optional)
         'IgnoredMulti'                 % = 8, int64 (optional)
        }).
-endif.

-ifndef('TCPSTATISTICS_PB_H').
-define('TCPSTATISTICS_PB_H', true).
-record('TcpStatistics',
        {'RtoAlgorithm',                % = 1, int64 (optional)
         'RtoMin',                      % = 2, int64 (optional)
         'RtoMax',                      % = 3, int64 (optional)
         'MaxConn',                     % = 4, int64 (optional)
         'ActiveOpens',                 % = 5, int64 (optional)
         'PassiveOpens',                % = 6, int64 (optional)
         'AttemptFails',                % = 7, int64 (optional)
         'EstabResets',                 % = 8, int64 (optional)
         'CurrEstab',                   % = 9, int64 (optional)
         'InSegs',                      % = 10, int64 (optional)
         'OutSegs',                     % = 11, int64 (optional)
         'RetransSegs',                 % = 12, int64 (optional)
         'InErrs',                      % = 13, int64 (optional)
         'OutRsts',                     % = 14, int64 (optional)
         'InCsumErrors'                 % = 15, int64 (optional)
        }).
-endif.

-ifndef('IPSTATISTICS_PB_H').
-define('IPSTATISTICS_PB_H', true).
-record('IpStatistics',
        {'Forwarding',                  % = 1, int64 (optional)
         'DefaultTTL',                  % = 2, int64 (optional)
         'InReceives',                  % = 3, int64 (optional)
         'InHdrErrors',                 % = 4, int64 (optional)
         'InAddrErrors',                % = 5, int64 (optional)
         'ForwDatagrams',               % = 6, int64 (optional)
         'InUnknownProtos',             % = 7, int64 (optional)
         'InDiscards',                  % = 8, int64 (optional)
         'InDelivers',                  % = 9, int64 (optional)
         'OutRequests',                 % = 10, int64 (optional)
         'OutDiscards',                 % = 11, int64 (optional)
         'OutNoRoutes',                 % = 12, int64 (optional)
         'ReasmTimeout',                % = 13, int64 (optional)
         'ReasmReqds',                  % = 14, int64 (optional)
         'ReasmOKs',                    % = 15, int64 (optional)
         'ReasmFails',                  % = 16, int64 (optional)
         'FragOKs',                     % = 17, int64 (optional)
         'FragFails',                   % = 18, int64 (optional)
         'FragCreates'                  % = 19, int64 (optional)
        }).
-endif.

-ifndef('RESPONSE.GETMETRICS_PB_H').
-define('RESPONSE.GETMETRICS_PB_H', true).
-record('Response.GetMetrics',
        {metrics = []                   % = 1, [{msg,'Metric'}]
        }).
-endif.

-ifndef('QUOTAREQUEST_PB_H').
-define('QUOTAREQUEST_PB_H', true).
-record('QuotaRequest',
        {force = false,                 % = 1, bool (optional)
         role,                          % = 2, string (optional)
         guarantee = []                 % = 3, [{msg,'Resource'}]
        }).
-endif.

-ifndef('CALL.SETQUOTA_PB_H').
-define('CALL.SETQUOTA_PB_H', true).
-record('Call.SetQuota',
        {quota_request                  % = 1, {msg,'QuotaRequest'}
        }).
-endif.

-ifndef('VERSIONINFO_PB_H').
-define('VERSIONINFO_PB_H', true).
-record('VersionInfo',
        {version,                       % = 1, string
         build_date,                    % = 2, string (optional)
         build_time,                    % = 3, double (optional)
         build_user,                    % = 4, string (optional)
         git_sha,                       % = 5, string (optional)
         git_branch,                    % = 6, string (optional)
         git_tag                        % = 7, string (optional)
        }).
-endif.

-ifndef('ADDRESS_PB_H').
-define('ADDRESS_PB_H', true).
-record('Address',
        {hostname,                      % = 1, string (optional)
         ip,                            % = 2, string (optional)
         port                           % = 3, int32
        }).
-endif.

-ifndef('MASTERINFO_PB_H').
-define('MASTERINFO_PB_H', true).
-record('MasterInfo',
        {id,                            % = 1, string
         ip,                            % = 2, uint32
         port = 5050,                   % = 3, uint32
         pid,                           % = 4, string (optional)
         hostname,                      % = 5, string (optional)
         version,                       % = 6, string (optional)
         address                        % = 7, {msg,'Address'} (optional)
        }).
-endif.

-ifndef('FRAMEWORKINFO.CAPABILITY_PB_H').
-define('FRAMEWORKINFO.CAPABILITY_PB_H', true).
-record('FrameworkInfo.Capability',
        {type                           % = 1, {enum,'FrameworkInfo.Capability.Type'} (optional)
        }).
-endif.

-ifndef('FRAMEWORKINFO_PB_H').
-define('FRAMEWORKINFO_PB_H', true).
-record('FrameworkInfo',
        {user,                          % = 1, string
         name,                          % = 2, string
         id,                            % = 3, {msg,'FrameworkID'} (optional)
         failover_timeout = 0.0,        % = 4, double (optional)
         checkpoint = false,            % = 5, bool (optional)
         role = "*",                    % = 6, string (optional)
         hostname,                      % = 7, string (optional)
         principal,                     % = 8, string (optional)
         webui_url,                     % = 9, string (optional)
         capabilities = [],             % = 10, [{msg,'FrameworkInfo.Capability'}]
         labels                         % = 11, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('URL_PB_H').
-define('URL_PB_H', true).
-record('URL',
        {scheme,                        % = 1, string
         address,                       % = 2, {msg,'Address'}
         path,                          % = 3, string (optional)
         query = [],                    % = 4, [{msg,'Parameter'}]
         fragment                       % = 5, string (optional)
        }).
-endif.

-ifndef('CALL.REMOVEQUOTA_PB_H').
-define('CALL.REMOVEQUOTA_PB_H', true).
-record('Call.RemoveQuota',
        {role                           % = 1, string
        }).
-endif.

-ifndef('CALL.STOPMAINTENANCE_PB_H').
-define('CALL.STOPMAINTENANCE_PB_H', true).
-record('Call.StopMaintenance',
        {machines = []                  % = 1, [{msg,'MachineID'}]
        }).
-endif.

-ifndef('CALL.STARTMAINTENANCE_PB_H').
-define('CALL.STARTMAINTENANCE_PB_H', true).
-record('Call.StartMaintenance',
        {machines = []                  % = 1, [{msg,'MachineID'}]
        }).
-endif.

-ifndef('CALL.UPDATEMAINTENANCESCHEDULE_PB_H').
-define('CALL.UPDATEMAINTENANCESCHEDULE_PB_H', true).
-record('Call.UpdateMaintenanceSchedule',
        {schedule = []                  % = 1, [{msg,'Schedule'}]
        }).
-endif.

-ifndef('CALL.DESTROYVOLUMES_PB_H').
-define('CALL.DESTROYVOLUMES_PB_H', true).
-record('Call.DestroyVolumes',
        {agent_id,                      % = 1, {msg,'AgentID'}
         volumes = []                   % = 2, [{msg,'Resource'}]
        }).
-endif.

-ifndef('CALL.CREATEVOLUMES_PB_H').
-define('CALL.CREATEVOLUMES_PB_H', true).
-record('Call.CreateVolumes',
        {agent_id,                      % = 1, {msg,'AgentID'}
         volumes = []                   % = 2, [{msg,'Resource'}]
        }).
-endif.

-ifndef('CALL.UNRESERVERESOURCES_PB_H').
-define('CALL.UNRESERVERESOURCES_PB_H', true).
-record('Call.UnreserveResources',
        {agent_id,                      % = 1, {msg,'AgentID'}
         resources = []                 % = 2, [{msg,'Resource'}]
        }).
-endif.

-ifndef('CALL.RESERVERESOURCES_PB_H').
-define('CALL.RESERVERESOURCES_PB_H', true).
-record('Call.ReserveResources',
        {agent_id,                      % = 1, {msg,'AgentID'}
         resources = []                 % = 2, [{msg,'Resource'}]
        }).
-endif.

-ifndef('CALL.UPDATEWEIGHTS_PB_H').
-define('CALL.UPDATEWEIGHTS_PB_H', true).
-record('Call.UpdateWeights',
        {weight_infos = []              % = 1, [{msg,'WeightInfo'}]
        }).
-endif.

-ifndef('CALL.READFILE_PB_H').
-define('CALL.READFILE_PB_H', true).
-record('Call.ReadFile',
        {path,                          % = 1, string
         offset,                        % = 2, string (optional)
         length                         % = 3, string (optional)
        }).
-endif.

-ifndef('CALL.LISTFILES_PB_H').
-define('CALL.LISTFILES_PB_H', true).
-record('Call.ListFiles',
        {path                           % = 1, string
        }).
-endif.

-ifndef('CALL.SETLOGGINGLEVEL_PB_H').
-define('CALL.SETLOGGINGLEVEL_PB_H', true).
-record('Call.SetLoggingLevel',
        {level,                         % = 1, uint32
         duration                       % = 2, {msg,'DurationInfo'}
        }).
-endif.

-ifndef('CALL_PB_H').
-define('CALL_PB_H', true).
-record('Call',
        {type,                          % = 1, {enum,'Call.Type'} (optional)
         get_metrics,                   % = 2, {msg,'Call.GetMetrics'} (optional)
         set_logging_level,             % = 3, {msg,'Call.SetLoggingLevel'} (optional)
         list_files,                    % = 4, {msg,'Call.ListFiles'} (optional)
         read_file,                     % = 5, {msg,'Call.ReadFile'} (optional)
         update_weights,                % = 6, {msg,'Call.UpdateWeights'} (optional)
         reserve_resources,             % = 7, {msg,'Call.ReserveResources'} (optional)
         unreserve_resources,           % = 8, {msg,'Call.UnreserveResources'} (optional)
         create_volumes,                % = 9, {msg,'Call.CreateVolumes'} (optional)
         destroy_volumes,               % = 10, {msg,'Call.DestroyVolumes'} (optional)
         update_maintenance_schedule,   % = 11, {msg,'Call.UpdateMaintenanceSchedule'} (optional)
         start_maintenance,             % = 12, {msg,'Call.StartMaintenance'} (optional)
         stop_maintenance,              % = 13, {msg,'Call.StopMaintenance'} (optional)
         set_quota,                     % = 14, {msg,'Call.SetQuota'} (optional)
         remove_quota                   % = 15, {msg,'Call.RemoveQuota'} (optional)
        }).
-endif.

-ifndef('OFFERID_PB_H').
-define('OFFERID_PB_H', true).
-record('OfferID',
        {value                          % = 1, string
        }).
-endif.

-ifndef('INVERSEOFFER_PB_H').
-define('INVERSEOFFER_PB_H', true).
-record('InverseOffer',
        {id,                            % = 1, {msg,'OfferID'}
         url,                           % = 2, {msg,'URL'} (optional)
         framework_id,                  % = 3, {msg,'FrameworkID'}
         agent_id,                      % = 4, {msg,'AgentID'} (optional)
         unavailability,                % = 5, {msg,'Unavailability'}
         resources = []                 % = 6, [{msg,'Resource'}]
        }).
-endif.

-ifndef('ATTRIBUTE_PB_H').
-define('ATTRIBUTE_PB_H', true).
-record('Attribute',
        {name,                          % = 1, string
         type,                          % = 2, {enum,'Value.Type'}
         scalar,                        % = 3, {msg,'Value.Scalar'} (optional)
         ranges,                        % = 4, {msg,'Value.Ranges'} (optional)
         set,                           % = 6, {msg,'Value.Set'} (optional)
         text                           % = 5, {msg,'Value.Text'} (optional)
        }).
-endif.

-ifndef('OFFER_PB_H').
-define('OFFER_PB_H', true).
-record('Offer',
        {id,                            % = 1, {msg,'OfferID'}
         framework_id,                  % = 2, {msg,'FrameworkID'}
         agent_id,                      % = 3, {msg,'AgentID'}
         hostname,                      % = 4, string
         url,                           % = 8, {msg,'URL'} (optional)
         resources = [],                % = 5, [{msg,'Resource'}]
         attributes = [],               % = 7, [{msg,'Attribute'}]
         executor_ids = [],             % = 6, [{msg,'ExecutorID'}]
         unavailability                 % = 9, {msg,'Unavailability'} (optional)
        }).
-endif.

-ifndef('RESPONSE.GETFRAMEWORKS.FRAMEWORK_PB_H').
-define('RESPONSE.GETFRAMEWORKS.FRAMEWORK_PB_H', true).
-record('Response.GetFrameworks.Framework',
        {framework_info,                % = 1, {msg,'FrameworkInfo'}
         active,                        % = 2, bool
         connected,                     % = 3, bool
         registered_time,               % = 4, {msg,'TimeInfo'} (optional)
         reregistered_time,             % = 5, {msg,'TimeInfo'} (optional)
         unregistered_time,             % = 6, {msg,'TimeInfo'} (optional)
         offers = [],                   % = 7, [{msg,'Offer'}]
         inverse_offers = [],           % = 8, [{msg,'InverseOffer'}]
         allocated_resources = [],      % = 9, [{msg,'Resource'}]
         offered_resources = []         % = 10, [{msg,'Resource'}]
        }).
-endif.

-ifndef('RESOURCEUSAGE.EXECUTOR.TASK_PB_H').
-define('RESOURCEUSAGE.EXECUTOR.TASK_PB_H', true).
-record('ResourceUsage.Executor.Task',
        {name,                          % = 1, string
         id,                            % = 2, {msg,'TaskID'}
         resources = [],                % = 3, [{msg,'Resource'}]
         labels                         % = 4, {msg,'Labels'} (optional)
        }).
-endif.

-ifndef('INVERSEOFFERSTATUS_PB_H').
-define('INVERSEOFFERSTATUS_PB_H', true).
-record('InverseOfferStatus',
        {status,                        % = 1, {enum,'InverseOfferStatus.Status'}
         framework_id,                  % = 2, {msg,'FrameworkID'}
         timestamp                      % = 3, {msg,'TimeInfo'}
        }).
-endif.

-ifndef('CLUSTERSTATUS.DRAININGMACHINE_PB_H').
-define('CLUSTERSTATUS.DRAININGMACHINE_PB_H', true).
-record('ClusterStatus.DrainingMachine',
        {id,                            % = 1, {msg,'MachineID'}
         statuses = []                  % = 2, [{msg,'InverseOfferStatus'}]
        }).
-endif.

-ifndef('ROLE_PB_H').
-define('ROLE_PB_H', true).
-record('Role',
        {name,                          % = 1, string
         weight,                        % = 2, double
         frameworks = [],               % = 3, [{msg,'FrameworkID'}]
         resources = []                 % = 4, [{msg,'Resource'}]
        }).
-endif.

-ifndef('EVENT.TASKUPDATED_PB_H').
-define('EVENT.TASKUPDATED_PB_H', true).
-record('Event.TaskUpdated',
        {task_id,                       % = 1, {msg,'TaskID'}
         framework_id,                  % = 2, {msg,'FrameworkID'}
         agent_id,                      % = 3, {msg,'AgentID'}
         executor_id,                   % = 4, {msg,'ExecutorID'} (optional)
         state                          % = 5, {enum,'TaskState'}
        }).
-endif.

-ifndef('AGENTINFO_PB_H').
-define('AGENTINFO_PB_H', true).
-record('AgentInfo',
        {hostname,                      % = 1, string
         port = 5051,                   % = 8, int32 (optional)
         resources = [],                % = 3, [{msg,'Resource'}]
         attributes = [],               % = 5, [{msg,'Attribute'}]
         id                             % = 6, {msg,'AgentID'} (optional)
        }).
-endif.

-ifndef('RESPONSE.GETAGENTS.AGENT_PB_H').
-define('RESPONSE.GETAGENTS.AGENT_PB_H', true).
-record('Response.GetAgents.Agent',
        {agent_info,                    % = 1, {msg,'AgentInfo'}
         active,                        % = 2, bool
         version,                       % = 3, string
         pid,                           % = 4, string (optional)
         registered_time,               % = 5, {msg,'TimeInfo'} (optional)
         reregistered_time,             % = 6, {msg,'TimeInfo'} (optional)
         total_resources = [],          % = 7, [{msg,'Resource'}]
         allocated_resources = [],      % = 8, [{msg,'Resource'}]
         offered_resources = []         % = 9, [{msg,'Resource'}]
        }).
-endif.

-ifndef('RESPONSE.GETAGENTS_PB_H').
-define('RESPONSE.GETAGENTS_PB_H', true).
-record('Response.GetAgents',
        {agents = []                    % = 1, [{msg,'Response.GetAgents.Agent'}]
        }).
-endif.

-ifndef('RESPONSE.GETFRAMEWORKS_PB_H').
-define('RESPONSE.GETFRAMEWORKS_PB_H', true).
-record('Response.GetFrameworks',
        {frameworks = [],               % = 1, [{msg,'Response.GetFrameworks.Framework'}]
         completed_frameworks = [],     % = 2, [{msg,'Response.GetFrameworks.Framework'}]
         recovered_frameworks = []      % = 3, [{msg,'FrameworkInfo'}]
        }).
-endif.

-ifndef('RESPONSE.GETTASKS_PB_H').
-define('RESPONSE.GETTASKS_PB_H', true).
-record('Response.GetTasks',
        {pending_tasks = [],            % = 1, [{msg,'Task'}]
         tasks = [],                    % = 2, [{msg,'Task'}]
         completed_tasks = [],          % = 3, [{msg,'Task'}]
         orphan_tasks = []              % = 4, [{msg,'Task'}]
        }).
-endif.

-ifndef('RESPONSE.GETSTATE_PB_H').
-define('RESPONSE.GETSTATE_PB_H', true).
-record('Response.GetState',
        {get_tasks,                     % = 1, {msg,'Response.GetTasks'} (optional)
         get_executors,                 % = 2, {msg,'Response.GetExecutors'} (optional)
         get_frameworks,                % = 3, {msg,'Response.GetFrameworks'} (optional)
         get_agents                     % = 4, {msg,'Response.GetAgents'} (optional)
        }).
-endif.

-ifndef('EVENT.SUBSCRIBED_PB_H').
-define('EVENT.SUBSCRIBED_PB_H', true).
-record('Event.Subscribed',
        {get_state                      % = 1, {msg,'Response.GetState'} (optional)
        }).
-endif.

-ifndef('ICMPSTATISTICS_PB_H').
-define('ICMPSTATISTICS_PB_H', true).
-record('IcmpStatistics',
        {'InMsgs',                      % = 1, int64 (optional)
         'InErrors',                    % = 2, int64 (optional)
         'InCsumErrors',                % = 3, int64 (optional)
         'InDestUnreachs',              % = 4, int64 (optional)
         'InTimeExcds',                 % = 5, int64 (optional)
         'InParmProbs',                 % = 6, int64 (optional)
         'InSrcQuenchs',                % = 7, int64 (optional)
         'InRedirects',                 % = 8, int64 (optional)
         'InEchos',                     % = 9, int64 (optional)
         'InEchoReps',                  % = 10, int64 (optional)
         'InTimestamps',                % = 11, int64 (optional)
         'InTimestampReps',             % = 12, int64 (optional)
         'InAddrMasks',                 % = 13, int64 (optional)
         'InAddrMaskReps',              % = 14, int64 (optional)
         'OutMsgs',                     % = 15, int64 (optional)
         'OutErrors',                   % = 16, int64 (optional)
         'OutDestUnreachs',             % = 17, int64 (optional)
         'OutTimeExcds',                % = 18, int64 (optional)
         'OutParmProbs',                % = 19, int64 (optional)
         'OutSrcQuenchs',               % = 20, int64 (optional)
         'OutRedirects',                % = 21, int64 (optional)
         'OutEchos',                    % = 22, int64 (optional)
         'OutEchoReps',                 % = 23, int64 (optional)
         'OutTimestamps',               % = 24, int64 (optional)
         'OutTimestampReps',            % = 25, int64 (optional)
         'OutAddrMasks',                % = 26, int64 (optional)
         'OutAddrMaskReps'              % = 27, int64 (optional)
        }).
-endif.

-ifndef('SNMPSTATISTICS_PB_H').
-define('SNMPSTATISTICS_PB_H', true).
-record('SNMPStatistics',
        {ip_stats,                      % = 1, {msg,'IpStatistics'} (optional)
         icmp_stats,                    % = 2, {msg,'IcmpStatistics'} (optional)
         tcp_stats,                     % = 3, {msg,'TcpStatistics'} (optional)
         udp_stats                      % = 4, {msg,'UdpStatistics'} (optional)
        }).
-endif.

-ifndef('TRAFFICCONTROLSTATISTICS_PB_H').
-define('TRAFFICCONTROLSTATISTICS_PB_H', true).
-record('TrafficControlStatistics',
        {id,                            % = 1, string
         backlog,                       % = 2, uint64 (optional)
         bytes,                         % = 3, uint64 (optional)
         drops,                         % = 4, uint64 (optional)
         overlimits,                    % = 5, uint64 (optional)
         packets,                       % = 6, uint64 (optional)
         qlen,                          % = 7, uint64 (optional)
         ratebps,                       % = 8, uint64 (optional)
         ratepps,                       % = 9, uint64 (optional)
         requeues                       % = 10, uint64 (optional)
        }).
-endif.

-ifndef('PERFSTATISTICS_PB_H').
-define('PERFSTATISTICS_PB_H', true).
-record('PerfStatistics',
        {timestamp,                     % = 1, double
         duration,                      % = 2, double
         cycles,                        % = 3, uint64 (optional)
         stalled_cycles_frontend,       % = 4, uint64 (optional)
         stalled_cycles_backend,        % = 5, uint64 (optional)
         instructions,                  % = 6, uint64 (optional)
         cache_references,              % = 7, uint64 (optional)
         cache_misses,                  % = 8, uint64 (optional)
         branches,                      % = 9, uint64 (optional)
         branch_misses,                 % = 10, uint64 (optional)
         bus_cycles,                    % = 11, uint64 (optional)
         ref_cycles,                    % = 12, uint64 (optional)
         cpu_clock,                     % = 13, double (optional)
         task_clock,                    % = 14, double (optional)
         page_faults,                   % = 15, uint64 (optional)
         minor_faults,                  % = 16, uint64 (optional)
         major_faults,                  % = 17, uint64 (optional)
         context_switches,              % = 18, uint64 (optional)
         cpu_migrations,                % = 19, uint64 (optional)
         alignment_faults,              % = 20, uint64 (optional)
         emulation_faults,              % = 21, uint64 (optional)
         l1_dcache_loads,               % = 22, uint64 (optional)
         l1_dcache_load_misses,         % = 23, uint64 (optional)
         l1_dcache_stores,              % = 24, uint64 (optional)
         l1_dcache_store_misses,        % = 25, uint64 (optional)
         l1_dcache_prefetches,          % = 26, uint64 (optional)
         l1_dcache_prefetch_misses,     % = 27, uint64 (optional)
         l1_icache_loads,               % = 28, uint64 (optional)
         l1_icache_load_misses,         % = 29, uint64 (optional)
         l1_icache_prefetches,          % = 30, uint64 (optional)
         l1_icache_prefetch_misses,     % = 31, uint64 (optional)
         llc_loads,                     % = 32, uint64 (optional)
         llc_load_misses,               % = 33, uint64 (optional)
         llc_stores,                    % = 34, uint64 (optional)
         llc_store_misses,              % = 35, uint64 (optional)
         llc_prefetches,                % = 36, uint64 (optional)
         llc_prefetch_misses,           % = 37, uint64 (optional)
         dtlb_loads,                    % = 38, uint64 (optional)
         dtlb_load_misses,              % = 39, uint64 (optional)
         dtlb_stores,                   % = 40, uint64 (optional)
         dtlb_store_misses,             % = 41, uint64 (optional)
         dtlb_prefetches,               % = 42, uint64 (optional)
         dtlb_prefetch_misses,          % = 43, uint64 (optional)
         itlb_loads,                    % = 44, uint64 (optional)
         itlb_load_misses,              % = 45, uint64 (optional)
         branch_loads,                  % = 46, uint64 (optional)
         branch_load_misses,            % = 47, uint64 (optional)
         node_loads,                    % = 48, uint64 (optional)
         node_load_misses,              % = 49, uint64 (optional)
         node_stores,                   % = 50, uint64 (optional)
         node_store_misses,             % = 51, uint64 (optional)
         node_prefetches,               % = 52, uint64 (optional)
         node_prefetch_misses           % = 53, uint64 (optional)
        }).
-endif.

-ifndef('RESOURCESTATISTICS_PB_H').
-define('RESOURCESTATISTICS_PB_H', true).
-record('ResourceStatistics',
        {timestamp,                     % = 1, double
         processes,                     % = 30, uint32 (optional)
         threads,                       % = 31, uint32 (optional)
         cpus_user_time_secs,           % = 2, double (optional)
         cpus_system_time_secs,         % = 3, double (optional)
         cpus_limit,                    % = 4, double (optional)
         cpus_nr_periods,               % = 7, uint32 (optional)
         cpus_nr_throttled,             % = 8, uint32 (optional)
         cpus_throttled_time_secs,      % = 9, double (optional)
         mem_total_bytes,               % = 36, uint64 (optional)
         mem_total_memsw_bytes,         % = 37, uint64 (optional)
         mem_limit_bytes,               % = 6, uint64 (optional)
         mem_soft_limit_bytes,          % = 38, uint64 (optional)
         mem_file_bytes,                % = 10, uint64 (optional)
         mem_anon_bytes,                % = 11, uint64 (optional)
         mem_cache_bytes,               % = 39, uint64 (optional)
         mem_rss_bytes,                 % = 5, uint64 (optional)
         mem_mapped_file_bytes,         % = 12, uint64 (optional)
         mem_swap_bytes,                % = 40, uint64 (optional)
         mem_unevictable_bytes,         % = 41, uint64 (optional)
         mem_low_pressure_counter,      % = 32, uint64 (optional)
         mem_medium_pressure_counter,   % = 33, uint64 (optional)
         mem_critical_pressure_counter, % = 34, uint64 (optional)
         disk_limit_bytes,              % = 26, uint64 (optional)
         disk_used_bytes,               % = 27, uint64 (optional)
         perf,                          % = 13, {msg,'PerfStatistics'} (optional)
         net_rx_packets,                % = 14, uint64 (optional)
         net_rx_bytes,                  % = 15, uint64 (optional)
         net_rx_errors,                 % = 16, uint64 (optional)
         net_rx_dropped,                % = 17, uint64 (optional)
         net_tx_packets,                % = 18, uint64 (optional)
         net_tx_bytes,                  % = 19, uint64 (optional)
         net_tx_errors,                 % = 20, uint64 (optional)
         net_tx_dropped,                % = 21, uint64 (optional)
         net_tcp_rtt_microsecs_p50,     % = 22, double (optional)
         net_tcp_rtt_microsecs_p90,     % = 23, double (optional)
         net_tcp_rtt_microsecs_p95,     % = 24, double (optional)
         net_tcp_rtt_microsecs_p99,     % = 25, double (optional)
         net_tcp_active_connections,    % = 28, double (optional)
         net_tcp_time_wait_connections, % = 29, double (optional)
         net_traffic_control_statistics = [], % = 35, [{msg,'TrafficControlStatistics'}]
         net_snmp_statistics            % = 42, {msg,'SNMPStatistics'} (optional)
        }).
-endif.

-ifndef('CLUSTERSTATUS_PB_H').
-define('CLUSTERSTATUS_PB_H', true).
-record('ClusterStatus',
        {draining_machines = [],        % = 1, [{msg,'ClusterStatus.DrainingMachine'}]
         down_machines = []             % = 2, [{msg,'MachineID'}]
        }).
-endif.

-ifndef('RESPONSE.GETMAINTENANCESTATUS_PB_H').
-define('RESPONSE.GETMAINTENANCESTATUS_PB_H', true).
-record('Response.GetMaintenanceStatus',
        {status                         % = 1, {msg,'ClusterStatus'}
        }).
-endif.

-ifndef('FILEINFO_PB_H').
-define('FILEINFO_PB_H', true).
-record('FileInfo',
        {path,                          % = 1, string
         nlink,                         % = 2, int32 (optional)
         size,                          % = 3, uint64 (optional)
         mtime,                         % = 4, {msg,'TimeInfo'} (optional)
         mode,                          % = 5, uint32 (optional)
         uid,                           % = 6, string (optional)
         gid                            % = 7, string (optional)
        }).
-endif.

-ifndef('RESPONSE.LISTFILES_PB_H').
-define('RESPONSE.LISTFILES_PB_H', true).
-record('Response.ListFiles',
        {file_infos = []                % = 1, [{msg,'FileInfo'}]
        }).
-endif.

-ifndef('QUOTAINFO_PB_H').
-define('QUOTAINFO_PB_H', true).
-record('QuotaInfo',
        {role,                          % = 1, string (optional)
         principal,                     % = 2, string (optional)
         guarantee = []                 % = 3, [{msg,'Resource'}]
        }).
-endif.

-ifndef('QUOTASTATUS_PB_H').
-define('QUOTASTATUS_PB_H', true).
-record('QuotaStatus',
        {infos = []                     % = 1, [{msg,'QuotaInfo'}]
        }).
-endif.

-ifndef('RESPONSE.GETROLES_PB_H').
-define('RESPONSE.GETROLES_PB_H', true).
-record('Response.GetRoles',
        {roles = []                     % = 1, [{msg,'Role'}]
        }).
-endif.

-ifndef('RESPONSE.GETWEIGHTS_PB_H').
-define('RESPONSE.GETWEIGHTS_PB_H', true).
-record('Response.GetWeights',
        {weight_infos = []              % = 1, [{msg,'WeightInfo'}]
        }).
-endif.

-ifndef('RESPONSE.GETMASTER_PB_H').
-define('RESPONSE.GETMASTER_PB_H', true).
-record('Response.GetMaster',
        {master_info                    % = 1, {msg,'MasterInfo'} (optional)
        }).
-endif.

-ifndef('RESPONSE.GETLOGGINGLEVEL_PB_H').
-define('RESPONSE.GETLOGGINGLEVEL_PB_H', true).
-record('Response.GetLoggingLevel',
        {level                          % = 1, uint32
        }).
-endif.

-ifndef('RESPONSE.GETQUOTA_PB_H').
-define('RESPONSE.GETQUOTA_PB_H', true).
-record('Response.GetQuota',
        {status                         % = 1, {msg,'QuotaStatus'}
        }).
-endif.

-ifndef('RESPONSE.GETMAINTENANCESCHEDULE_PB_H').
-define('RESPONSE.GETMAINTENANCESCHEDULE_PB_H', true).
-record('Response.GetMaintenanceSchedule',
        {schedule = []                  % = 1, [{msg,'Schedule'}]
        }).
-endif.

-ifndef('RESPONSE.GETVERSION_PB_H').
-define('RESPONSE.GETVERSION_PB_H', true).
-record('Response.GetVersion',
        {version_info                   % = 1, {msg,'VersionInfo'}
        }).
-endif.

-ifndef('RESPONSE.GETFLAGS_PB_H').
-define('RESPONSE.GETFLAGS_PB_H', true).
-record('Response.GetFlags',
        {flags = []                     % = 1, [{msg,'Flag'}]
        }).
-endif.

-ifndef('RESPONSE.GETHEALTH_PB_H').
-define('RESPONSE.GETHEALTH_PB_H', true).
-record('Response.GetHealth',
        {healthy                        % = 1, bool
        }).
-endif.

-ifndef('RESPONSE_PB_H').
-define('RESPONSE_PB_H', true).
-record('Response',
        {type,                          % = 1, {enum,'Response.Type'} (optional)
         get_health,                    % = 2, {msg,'Response.GetHealth'} (optional)
         get_flags,                     % = 3, {msg,'Response.GetFlags'} (optional)
         get_version,                   % = 4, {msg,'Response.GetVersion'} (optional)
         get_metrics,                   % = 5, {msg,'Response.GetMetrics'} (optional)
         get_logging_level,             % = 6, {msg,'Response.GetLoggingLevel'} (optional)
         list_files,                    % = 7, {msg,'Response.ListFiles'} (optional)
         get_file_contents,             % = 8, {msg,'Response.GetFileContents'} (optional)
         get_state,                     % = 9, {msg,'Response.GetState'} (optional)
         get_agents,                    % = 10, {msg,'Response.GetAgents'} (optional)
         get_frameworks,                % = 11, {msg,'Response.GetFrameworks'} (optional)
         get_executors,                 % = 12, {msg,'Response.GetExecutors'} (optional)
         get_tasks,                     % = 13, {msg,'Response.GetTasks'} (optional)
         get_roles,                     % = 14, {msg,'Response.GetRoles'} (optional)
         get_weights,                   % = 15, {msg,'Response.GetWeights'} (optional)
         get_master,                    % = 16, {msg,'Response.GetMaster'} (optional)
         get_maintenance_status,        % = 17, {msg,'Response.GetMaintenanceStatus'} (optional)
         get_maintenance_schedule,      % = 18, {msg,'Response.GetMaintenanceSchedule'} (optional)
         get_quota                      % = 19, {msg,'Response.GetQuota'} (optional)
        }).
-endif.

-ifndef('EVENT_PB_H').
-define('EVENT_PB_H', true).
-record('Event',
        {type,                          % = 1, {enum,'Event.Type'} (optional)
         subscribed,                    % = 2, {msg,'Event.Subscribed'} (optional)
         task_added,                    % = 3, {msg,'Event.TaskAdded'} (optional)
         task_updated                   % = 4, {msg,'Event.TaskUpdated'} (optional)
        }).
-endif.

-ifndef('FILTERS_PB_H').
-define('FILTERS_PB_H', true).
-record('Filters',
        {refuse_seconds = 5.0           % = 1, double (optional)
        }).
-endif.

-ifndef('CREDENTIALS_PB_H').
-define('CREDENTIALS_PB_H', true).
-record('Credentials',
        {credentials = []               % = 1, [{msg,'Credential'}]
        }).
-endif.

-ifndef('RATELIMIT_PB_H').
-define('RATELIMIT_PB_H', true).
-record('RateLimit',
        {qps,                           % = 1, double (optional)
         principal,                     % = 2, string
         capacity                       % = 3, uint64 (optional)
        }).
-endif.

-ifndef('RATELIMITS_PB_H').
-define('RATELIMITS_PB_H', true).
-record('RateLimits',
        {limits = [],                   % = 1, [{msg,'RateLimit'}]
         aggregate_default_qps,         % = 2, double (optional)
         aggregate_default_capacity     % = 3, uint64 (optional)
        }).
-endif.

-ifndef('RESOURCEUSAGE.EXECUTOR_PB_H').
-define('RESOURCEUSAGE.EXECUTOR_PB_H', true).
-record('ResourceUsage.Executor',
        {executor_info,                 % = 1, {msg,'ExecutorInfo'}
         allocated = [],                % = 2, [{msg,'Resource'}]
         statistics,                    % = 3, {msg,'ResourceStatistics'} (optional)
         container_id,                  % = 4, {msg,'ContainerID'}
         tasks = []                     % = 5, [{msg,'ResourceUsage.Executor.Task'}]
        }).
-endif.

-ifndef('RESOURCEUSAGE_PB_H').
-define('RESOURCEUSAGE_PB_H', true).
-record('ResourceUsage',
        {executors = [],                % = 1, [{msg,'ResourceUsage.Executor'}]
         total = []                     % = 2, [{msg,'Resource'}]
        }).
-endif.

-endif.
